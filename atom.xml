<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kay Wu&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kaywu.github.io/"/>
  <updated>2016-05-07T04:31:19.000Z</updated>
  <id>http://kaywu.github.io/</id>
  
  <author>
    <name>Kay Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读《App 研发录》</title>
    <link href="http://kaywu.github.io/2016/05/07/App-Development/"/>
    <id>http://kaywu.github.io/2016/05/07/App-Development/</id>
    <published>2016-05-07T00:45:29.000Z</published>
    <updated>2016-05-07T04:31:19.000Z</updated>
    
    <content type="html">&lt;p&gt;去年出了不少 Android 相关的好书，如《Android 开发艺术探索》、《Android 源码设计模式》。如果说以上书是专注于代码，《App 研发录》则是专注于经验，没有踩过坑的人很难体会到这本书的魅力。&lt;br&gt;我自己也是经常看着看着，发现这个问题碰到过，赶紧看看作者是怎么做的然后汲取经验。&lt;br&gt;下文是自己在阅读过程中的一些思考和笔记。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;高效-App-框架设计与重构&quot;&gt;&lt;a href=&quot;#高效-App-框架设计与重构&quot; class=&quot;headerlink&quot; title=&quot;高效 App 框架设计与重构&quot;&gt;&lt;/a&gt;高效 App 框架设计与重构&lt;/h2&gt;&lt;p&gt;这部分讲的是开发规范以及基础库的设计，都是些实际开发会碰到的问题，如项目大了之后混乱的目录、臃肿的 Activity、Html 与 App 之间的跳转等等。每看到一个问题时，最好想想自己是怎么做的，然后对比总结。比如以前自己做项目时 Html 与 App 之间的跳转是通过 int 值来进行判断的，页面越来越多后哪个数字对应于哪个页面就会变得很混乱，每次都要打开文档或代码进行确认，可读性比较差。而书中采取字符串定义协议的方式就清楚很多，要跳转哪个页面一目了然。我们可以再优化一下，协议以 &lt;code&gt;app://&lt;/code&gt; 开头，如 &lt;code&gt;app://user_profile&lt;/code&gt;，可读性就更强了。&lt;br&gt;现在如网络请求、图片加载都已经有相当成熟的库了，不需要重新造轮子。但是了解其基本原理仍然是很有必要的，方便我们增加新功能。如在后端接口还未好时 App 的开发不能因此停滞，就需要 Mock Api 的数据。这时我们可以将网络库再封装一层，在未好的接口上使用本地假数据来继续开发。&lt;/p&gt;
&lt;h2 id=&quot;Crash-异常收集与统计&quot;&gt;&lt;a href=&quot;#Crash-异常收集与统计&quot; class=&quot;headerlink&quot; title=&quot;Crash 异常收集与统计&quot;&gt;&lt;/a&gt;Crash 异常收集与统计&lt;/h2&gt;&lt;p&gt;异常收集大部分公司都是采用第三方服务，这部分功夫可以省了。作者花了大力气在 Crash 分析这章，对八十多种线上崩溃追根溯源。众所周知，Android App 经常会出现一些诡异的 Bug，大部分情况下都是正常的但总有一定的概率报错，让人百思不得其解。比如 Resources$NotFoundException，明明 apk 里有这个资源文件。书中分析是由于内存溢出，解了长久的疑惑。建议遇到诡异的 Bug 时，就到这章搜寻下，即使没有直接的解决方案，就如上文的 Resources$NotFoundException，但定位了异常的原因，省了不少的功夫。&lt;/p&gt;
&lt;h2 id=&quot;App-竞品技术分析&quot;&gt;&lt;a href=&quot;#App-竞品技术分析&quot; class=&quot;headerlink&quot; title=&quot;App 竞品技术分析&quot;&gt;&lt;/a&gt;App 竞品技术分析&lt;/h2&gt;&lt;p&gt;竞品分析真是相当接地气的章节，分析竞争对手 App 的技术实现，掌握他们先进的思想和技术。别的不说，通过其他 App 包里面的 META_INF 目录下会有一个名为某个渠道的 0 字节的文件，猜测是用来批量打渠道包再加以实践验证，不得不谓之高。当然，美团分享&lt;a href=&quot;http://tech.meituan.com/mt-apk-packaging.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多渠道打包方案&lt;/a&gt;是后话了。&lt;br&gt;其他如把 HTML5 页面嵌入到 Zip 包中、将 icon 做成 ttf 文件等针对实际问题的解决方案也让人耳目一新。&lt;/p&gt;
&lt;h2 id=&quot;项目管理和团队建设&quot;&gt;&lt;a href=&quot;#项目管理和团队建设&quot; class=&quot;headerlink&quot; title=&quot;项目管理和团队建设&quot;&gt;&lt;/a&gt;项目管理和团队建设&lt;/h2&gt;&lt;p&gt;敏捷开发这节有个很有意思的点，App 在经过几天的集中测试后会进入 Code Freeze，除非发现很严重的 Bug，否则不再改动代码。初看挺没道理的，明明还有时间去修复 Bug 却不做。但要是有过在上线前几个小时还在改 Bug 的经历就能体会到 Code Freeze 的意义。由于急着上线，修复 Bug 时很容易考虑不周，测试也只来得及测相关功能，一个不小心后果就比较严重。所以距离上线一段时间之内最好不要修改代码，也就是 Code Freeze。&lt;/p&gt;
&lt;p&gt;《App 研发录》是本踏实的书，书中没有高大上的技术，只有应对不同场景的具体解决方案，读之颇有“重剑无锋”之感。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;去年出了不少 Android 相关的好书，如《Android 开发艺术探索》、《Android 源码设计模式》。如果说以上书是专注于代码，《App 研发录》则是专注于经验，没有踩过坑的人很难体会到这本书的魅力。&lt;br&gt;我自己也是经常看着看着，发现这个问题碰到过，赶紧看看作者是怎么做的然后汲取经验。&lt;br&gt;下文是自己在阅读过程中的一些思考和笔记。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>为 aar 关联源代码</title>
    <link href="http://kaywu.github.io/2016/05/01/Maven-aar-source/"/>
    <id>http://kaywu.github.io/2016/05/01/Maven-aar-source/</id>
    <published>2016-05-01T11:43:01.000Z</published>
    <updated>2016-05-01T13:38:25.000Z</updated>
    
    <content type="html">&lt;p&gt;不知大家是否注意过，在使用 aar 时，若是本地的 aar 包，打开相关源码是反编译后的文件。而如果是引用的如 jcenter 的库，就能阅读详尽的源代码。两者的区别是什么呢？&lt;br&gt;如果大家有尝试过上传 library 到 jcenter 或 maven 就会知道，除了 aar 文件之外，还要上传相应的 sources、javadoc 以及 pom 文件，就像 &lt;a href=&quot;https://bintray.com/bintray/jcenter/com.yalantis%3Aucrop/1.5.0/view#files/com/yalantis/ucrop/1.5.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ucrop&lt;/a&gt; 所显示的那样。gradle 在下载依赖时，也会包括 sources、javadoc 等文件，而 sources 文件正是使我们能够阅读源代码的真正原因。&lt;br&gt;那么，如何为 aar 文件添加 sources 支持呢？一种方法是添加 aar 的同时手工导入相应的 sources 文件，另一种则是将 aar、sources 上传到仓库然后通过 gradle 导入。这里说明第二种方法的使用。&lt;br&gt;由于上传到 maven、jcenter 都需要额外的步骤，为方便起见，我们搭建一个本地 Maven 仓库来讲解。如何搭建仓库可以参考 &lt;a href=&quot;http://jeroenmols.com/blog/2015/08/06/artifactory/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A PRIVATE MAVEN REPOSITORY FOR ANDROID IN 30 MIN&lt;/a&gt;，有&lt;a href=&quot;http://www.devtf.cn/?p=1079&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文翻译&lt;/a&gt;。后续对 build.gradle 的说明会建立在该文章的基础上。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// build.gradle in root project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &lt;span class=&quot;string&quot;&gt;&#39;com.android.tools.build:gradle:2.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 关键&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &lt;span class=&quot;string&quot;&gt;&quot;org.jfrog.buildinfo:build-info-extractor-gradle:3.2.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// build.gradle in library project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.android.library&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.jfrog.artifactory&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;maven-publish&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 省略无关 andorid 配置代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; packageName = &lt;span class=&quot;string&quot;&gt;&#39;com.jeroenmols.awesomelibrary&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; libraryVersion = &lt;span class=&quot;string&quot;&gt;&#39;1.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;publishing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publications &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        aar(MavenPublication) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            groupId packageName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            version libraryVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifactId project.getName()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Tell maven to prepare the generated &quot;*.aar&quot; file for publishing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifact(&lt;span class=&quot;string&quot;&gt;&quot;$buildDir/outputs/aar/$&amp;#123;project.getName()&amp;#125;-release.aar&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;artifactory &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    contextUrl = &lt;span class=&quot;string&quot;&gt;&#39;http://localhost:8081/artifactory&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publish &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        repository &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// The Artifactory repository key to publish to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            repoKey = &lt;span class=&quot;string&quot;&gt;&#39;libs-release-local&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            username = &lt;span class=&quot;string&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            password = &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defaults &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Tell the Artifactory Plugin which artifacts should be published to Artifactory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            publications(&lt;span class=&quot;string&quot;&gt;&#39;aar&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            publishArtifacts = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Properties to be attached to the published artifacts.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            properties = [&lt;span class=&quot;string&quot;&gt;&#39;qa.level&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;basic&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dev.team&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;core&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Publish generated POM files to Artifactory (true by default)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            publishPom = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;生成-sources-jar-文件&quot;&gt;&lt;a href=&quot;#生成-sources-jar-文件&quot; class=&quot;headerlink&quot; title=&quot;生成 sources.jar 文件&quot;&gt;&lt;/a&gt;生成 sources.jar 文件&lt;/h2&gt;&lt;p&gt;sources 文件实质上就是对 Android 的 java 源代码进行打包而生成 jar 包。gradle （准确来说是 Android Library Plugin） 已经为我们提供了方便的打包工具，我们简单配置一下就可以了。&lt;br&gt;在 library 的 build.gradle 中添加以下代码。&lt;br&gt;下文中的 build.gradle 如无声明，则指的是 library 下的 build.gradle 文件。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task generateSourcesJar(&lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt; Jar) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    from android.sourceSets.main.java.srcDirs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classifier &lt;span class=&quot;string&quot;&gt;&#39;sources&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们新建了类型为 Jar 的 Task，from 指定的是源代码的位置，classifier 会使生成的 jar 包带上 -sources 的后缀。&lt;/p&gt;
&lt;h2 id=&quot;将-jar-包上传到-Maven-仓库&quot;&gt;&lt;a href=&quot;#将-jar-包上传到-Maven-仓库&quot; class=&quot;headerlink&quot; title=&quot;将 jar 包上传到 Maven 仓库&quot;&gt;&lt;/a&gt;将 jar 包上传到 Maven 仓库&lt;/h2&gt;&lt;p&gt;maven-publish 是 gradle 推出的用来替代 Upload Task 的 Plugin，具体用法可看 &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User Guide&lt;/a&gt;。我们使用 &lt;code&gt;arfifact&lt;/code&gt; 方法来增加上传的文件。在 publishing 中添加一行，&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;publishing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publications &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        aar(MavenPublication) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            groupId packageName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            version libraryVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifactId project.getName()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Tell maven to prepare the generated &quot;*.aar&quot; file for publishing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifact(&lt;span class=&quot;string&quot;&gt;&quot;$buildDir/outputs/aar/$&amp;#123;project.getName()&amp;#125;-release.aar&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 将生成的 sources 文件也一并上传&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifact generateSourcesJar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了方便起见，我们添加如下代码，使得执行 artifactoryPublish 之前会自动执行 assembleRelease、generateSourcesJar Task。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;artifactoryPublish.dependsOn assembleRelease, generateSourcesJar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时，我们运行 &lt;code&gt;./gradlew artifactoryPublish&lt;/code&gt;，就会把 aar 连同 sources.jar 上传到 Maven 仓库了。&lt;br&gt;上传 javadoc 的做法也是类似的，就不赘述了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2015/08/06/artifactory/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A PRIVATE MAVEN REPOSITORY FOR ANDROID IN 30 MIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2015/08/13/artifactory2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GETTING THE MOST OUT OF ARTIFACTORY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;不知大家是否注意过，在使用 aar 时，若是本地的 aar 包，打开相关源码是反编译后的文件。而如果是引用的如 jcenter 的库，就能阅读详尽的源代码。两者的区别是什么呢？&lt;br&gt;如果大家有尝试过上传 library 到 jcenter 或 maven 就会知道，除了 aar 文件之外，还要上传相应的 sources、javadoc 以及 pom 文件，就像 &lt;a href=&quot;https://bintray.com/bintray/jcenter/com.yalantis%3Aucrop/1.5.0/view#files/com/yalantis/ucrop/1.5.0&quot;&gt;ucrop&lt;/a&gt; 所显示的那样。gradle 在下载依赖时，也会包括 sources、javadoc 等文件，而 sources 文件正是使我们能够阅读源代码的真正原因。&lt;br&gt;那么，如何为 aar 文件添加 sources 支持呢？一种方法是添加 aar 的同时手工导入相应的 sources 文件，另一种则是将 aar、sources 上传到仓库然后通过 gradle 导入。这里说明第二种方法的使用。&lt;br&gt;由于上传到 maven、jcenter 都需要额外的步骤，为方便起见，我们搭建一个本地 Maven 仓库来讲解。如何搭建仓库可以参考 &lt;a href=&quot;http://jeroenmols.com/blog/2015/08/06/artifactory/&quot;&gt;A PRIVATE MAVEN REPOSITORY FOR ANDROID IN 30 MIN&lt;/a&gt;，有&lt;a href=&quot;http://www.devtf.cn/?p=1079&quot;&gt;中文翻译&lt;/a&gt;。后续对 build.gradle 的说明会建立在该文章的基础上。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>从编程的角度理解 Gradle</title>
    <link href="http://kaywu.github.io/2016/04/24/Gradle/"/>
    <id>http://kaywu.github.io/2016/04/24/Gradle/</id>
    <published>2016-04-24T06:52:03.000Z</published>
    <updated>2016-05-01T11:45:58.000Z</updated>
    
    <content type="html">&lt;p&gt;刚开始接触 Gradle 时，一头雾水。碰到不会的地方，搜索相关解决方案然后依样画葫芦。至于为什么这么做，这么做的原理是什么，完全不清楚。后来看了 &lt;a href=&quot;http://blog.csdn.net/innost/article/details/48228651&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle 详解&lt;/a&gt;，觉得作者说的十分有道理，得从编程的角度而不是脚本的角度来看 Gradle。下面小结下我在这个过程中的一些收获。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;从-apply-说起&quot;&gt;&lt;a href=&quot;#从-apply-说起&quot; class=&quot;headerlink&quot; title=&quot;从 apply 说起&quot;&gt;&lt;/a&gt;从 apply 说起&lt;/h2&gt;&lt;p&gt;&lt;code&gt;apply plugin: &amp;#39;com.android.application&amp;#39;&lt;/code&gt; 常常给我一种强烈的错觉，感觉 &lt;code&gt;apply plugin&lt;/code&gt; 是一个部分，&lt;code&gt;&amp;#39;com.android.application&amp;#39;&lt;/code&gt; 是另一个部分。&lt;br&gt;而这得归因于 Groovy 调用函数的时候是可以省略括号的。拿最简单的 &lt;code&gt;println&lt;/code&gt; 来说，你既可以写 &lt;code&gt;println(3)&lt;/code&gt;，也可以使用 &lt;code&gt;println 3&lt;/code&gt;。如果加上省略的括号，那上面就变成了 &lt;code&gt;apply(plugin: &amp;#39;com.android.application&amp;#39;)&lt;/code&gt;。虽然降低了可读性，但从编程的角度来看更清晰了。&lt;br&gt;但是问题又来了，&lt;code&gt;plugin: &amp;#39;com.android.application&amp;#39;&lt;/code&gt; 又是个什么鬼？这就得提到 Groovy 的 &lt;a href=&quot;http://www.groovy-lang.org/objectorientation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Named arguments&lt;/a&gt; 机制了。下面拿代码说明。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; foo(Map args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	println &lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;args.name&amp;#125;: $&amp;#123;args.age&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 调用函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Marie&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见 &lt;code&gt;plugin: &amp;#39;com.android.application&amp;#39;&lt;/code&gt; 实质上是一个 Map。顺带说下在 Groovy 里，Map 的 key 默认是 String 类型，所以可以不用加引号。&lt;br&gt;所以 &lt;code&gt;apply&lt;/code&gt; 实质上是以 Map 为参数的函数，可以查看&lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.api.plugins.PluginAware.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;相关文档&lt;/a&gt;加以验证。&lt;br&gt;一句简单的函数调用，就说了那么多七七八八的，都是 Groovy 的灵活性造成的。大家都知道 Gradle 使用 Groovy 来构建项目，而 Groovy 相比于 Java 来讲真是灵活太多，所以想从编程的角度来理解 Gradle，对 Groovy 的熟悉度有一定的要求。建议多读读 &lt;a href=&quot;http://www.groovy-lang.org/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy Doc&lt;/a&gt; 加深对 Groovy 的学习。&lt;/p&gt;
&lt;p&gt;接下来提高难度，如何理解下面这段代码。&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;buildscript&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// closure 开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;repositories&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.android.tools.build:gradle:2.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// closure 关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;建议大家读 &lt;a href=&quot;http://blog.csdn.net/lzyzsd/article/details/46935063&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Tips#2-语法&lt;/a&gt; 和 &lt;a href=&quot;http://www.cnblogs.com/davenkin/p/gradle-learning-3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle学习系列之三——读懂Gradle语法&lt;/a&gt;，这两篇文章讲得很清楚，这里就不重复了。关键是要认识到 &lt;code&gt;buildscript&lt;/code&gt; 是一个函数，它接收 &lt;code&gt;Closure&lt;/code&gt; 作为参数，最外层大括号之间都是 &lt;code&gt;Closure&lt;/code&gt; 的内容。还有一点就是 Closure 的 Delegate 机制。下面是来自 &lt;a href=&quot;http://mrhaki.blogspot.sg/2009/11/groovy-goodness-setting-closures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting a Closure’s Delegate&lt;/a&gt; 的一个例子。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Simple class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Post&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; info() &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;This is Groovy Goodness post #$count!&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Script variable and method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; info() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Count value is $count.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Closure to increment a count variable and invoke a info() method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; printInfo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    info()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Delegate is by default set to owner, so the script in this case.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Count value is 1.&quot;&lt;/span&gt;== printInfo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Change closure resolver so first the delegate is used.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printInfo.resolveStrategy = Closure.DELEGATE_FIRST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Set delegate to Post object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printInfo.delegate = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Post(&lt;span class=&quot;string&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;This is Groovy Goodness post #101!&quot;&lt;/span&gt; == printInfo()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当第一次调用 &lt;code&gt;printInfo&lt;/code&gt; 时，它会直接在这个 Script 中找到 count 的值和 info 方法，其 count 为 0。而为 printInfo 设置了 Delegate 并且设置了 DELEGATE_FIRST 之后，调用 &lt;code&gt;printInfo&lt;/code&gt; 时会先在 Post 里面找，而在 Post 中 count 等于 100。&lt;/p&gt;
&lt;h2 id=&quot;Task-amp-Plugin&quot;&gt;&lt;a href=&quot;#Task-amp-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Task &amp;amp; Plugin&quot;&gt;&lt;/a&gt;Task &amp;amp; Plugin&lt;/h2&gt;&lt;p&gt;在 Java 中，我们习惯于将常用的功能抽象成方法，然后在需要的时候 import 使用。&lt;br&gt;但在 Gradle 中，更标准的做法是将功能抽象成 Task 并通过 Plugin 引入。以 Android 举例，在 build.gradle 通过 &lt;code&gt;apply plugin: &amp;#39;com.android.application&amp;#39;&lt;/code&gt; 来引入 Plugin，这样就为 Project 引入了相关 Android 的 Task。如何自定义 Plugin 请参考 &lt;a href=&quot;https://docs.gradle.org/current/userguide/custom_plugins.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Custom Plugins&lt;/a&gt; 和 &lt;a href=&quot;http://www.cnblogs.com/davenkin/p/gradle-learning-10.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle学习系列之十——自定义Plugin&lt;/a&gt;。&lt;br&gt;顺便说下，自定义 Plugin 时会经常使用到下面这个方法，&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Extensions are just plain objects, there is no interface/type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyExtension&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyExtension(String foo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.foo = foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Add new extensions via the extension container&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project.extensions.create(&lt;span class=&quot;string&quot;&gt;&#39;custom&#39;&lt;/span&gt;, MyExtension, &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                       («name»,   «type»,       «constructor args», …)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时你就可以通过以下方式访问了。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// extensions appear as properties on the target object by the given name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; project.custom &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MyExtension&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; project.custom.foo == &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// also via a namespace method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; project.custom &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; foo == &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   foo = &lt;span class=&quot;string&quot;&gt;&quot;other&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; project.custom.foo == &lt;span class=&quot;string&quot;&gt;&quot;other&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;是否是有种似曾相识的感觉？大家所熟悉的 &lt;code&gt;ext&lt;/code&gt; 就是其近亲。&lt;br&gt;更多 Extension 的相关内容，请查看 &lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/ExtensionAware.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExtensionAware&lt;/a&gt;。&lt;br&gt;更多 ext 的相关内容，请查看 &lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/ExtraPropertiesExtension.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExtraPropertiesExtension&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h2&gt;&lt;p&gt;开玩笑，Gradle 还能 Debug？为什么不能。&lt;br&gt;首先在 Terminal 里输入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export GRADLE_OPTS=&amp;#34;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&amp;#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时执行 &lt;code&gt;./gradlew&lt;/code&gt; 会显示 &lt;code&gt;Listening for transport dt_socket at address: 5005&lt;/code&gt;。&lt;br&gt;打开 Android Studio，按下图设置。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/gradle_debug_0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/gradle_debug_1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/gradle_debug_2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;最后，点击 Debug 按钮就可以开始了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/innost/article/details/48228651&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle 详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.groovy-lang.org/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/lzyzsd/article/details/46935063&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Tips#2-语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/davenkin/p/gradle-learning-3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle学习系列之三——读懂Gradle语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mrhaki.blogspot.sg/2009/11/groovy-goodness-setting-closures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting a Closure’s Delegate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/custom_plugins.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Custom Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/davenkin/p/gradle-learning-10.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle学习系列之十——自定义Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/ExtensionAware.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExtensionAware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/ExtraPropertiesExtension.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExtraPropertiesExtension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://georgik.sinusgear.com/2014/06/23/how-to-debug-gradle-script/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to debug gradle script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始接触 Gradle 时，一头雾水。碰到不会的地方，搜索相关解决方案然后依样画葫芦。至于为什么这么做，这么做的原理是什么，完全不清楚。后来看了 &lt;a href=&quot;http://blog.csdn.net/innost/article/details/48228651&quot;&gt;Gradle 详解&lt;/a&gt;，觉得作者说的十分有道理，得从编程的角度而不是脚本的角度来看 Gradle。下面小结下我在这个过程中的一些收获。&lt;br&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://kaywu.github.io/categories/Gradle/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 保持屏幕常亮方法小结</title>
    <link href="http://kaywu.github.io/2016/04/17/Android-Screen-On/"/>
    <id>http://kaywu.github.io/2016/04/17/Android-Screen-On/</id>
    <published>2016-04-17T01:37:41.000Z</published>
    <updated>2016-04-17T11:50:14.000Z</updated>
    
    <content type="html">&lt;p&gt;开发视频功能时，遇到了播放一段时间后屏幕自动变暗的问题，这里总结下解决方法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;p&gt;如果使用的是 MediaPlayer 和 SurfaceView 的话，有一个现成的方法可以使用，&lt;code&gt;setScreenOnWhilePlaying(true)&lt;/code&gt;。但是项目中采用的是TextureView，不支持这种方法。具体原因看下 &lt;code&gt;setScreenOnWhilePlaying&lt;/code&gt; 的源码和 &lt;code&gt;setDisplay&lt;/code&gt;的注释就明白了。&lt;/p&gt;
&lt;h2 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h2&gt;&lt;p&gt;另一种大家比较熟悉的是使用 &lt;code&gt;WAKE_LOCK&lt;/code&gt;。&lt;br&gt;首先声明 &lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WAKE_LOCK&amp;quot; /&amp;gt;&lt;/code&gt;这个权限，并添加以下代码，&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &lt;span class=&quot;string&quot;&gt;&quot;MyWakelockTag&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wakeLock.acquire();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并注意在适当的时候调用 &lt;code&gt;wakelock.release()&lt;/code&gt;。&lt;br&gt;该方法会影响电池的使用，若不及时释放会有严重的后果。官方文档建议只在必要的时候使用且保持尽量短的时间。&lt;br&gt;相比第一种方法，有点小题大做。&lt;/p&gt;
&lt;h2 id=&quot;方法三&quot;&gt;&lt;a href=&quot;#方法三&quot; class=&quot;headerlink&quot; title=&quot;方法三&quot;&gt;&lt;/a&gt;方法三&lt;/h2&gt;&lt;p&gt;该方法不需要额外的权限，只需声明 &lt;code&gt;getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);&lt;/code&gt;，或者直接在布局中加上 &lt;code&gt;keepScreenOn=true&lt;/code&gt; 即可。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;RelativeLayout&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;android:keepScreenOn&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是，view 的 keepScreenOn 属性只有在该 View 是 Visible 状态的时候才生效。&lt;/p&gt;
&lt;p&gt;对比来看，方法三简单实用，就选它了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/intl/zh-cn/training/scheduling/wakelock.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/intl/zh-cn/training/scheduling/wakelock.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5712849/how-do-i-keep-the-screen-on-in-my-app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/5712849/how-do-i-keep-the-screen-on-in-my-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;开发视频功能时，遇到了播放一段时间后屏幕自动变暗的问题，这里总结下解决方法。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 Python 处理 Excel 文件</title>
    <link href="http://kaywu.github.io/2016/04/03/Python-OpenPyXL/"/>
    <id>http://kaywu.github.io/2016/04/03/Python-OpenPyXL/</id>
    <published>2016-04-03T10:38:09.000Z</published>
    <updated>2016-04-04T15:44:26.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在学着使用 Python 解决些重复枯燥的工作，也给自己省些时间。比如每天从网站上摘抄几个数据然后制成 Excel。偶尔倒还好，要是每天都要这样，岂不是很浪费时间？像这种重复性的操作就可以交给不辞辛劳的计算机。&lt;br&gt;解决上面的需求主要分两步，一是从网上摘抄数据，根据不同的情况，摘抄数据的手段也各异。简单的直接&lt;code&gt;curl&lt;/code&gt;一下然后正则，复杂点的可能需要抓包，或者爬虫，这里就不做展开（自己还在学……）。二是处理 Excel，今天就着重讲讲怎么处理 Excel。&lt;/p&gt;
&lt;p&gt;Python 关于 Excel 的库主要有两个：Python-Excel（xlrd, xlwt, xlutils）和 OpenPyXL。前者主要用于 xls，后者用于 xlsx。现在多数文件都是 xlsx，且后者维护得很勤快，再加上 &lt;a href=&quot;https://automatetheboringstuff.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Automate the Boring Stuff with Python&lt;/a&gt; 也是用的 OpenPyXL，就愉快地决定用它了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;OpenPyXL&quot;&gt;&lt;a href=&quot;#OpenPyXL&quot; class=&quot;headerlink&quot; title=&quot;OpenPyXL&quot;&gt;&lt;/a&gt;OpenPyXL&lt;/h2&gt;&lt;p&gt;安装一句话，&lt;code&gt;pip3 install openpyxl&lt;/code&gt;即可。&lt;/p&gt;
&lt;h3 id=&quot;读文件&quot;&gt;&lt;a href=&quot;#读文件&quot; class=&quot;headerlink&quot; title=&quot;读文件&quot;&gt;&lt;/a&gt;读文件&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; openpyxl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 读取 sample.xlsx 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wb = openpyxl.load_workbook(&lt;span class=&quot;string&quot;&gt;&#39;sample.xlsx&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 打印 该文件所含有 sheet 的 name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(wb.get_sheet_names())  &lt;span class=&quot;comment&quot;&gt;# [&#39;Sheet1&#39;, &#39;Sheet2&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取当前使用的 sheet，默认使用第一个 sheet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;active_sheet = wb.active&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 打印 A1 单元格的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(active_sheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;].value)  &lt;span class=&quot;comment&quot;&gt;# Hello, World!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;写文件&quot;&gt;&lt;a href=&quot;#写文件&quot; class=&quot;headerlink&quot; title=&quot;写文件&quot;&gt;&lt;/a&gt;写文件&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 新建 Workbook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wb = Workbook()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sheet = wb.active&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置单元格 A1 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;].value = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 保存为 sample.xlsx 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wb.save(&lt;span class=&quot;string&quot;&gt;&quot;sample.xlsx&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字体&quot;&gt;&lt;a href=&quot;#字体&quot; class=&quot;headerlink&quot; title=&quot;字体&quot;&gt;&lt;/a&gt;字体&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置字体大小为24，斜体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;].font = Font(size=&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;, italic=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;背景色&quot;&gt;&lt;a href=&quot;#背景色&quot; class=&quot;headerlink&quot; title=&quot;背景色&quot;&gt;&lt;/a&gt;背景色&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置背景色为红色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;].fill = PatternFill(start_color=colors.RED, fill_type=fills.FILL_SOLID)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;公式&quot;&gt;&lt;a href=&quot;#公式&quot; class=&quot;headerlink&quot; title=&quot;公式&quot;&gt;&lt;/a&gt;公式&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sheet[&lt;span class=&quot;string&quot;&gt;&#39;B9&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;=SUM(B1:B8)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;合并单元格&quot;&gt;&lt;a href=&quot;#合并单元格&quot; class=&quot;headerlink&quot; title=&quot;合并单元格&quot;&gt;&lt;/a&gt;合并单元格&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sheet.merge_cells(&lt;span class=&quot;string&quot;&gt;&#39;A1:D3&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，强烈推荐下 &lt;a href=&quot;https://automatetheboringstuff.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Automate the Boring Stuff with Python&lt;/a&gt; 这本书，真是形象说明了&lt;code&gt;人生苦短，我用 Python&lt;/code&gt;这句口号。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://openpyxl.readthedocs.org/en/2.3.3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenPyXL Doc&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://automatetheboringstuff.com/chapter12/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Automate the Boring Stuff with Python - Working with Excel Spreadsheets&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.python-excel.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Working with Excel Files in Python&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学着使用 Python 解决些重复枯燥的工作，也给自己省些时间。比如每天从网站上摘抄几个数据然后制成 Excel。偶尔倒还好，要是每天都要这样，岂不是很浪费时间？像这种重复性的操作就可以交给不辞辛劳的计算机。&lt;br&gt;解决上面的需求主要分两步，一是从网上摘抄数据，根据不同的情况，摘抄数据的手段也各异。简单的直接&lt;code&gt;curl&lt;/code&gt;一下然后正则，复杂点的可能需要抓包，或者爬虫，这里就不做展开（自己还在学……）。二是处理 Excel，今天就着重讲讲怎么处理 Excel。&lt;/p&gt;
&lt;p&gt;Python 关于 Excel 的库主要有两个：Python-Excel（xlrd, xlwt, xlutils）和 OpenPyXL。前者主要用于 xls，后者用于 xlsx。现在多数文件都是 xlsx，且后者维护得很勤快，再加上 &lt;a href=&quot;https://automatetheboringstuff.com/&quot;&gt;Automate the Boring Stuff with Python&lt;/a&gt; 也是用的 OpenPyXL，就愉快地决定用它了。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://kaywu.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Support Annotion 小结</title>
    <link href="http://kaywu.github.io/2016/03/27/Android-Support-Annotation/"/>
    <id>http://kaywu.github.io/2016/03/27/Android-Support-Annotation/</id>
    <published>2016-03-27T11:28:08.000Z</published>
    <updated>2016-05-01T15:12:13.000Z</updated>
    
    <content type="html">&lt;p&gt;Support Annotion 是指 Andoid Support Library 从 19.1 开始引入的注解库，通过&lt;code&gt;compile &amp;#39;com.android.support:support-annotations:22.2.0&amp;#39;&lt;/code&gt;就能引入。它可以检验代码潜在的问题并提醒你去修正它。&lt;br&gt;下面简单介绍下我常用的几个注解，更加全面的介绍可以看&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Nullable-amp-NonNull&quot;&gt;&lt;a href=&quot;#Nullable-amp-NonNull&quot; class=&quot;headerlink&quot; title=&quot;Nullable &amp;amp; NonNull&quot;&gt;&lt;/a&gt;Nullable &amp;amp; NonNull&lt;/h2&gt;&lt;p&gt;作为 Android 开发者，看到&lt;code&gt;NullPointer&lt;/code&gt;就五味杂成。当它发生时要么后悔这里咋不小心没写个判断，要么就是咒骂这里返回的值怎么可以是&lt;code&gt;Null&lt;/code&gt;。&lt;br&gt;如果你碰到这样的情况很多，那么这两个注解就是为你而服务的。&lt;br&gt;&lt;code&gt;Nullable&lt;/code&gt;表明这里的值可能会空，而&lt;code&gt;NonNull&lt;/code&gt;则表示这里的值必须不为空。两者可以使用在&lt;code&gt;Method&lt;/code&gt;、&lt;code&gt;Pamameter&lt;/code&gt;以及&lt;code&gt;Field&lt;/code&gt;上。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextView tv = (TextView) findViewById(R.id.tv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Method invocation &#39;getContent().getLength() may produce &#39;java.lang.NullPointerException&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tv.setText(&lt;span class=&quot;string&quot;&gt;&quot;The length of content is &quot;&lt;/span&gt; + getContent().length());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;举个例子，当你使用&lt;code&gt;Nullable&lt;/code&gt;标注的方法并对返回值不加判断直接使用时，IDE 就会高亮有问题的语句，如上段代码中的&lt;code&gt;getContent().length()&lt;/code&gt;，并提醒你这里可能会出现&lt;code&gt;NullPointerException&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;IntDef-amp-StringDef&quot;&gt;&lt;a href=&quot;#IntDef-amp-StringDef&quot; class=&quot;headerlink&quot; title=&quot;IntDef &amp;amp; StringDef&quot;&gt;&lt;/a&gt;IntDef &amp;amp; StringDef&lt;/h1&gt;&lt;p&gt;处于性能的考虑，在 Android 开发中我们会使用&lt;code&gt;Int&lt;/code&gt;常量来代替&lt;code&gt;Enum&lt;/code&gt;类型，而&lt;code&gt;Int&lt;/code&gt;常量缺乏像&lt;code&gt;Enum&lt;/code&gt;的类型安全性。但我们可以通过&lt;code&gt;IntDef&lt;/code&gt;来达到类似&lt;code&gt;Enum&lt;/code&gt;的效果。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.support.annotation.IntDef;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ActionBar&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@IntDef&lt;/span&gt;(&amp;#123;NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; NavigationMode &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NAVIGATION_MODE_STANDARD = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NAVIGATION_MODE_LIST = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NAVIGATION_MODE_TABS = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@NavigationMode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getNavigationMode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setNavigationMode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NavigationMode &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若我们在&lt;code&gt;setNavigationMode&lt;/code&gt;中传入错误的参数，如&lt;code&gt;3&lt;/code&gt;，则 IDE 就会报错，并提示可以使用的值。&lt;br&gt;&lt;code&gt;IntDef&lt;/code&gt;还有个高级属性&lt;code&gt;flag&lt;/code&gt;，当设置为&lt;code&gt;true&lt;/code&gt;时就可以通过 &amp;amp; 或 | 进行位操作，类似于&lt;code&gt;EnumSet&lt;/code&gt;的相关操作。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.support.annotation.IntDef;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@IntDef&lt;/span&gt;(flag=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, value=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_USE_LOGO,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_SHOW_HOME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_HOME_AS_UP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_SHOW_TITLE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_SHOW_CUSTOM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; DisplayOptions &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_USE_LOGO = &lt;span class=&quot;number&quot;&gt;0x1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_SHOW_HOME = &lt;span class=&quot;number&quot;&gt;0x2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_HOME_AS_UP = &lt;span class=&quot;number&quot;&gt;0x4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_SHOW_TITLE = &lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_SHOW_CUSTOM = &lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setDisplayOptions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@DisplayOptions &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; options)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_HOME | ActionBar.DISPLAY_SHOW_TITLE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Thread-Annotations&quot;&gt;&lt;a href=&quot;#Thread-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Thread Annotations&quot;&gt;&lt;/a&gt;Thread Annotations&lt;/h2&gt;&lt;p&gt;Support Library 在 22.2 之后又引入了 Thread Annotations，用来标注方法所需要的线程环境。如果一个类中的所有方法对线程环境的要求都相同，则可以来标注整个类。&lt;br&gt;Thread Annotations 有以下4种，其中 UiThread 和 MainThread 没有本质区别，可以互换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@UiThread&lt;/li&gt;
&lt;li&gt;@MainThread&lt;/li&gt;
&lt;li&gt;@WorkerThread&lt;/li&gt;
&lt;li&gt;@BinderThread&lt;br&gt;使用效果如下图所示。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/support_annotation_img_00.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Resource-Type-Annotations&quot;&gt;&lt;a href=&quot;#Resource-Type-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Resource Type Annotations&quot;&gt;&lt;/a&gt;Resource Type Annotations&lt;/h2&gt;&lt;p&gt;Android 中通过 id 来获取相应的资源文件，但由于 id 都是 int 型，不同类型的资源文件无法区别，在使用中可能会传入错误类型的 id。而通过 Resource Type Annotations 就可以避免这种错误。&lt;br&gt;如 ActionBar 中 setTitle 方法，若传入 &lt;code&gt;setTitle(R.drawable.title)&lt;/code&gt; 就会报错。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@StringRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resId)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Resource Type Annotations 主要有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@StringRes&lt;/li&gt;
&lt;li&gt;@DrawableRes&lt;/li&gt;
&lt;li&gt;@ColorRes&lt;/li&gt;
&lt;li&gt;@InterpolatorRes&lt;br&gt;除了特定类型的 Annotation，还有一种不指定资源类型的注解 @AnyRes。在不确定是哪种类型资源的情况下使用，如 &lt;code&gt;Resources#getResourceName(@AnyRes int resId)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面介绍的，还有 RGB Color Integers、Permission、Value Constraints 等相关的 Annotations，可参考&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;进行学习。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tools.android.com/tech-docs/support-annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/intl/zh-cn/tools/debugging/annotations.html#enum-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/intl/zh-cn/tools/debugging/annotations.html#enum-annotations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Support Annotion 是指 Andoid Support Library 从 19.1 开始引入的注解库，通过&lt;code&gt;compile &amp;#39;com.android.support:support-annotations:22.2.0&amp;#39;&lt;/code&gt;就能引入。它可以检验代码潜在的问题并提醒你去修正它。&lt;br&gt;下面简单介绍下我常用的几个注解，更加全面的介绍可以看&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot;&gt;官方文档&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>初识 LiveReload</title>
    <link href="http://kaywu.github.io/2016/03/20/Python-LiveReload/"/>
    <id>http://kaywu.github.io/2016/03/20/Python-LiveReload/</id>
    <published>2016-03-20T05:29:15.000Z</published>
    <updated>2016-04-03T10:41:30.000Z</updated>
    
    <content type="html">&lt;p&gt;LiveReload 是前端自动化的工具之一。在前端开发中，经常需要实时地看到页面编辑的效果。但每次都要从编辑器切换到浏览器，再刷新浏览器才能看到页面变化，这种频繁的操作严重影响了开发效率。LiveReload 就是用来解决这个问题的。&lt;br&gt;LiveReload 通过实时检测文件的变化，当文件变化时触发相关任务，并通知浏览器刷新页面。实现 LiveReload 有多种方式，如 Node.js 的 gulp、grunt，Ruby 的 Guard等。本文通过 python 的 &lt;a href=&quot;http://livereload.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LiveReload&lt;/a&gt; 介绍其使用。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;首先为浏览器安装 &lt;a href=&quot;https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LiveReload 插件&lt;/a&gt;。该插件可以和后台的相关服务器通信，当服务器通知该插件后，该插件会自动刷新页面。&lt;br&gt;接着通过&lt;code&gt;pip3 install livereload&lt;/code&gt;安装相关 python 包。That’s all~&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;在 html 所在的文件夹，使用&lt;code&gt;livereload&lt;/code&gt;命令即可。这时打开浏览器&lt;code&gt;http://127.0.0.1:35729&lt;/code&gt;，就会发现网页会实时刷新了。&lt;br&gt;但是，有时候你可能需要在刷新之前做一些操作。如使用 Hexo 写文章时，保存文章后你希望能自动地执行&lt;code&gt;hexo g&lt;/code&gt;的命令，然后刷新页面。那 LiveReload 能做到吗？当然可以，只需要一段简短的程序即可。&lt;br&gt;下面是我写的关于上面小需求的代码。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; livereload &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Server, shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server = Server()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.watch(&lt;span class=&quot;string&quot;&gt;&#39;source/_posts/*&#39;&lt;/span&gt;, shell(&lt;span class=&quot;string&quot;&gt;&#39;hexo g&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.serve(root=&lt;span class=&quot;string&quot;&gt;&#39;public&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用 LiveReload 之后，感觉写文章都轻松了很多。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;LiveReload 是前端自动化的工具之一。在前端开发中，经常需要实时地看到页面编辑的效果。但每次都要从编辑器切换到浏览器，再刷新浏览器才能看到页面变化，这种频繁的操作严重影响了开发效率。LiveReload 就是用来解决这个问题的。&lt;br&gt;LiveReload 通过实时检测文件的变化，当文件变化时触发相关任务，并通知浏览器刷新页面。实现 LiveReload 有多种方式，如 Node.js 的 gulp、grunt，Ruby 的 Guard等。本文通过 python 的 &lt;a href=&quot;http://livereload.readthedocs.org/en/latest/&quot;&gt;LiveReload&lt;/a&gt; 介绍其使用。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://kaywu.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>聊聊 Java Exception 机制</title>
    <link href="http://kaywu.github.io/2016/03/13/Java-Exception/"/>
    <id>http://kaywu.github.io/2016/03/13/Java-Exception/</id>
    <published>2016-03-13T06:25:14.000Z</published>
    <updated>2016-03-13T13:04:20.000Z</updated>
    
    <content type="html">&lt;p&gt;调用 Retrofit 同步方法常会写成以下代码的形式，catch 语句容易漏掉，而编译器也不提醒你。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mRestAdapter.create(Api.class).sendRequst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// handle Exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但当你使用 BufferedReader 时，编译器死命地提醒你，这有一个 IOException，非让你处理了才行。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BufferedReader reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileReader(Path));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String firstLine = reader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么问题来了，这两种 Exception 有什么区别使得编译器区别对待呢？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Exception-机制&quot;&gt;&lt;a href=&quot;#Exception-机制&quot; class=&quot;headerlink&quot; title=&quot;Exception 机制&quot;&gt;&lt;/a&gt;Exception 机制&lt;/h2&gt;&lt;p&gt;这就得从 Java 的 Exception 机制开始说起了。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/java_throwable.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;Throwable 表示任何可以作为异常被抛出的类。Throwable 对象分为两种类型，Error 表示系统级错误，如资源不足、约束失败，或者其他使程序无法继续执行的条件，一般无需我们关心。而 Exception 是所有异常的父类，可分为两大类型。一种是 RuntimeException 及其子类，表示运行时异常。另一种是除了 RuntimeException 及其子类之外的 Exception，称为受检异常。&lt;br&gt;那运行时异常和受检异常有什么区别呢？在使用上最大的区别就是，受检异常强迫调用者使用显式的 catch 语句处理或者将它传播出去。写代码时如果 IDE 提示你使用 catch 语句或者在方法中添加 throws 声明，这种异常都是受检异常，要扼杀在摇篮里，否则编译都无法通过。而运行时异常则不需要这样做。&lt;br&gt;除了使用上的差异，两者的使用场景也有区别。《Effective Java》是这样建议的：如果可恢复的情况使用受检异常，对编程错误使用运行时异常。&lt;/p&gt;
&lt;p&gt;让我们回到问题，现在答案已经很明显了。Retrofit 抛出的是运行时异常，而 BufferedReader 抛出的是受检异常。&lt;/p&gt;
&lt;p&gt;那 Retrofit 为什么不抛出受检异常呢？这种情况应该属于可恢复的，并且受检异常能提醒开发者进行处理。&lt;br&gt;不是不想，实是不能啊。Retrofit 是通过动态代理来实现声明的接口的功能。而由于父类方法没有抛出异常,子类方法也不能显式地抛出异常。所以 Retrofit 不能抛出各种异常（如 IO 异常），只能通过捕获异常并转换为 RuntimeException 再抛出。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Effective Java 第9章 异常&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;调用 Retrofit 同步方法常会写成以下代码的形式，catch 语句容易漏掉，而编译器也不提醒你。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mRestAdapter.create(Api.class).sendRequst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// handle Exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但当你使用 BufferedReader 时，编译器死命地提醒你，这有一个 IOException，非让你处理了才行。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BufferedReader reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileReader(Path));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String firstLine = reader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么问题来了，这两种 Exception 有什么区别使得编译器区别对待呢？&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kaywu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>对Java泛型的理解</title>
    <link href="http://kaywu.github.io/2016/03/06/Java-Generic/"/>
    <id>http://kaywu.github.io/2016/03/06/Java-Generic/</id>
    <published>2016-03-06T04:53:55.000Z</published>
    <updated>2016-03-06T10:30:22.000Z</updated>
    
    <content type="html">&lt;p&gt;泛型是JDK 5中引入的一个新特性，允许在定义类和接口的时候使用类型参数，声明的类型参数在使用时用具体的类型来替换。在没有泛型之前，从集合中读取到的每一个对象都必须进行转化。如果不小心插入了类型错误的对象，则运行时的转换就会出错。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ArrayList apples = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        apples.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Apple());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apples.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Orange());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; apples.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// java.lang.ClassCastException: Orange cannot be cast to Apple&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ((Apple)apples.get(i)).id();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而使用了泛型之后，就可以在编译期防止将错误类型的对象放置到容器中。而且从List中取出时，也无需做强制的类型转换了。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ArrayList&amp;lt;Apple&amp;gt; apples = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        apples.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Apple());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Compile-time error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// apples.add(new Orange());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; apples.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        apples.get(i).id();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;虽然泛型有着种种的好处，但使用泛型常常会碰到一些反直觉的地方。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;类型参数是不可变的&quot;&gt;&lt;a href=&quot;#类型参数是不可变的&quot; class=&quot;headerlink&quot; title=&quot;类型参数是不可变的&quot;&gt;&lt;/a&gt;类型参数是不可变的&lt;/h2&gt;&lt;p&gt;对于任何两个不同的类型Type1和Type2而言，&lt;code&gt;List&amp;lt;Type1&amp;gt;&lt;/code&gt;既不是&lt;code&gt;List&amp;lt;Type2&amp;gt;&lt;/code&gt;的子类型，也不是它的超类型。即使Type1和Type2存在着一定的继承关系，如&lt;code&gt;List&amp;lt;Apple&amp;gt;&lt;/code&gt;和&lt;code&gt;List&amp;lt;Fruit&amp;gt;&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Apple&amp;gt; apples = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Apple&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Compile-time error: Incompatible types&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// List&amp;lt;Fruit&amp;gt; fruits = apples;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以试想一下，如果&lt;code&gt;List&amp;lt;Fruit&amp;gt;&lt;/code&gt;是&lt;code&gt;List&amp;lt;Apple&amp;gt;&lt;/code&gt;的超类，会发生什么？那么fruits可以添加Orange，Banana之类的水果，而它所指向的List却是只能含有Apple。&lt;/p&gt;
&lt;h2 id=&quot;通配符&quot;&gt;&lt;a href=&quot;#通配符&quot; class=&quot;headerlink&quot; title=&quot;通配符&quot;&gt;&lt;/a&gt;通配符&lt;/h2&gt;&lt;p&gt;在使用泛型类时，既可以指定一个具体的类型，如&lt;code&gt;List&amp;lt;Apple&amp;gt;&lt;/code&gt;，也可以使用&lt;code&gt;?&lt;/code&gt;来表示未知类型。&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;中的元素只能用Object来引用，在有些情况下不是很方便，可以使用有限制的通配符来提升API的灵活性。&lt;/p&gt;
&lt;h3 id=&quot;有限制的通配符&quot;&gt;&lt;a href=&quot;#有限制的通配符&quot; class=&quot;headerlink&quot; title=&quot;有限制的通配符&quot;&gt;&lt;/a&gt;有限制的通配符&lt;/h3&gt;&lt;h4 id=&quot;extends&quot;&gt;&lt;a href=&quot;#extends&quot; class=&quot;headerlink&quot; title=&quot;extends&quot;&gt;&lt;/a&gt;extends&lt;/h4&gt;&lt;p&gt;&lt;code&gt;&amp;lt;? extends T&amp;gt;&lt;/code&gt; 表示类型上界，表示参数化类型的可能是T或是T的子类&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;? extends Fruit&amp;gt; fruits = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Apple&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Compile-time error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// fruits.add(new Apple());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// fruits.add(new Fruit());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// fruits.add(new Object());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fruits.add(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;? extends Fruit&amp;gt;&lt;/code&gt;表示具有任何从Fruit继承的类型的列表，但是并不意味着这个List将持有任何类型的Fruit。&lt;br&gt;因为编译器不知道List持有具体什么类型，可能是&lt;code&gt;List&amp;lt;Apple&amp;gt;&lt;/code&gt;，或是&lt;code&gt;List&amp;lt;Orange&amp;gt;&lt;/code&gt;，因此除了null之外，fruits不被允许添加其他元素。&lt;br&gt;但是编译器知道List中含有的是Fruit或其子类，所以调用一个返回Fruit的方法则是OK的。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Fruit fruit = fruits.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;super&quot;&gt;&lt;a href=&quot;#super&quot; class=&quot;headerlink&quot; title=&quot;super&quot;&gt;&lt;/a&gt;super&lt;/h4&gt;&lt;p&gt;&amp;lt;? super T&amp;gt;表示类型下界，表示参数化类型是此类型的超类型，直至Object&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; Fruit&amp;gt; fruits = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fruits.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Apple());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fruits.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fruit());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Compile-time error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fruit fruit = fruits.get(0);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;? super T&amp;gt;&lt;/code&gt;表示列表的类型至少是一个Fruit类型，因此可以安全地添加Fruit或其子类。&lt;br&gt;同时也由于&lt;code&gt;List&amp;lt;? super Fruit&amp;gt;&lt;/code&gt;中的类型可能是&lt;code&gt;List&amp;lt;Fruit&amp;gt;&lt;/code&gt;或&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;，编译器无法确定get返回的对象类型是Fruit还是Object。&lt;/p&gt;
&lt;h4 id=&quot;PECS原则&quot;&gt;&lt;a href=&quot;#PECS原则&quot; class=&quot;headerlink&quot; title=&quot;PECS原则&quot;&gt;&lt;/a&gt;PECS原则&lt;/h4&gt;&lt;p&gt;PECS表示producer-extends，consumer-super。&lt;br&gt;如果从集合中读取类型T的数据，不需要写入，使用extends。&lt;br&gt;如果要从集合中写入类型T的数据，不需要读取，使用super。&lt;/p&gt;
&lt;h3 id=&quot;List，List-lt-Object-gt-的区别&quot;&gt;&lt;a href=&quot;#List，List-lt-Object-gt-的区别&quot; class=&quot;headerlink&quot; title=&quot;List，List&amp;lt;Object&amp;gt;的区别&quot;&gt;&lt;/a&gt;&lt;code&gt;List&lt;/code&gt;，&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;的区别&lt;/h3&gt;&lt;p&gt;简单的说，原生态类型List逃避了泛型检查，后者则明确告知编译器，它能够持有任意类型的对象。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用List&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;String&amp;gt; strings = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsafeAdd(strings, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ClassCastException: java.lang.Integer cannot be cast to java.lang.String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// String s = strings.get(0);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsafeAdd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List list, Object o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.add(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果改成&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;，则在编译时就能发现Wrong argument type。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsafeAdd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Object&amp;gt; list, Object o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.add(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;List-lt-Object-gt-，List-lt-gt-的区别&quot;&gt;&lt;a href=&quot;#List-lt-Object-gt-，List-lt-gt-的区别&quot; class=&quot;headerlink&quot; title=&quot;List&amp;lt;Object&amp;gt;，List&amp;lt;?&amp;gt;的区别&quot;&gt;&lt;/a&gt;&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;，&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;的区别&lt;/h3&gt;&lt;p&gt;&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;实际上确定了List中包含的是Object及其子类，在使用的时候都可以通过Object来进行引用。而&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;则其中所包含的元素类型是不确定。其中可能包含的是String，也可能是Integer，因此除了null之外无法向其添加其他元素。&lt;br&gt;&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;是所有泛型List，如&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;的超类，而&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;与&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;则无这种关系。&lt;/p&gt;
&lt;h2 id=&quot;擦除机制&quot;&gt;&lt;a href=&quot;#擦除机制&quot; class=&quot;headerlink&quot; title=&quot;擦除机制&quot;&gt;&lt;/a&gt;擦除机制&lt;/h2&gt;&lt;p&gt;Java的泛型实现是通过擦除来实现的，这意味着在使用泛型时，任何具体的类型信息都被擦除了，你唯一知道的就是你在使用一个对象。因此&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;和&lt;code&gt;List&amp;lt;Integer&amp;gt;&lt;/code&gt;在运行时事实上是相同的类型。这两种形式都被擦除成它们的原生类型，即&lt;code&gt;List&lt;/code&gt;。&lt;br&gt;因此，类型参数并不能用来创建对象或者作为静态变量的类型。&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Effective Java 第5章 泛型&lt;/li&gt;
&lt;li&gt;Java编程思想 第15章 泛型&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/cf-java-generics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java深度历险（五）——Java泛型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;diffrence between super t and extends t&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;泛型是JDK 5中引入的一个新特性，允许在定义类和接口的时候使用类型参数，声明的类型参数在使用时用具体的类型来替换。在没有泛型之前，从集合中读取到的每一个对象都必须进行转化。如果不小心插入了类型错误的对象，则运行时的转换就会出错。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ArrayList apples = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        apples.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Apple());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apples.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Orange());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; apples.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// java.lang.ClassCastException: Orange cannot be cast to Apple&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ((Apple)apples.get(i)).id();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而使用了泛型之后，就可以在编译期防止将错误类型的对象放置到容器中。而且从List中取出时，也无需做强制的类型转换了。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ArrayList&amp;lt;Apple&amp;gt; apples = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        apples.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Apple());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Compile-time error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// apples.add(new Orange());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; apples.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        apples.get(i).id();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;虽然泛型有着种种的好处，但使用泛型常常会碰到一些反直觉的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kaywu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Android最简单的抓包工具Packet Capture</title>
    <link href="http://kaywu.github.io/2016/02/28/PacketCapture/"/>
    <id>http://kaywu.github.io/2016/02/28/PacketCapture/</id>
    <published>2016-02-28T01:58:31.000Z</published>
    <updated>2016-02-28T05:10:08.000Z</updated>
    
    <content type="html">&lt;p&gt;抓包是每个App开发人员都必备的技能之一。常见的可使用WireShark，Fiddler(Windows)，Charles(Mac)等软件。这些工具都很强大，可以满足复杂的需求。但是有时候你可能仅仅想查看一两个请求，这时候开机-查看IP-设置代理这些步骤就略显繁琐。这时候你最需要的就是那种一键抓包的工具，而Packet Capture正好能满足需求。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Packet-Capture&quot;&gt;&lt;a href=&quot;#Packet-Capture&quot; class=&quot;headerlink&quot; title=&quot;Packet Capture&quot;&gt;&lt;/a&gt;Packet Capture&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;br&gt;它有以下几个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅仅需要一部手机，不需要Root&lt;/li&gt;
&lt;li&gt;操作简便&lt;/li&gt;
&lt;li&gt;可以查看Https流量&lt;/li&gt;
&lt;li&gt;Json格式化预览&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;操作&quot;&gt;&lt;a href=&quot;#操作&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h3&gt;&lt;p&gt;简单来讲就是傻瓜式操作。打开App，点击头部绿色按钮开始抓包，点击红色按钮停止抓包。&lt;br&gt;之后就可以点击下方列表来查看所抓的包了。&lt;/p&gt;
&lt;h3 id=&quot;预览图&quot;&gt;&lt;a href=&quot;#预览图&quot; class=&quot;headerlink&quot; title=&quot;预览图&quot;&gt;&lt;/a&gt;预览图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/packet_capture_img_01.webp&quot; alt=&quot;抓包显示相关应用&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/packet_capture_img_02.webp&quot; alt=&quot;Packet预览&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/packet_capture_img_00.png&quot; alt=&quot;Json格式化预览&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;补充&quot;&gt;&lt;a href=&quot;#补充&quot; class=&quot;headerlink&quot; title=&quot;补充&quot;&gt;&lt;/a&gt;补充&lt;/h2&gt;&lt;p&gt;类似实现手机上直接抓包的应用还有&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.evozi.injector&amp;amp;hl=zh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Http Injector&lt;/a&gt;，它除了可以抓包之外还可以修改请求，但操作起来没有Packet Capture简单。&lt;br&gt;关于更多Android手机上抓包的方法可以见&lt;a href=&quot;#参考&quot;&gt;参考&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/20467503&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何在Android手机上实现抓包&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;抓包是每个App开发人员都必备的技能之一。常见的可使用WireShark，Fiddler(Windows)，Charles(Mac)等软件。这些工具都很强大，可以满足复杂的需求。但是有时候你可能仅仅想查看一两个请求，这时候开机-查看IP-设置代理这些步骤就略显繁琐。这时候你最需要的就是那种一键抓包的工具，而Packet Capture正好能满足需求。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>代码之髓笔记</title>
    <link href="http://kaywu.github.io/2015/12/12/Programmming-Language-Concepts/"/>
    <id>http://kaywu.github.io/2015/12/12/Programmming-Language-Concepts/</id>
    <published>2015-12-12T02:00:41.000Z</published>
    <updated>2015-12-19T05:31:16.000Z</updated>
    
    <content type="html">&lt;p&gt;不同的编程语言之间相差很大，在熟悉了一门之后再去学另一门时总会感到别扭、生涩。C里面的指针，在Java里面就被隐藏了起来。在C、Java中必须显式声明类型的变量，在Python中却能进行动态地变化，更不要说Python中map等的函数，直接打开了函数式编程的大门。但不同的语言之间，都有类似的部分，如变量、函数的声明，if、for、while语句等等。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么不局限在一门具体的语言，站在一定的高度看其间的异同和发展，就是&lt;code&gt;《代码之髓：编程语言核心概念》&lt;/code&gt;要做的事。作者在前言中就指出，在学习中需要做到以下三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在比较中学习&lt;/li&gt;
&lt;li&gt;在历史中学习&lt;/li&gt;
&lt;li&gt;在实践中学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体到编程语言，第一条指通过比较多种语言，总结出某种语言的独有特点，以及多种语言的共有特点。&lt;br&gt;第二条是指通过追溯语言的发展历史，了解语言是如何产生、变化和消失的，探寻语言发展演变的轨迹。&lt;br&gt;第三条是亲自进行程序设计。边实践边思考如何编程，才能深入理解语言设计者的意图，同时也能发现自己原先理解不到位之处。&lt;/p&gt;
&lt;p&gt;书第1、2章分别讲学习方法和语言的诞生历史，从第3章开始介绍编程语言的相关概念。下面摘录自己认为重要的内容以及相关笔记。&lt;/p&gt;
&lt;h2 id=&quot;书摘&quot;&gt;&lt;a href=&quot;#书摘&quot; class=&quot;headerlink&quot; title=&quot;书摘&quot;&gt;&lt;/a&gt;书摘&lt;/h2&gt;&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;语法就是程序设计者规定的解释程序编写方式的一系列规则。&lt;br&gt;编程语言的描述一般可以分为语法及语义。语法是说明编程语言中，哪些符号或文字的组合方式是正确的，语义则是对于编程的解释。（来源：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;补充：&lt;a href=&quot;https://www.zhihu.com/question/19942085&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何自己创建一种编程语言&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;函数的调用是以栈的形式来实现的，具体的实现可见&lt;a href=&quot;http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Mips/stack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UnderStanding the Stack&lt;/a&gt;和CSAPP的相关章节。&lt;/p&gt;
&lt;h3 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h3&gt;&lt;p&gt;错误处理的方法大体可分为两种，使用返回值和异常处理。前者以C语言为代表，如今的大多数语言都支持后者。异常的传递使得其追踪变得困难，Java使用了检查型异常来避免漏查抛出异常的可能，但这种机制并没有得到普及。&lt;/p&gt;
&lt;h3 id=&quot;名字和作用域&quot;&gt;&lt;a href=&quot;#名字和作用域&quot; class=&quot;headerlink&quot; title=&quot;名字和作用域&quot;&gt;&lt;/a&gt;名字和作用域&lt;/h3&gt;&lt;p&gt;早期的语言中，整个程序共用一个对照表，即变量名字的有效范围是整个程序。由于全局变量每次被改写都会波及整个程序，我们就得小心翼翼地避免变量名不小心被重复使用。但随着程序规模的扩大，防止名字冲突变得苦难，于是产生了使用作用域的概念。作用域又分动态作用域和静态作用域。动态作用域即把变量原来的值事先保存在函数入口处，在出口处写回变量中。但多个函数仍一张对照表。而静态作用域按函数区分对照表。&lt;/p&gt;
&lt;h3 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h3&gt;&lt;p&gt;对于计算机来说，如果仅仅给定一串比特列，它是不知道这应该解释为整数还是浮点数。因此，需要有表示这个值为何种类型的额外的信息，这就是类型。&lt;/p&gt;
&lt;p&gt;通过将不同类型进行组合得到复杂的类型后，使用中会出现想更改其中一部分却又不想全部重新定义的再利用需求。因此出现了构成要素部分可变的类型，即总称型。想要表现不同的情况时，出现了以类型为参数创建类型的函数。C++语言中的模板、Java语言中的泛型以及Haskell语言中的类型构造器可以说就是这种创建类型的机制。&lt;/p&gt;
&lt;p&gt;把类型的信息和数值看做整体的方式叫动态类型，反之则为静态类型。&lt;/p&gt;
&lt;p&gt;静态类型语言在编译时确定类型，同时编译时也检查了类型的一致性。这一点动态类型语言是无法做到的。&lt;br&gt;既不放弃编译时的类型检查，也想尽量减少麻烦的类型声明，要实现这一要求就要用到计算机自动推论确定类型的方法。&lt;/p&gt;
&lt;h3 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;headerlink&quot; title=&quot;容器&quot;&gt;&lt;/a&gt;容器&lt;/h3&gt;&lt;p&gt;万能的容器是不存在的。根据容器的使用目的、使用方式和操作类型的不同，最适宜的容器类型也会相应地变化。&lt;/p&gt;
&lt;p&gt;补充：&lt;a href=&quot;http://sharecore.net/2014/08/10/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%B8%B8%E8%AF%86%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字符编码常识及问题解析&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;并发&quot;&gt;&lt;a href=&quot;#并发&quot; class=&quot;headerlink&quot; title=&quot;并发&quot;&gt;&lt;/a&gt;并发&lt;/h3&gt;&lt;p&gt;交替的两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协作式多任务模式——在合适的节点自发进行交替&lt;/li&gt;
&lt;li&gt;抢占式多任务模式——一定时间后进行交替&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并行执行的两个处理之间出现竞态条件必须同时满足以下三个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个处理共享变量&lt;/li&gt;
&lt;li&gt;至少一个处理会对变量进行修改&lt;/li&gt;
&lt;li&gt;一个处理未完成之前另一个处理有可能介入进来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反之，只要三个条件中有一个不具备，就可以编写适合于并行处理的安全的程序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有共享：进程和actor模型（通过不共享内存而是传递消息的方式来在并行处理时进行信息交互）&lt;/li&gt;
&lt;li&gt;不修改：const、val、Immutable&lt;/li&gt;
&lt;li&gt;不介入：&lt;ul&gt;
&lt;li&gt;线程的协调——fibre、coroutine、green thread&lt;br&gt;处理介入的原因是抢占式线程，那么使用协调模式的线程就可以解决了。&lt;/li&gt;
&lt;li&gt;表示不便介入的标志——锁、mutex、semaphore&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;锁的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死锁——上锁的顺序&lt;/li&gt;
&lt;li&gt;无法组合——借用事务内存来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;对象和类&quot;&gt;&lt;a href=&quot;#对象和类&quot; class=&quot;headerlink&quot; title=&quot;对象和类&quot;&gt;&lt;/a&gt;对象和类&lt;/h3&gt;&lt;p&gt;归集变量与函数建立模型的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块&lt;/li&gt;
&lt;li&gt;函数和变量放在&lt;/li&gt;
&lt;li&gt;闭包&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像这种不受限制，可以赋值给变量，也可以作为函数的参数传递，又可以作为函数的返回值返回的值被称为first class的值。&lt;/p&gt;
&lt;p&gt;闭包：一个包含了自由变量的开放表达式，它和该自由变量的约束环境组合在一起后，实现了一种封闭的状态。&lt;/p&gt;
&lt;p&gt;类的三大作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例生成器&lt;/li&gt;
&lt;li&gt;可行操作的功能说明&lt;/li&gt;
&lt;li&gt;代码再利用的单元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;继承与代码再利用&quot;&gt;&lt;a href=&quot;#继承与代码再利用&quot; class=&quot;headerlink&quot; title=&quot;继承与代码再利用&quot;&gt;&lt;/a&gt;继承与代码再利用&lt;/h3&gt;&lt;p&gt;继承的实现策略大体可以分为三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般化和专门化&lt;/li&gt;
&lt;li&gt;共享部分的提取&lt;/li&gt;
&lt;li&gt;差异实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用多重继承时该如何解决名字解释的问题？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;禁止多重继承 使用委托 接口&lt;/li&gt;
&lt;li&gt;按顺序进行搜索 深度搜索-&amp;gt;c3线性化确定顺序 （父类不必子类先被检查 如果是从多个类中继承下来则优先检查先书写的类）&lt;/li&gt;
&lt;li&gt;混入式处理 定义仅包含所需功能的类并把它与需要添加这些功能的更大的类糅合在一起&lt;/li&gt;
&lt;li&gt;Trait 当类用于创建实例时，作为再利用单元来说就显得太大了。Trait即是把再利用单元的作用特别化，设定一些更小的结构（特性=方法的组合）。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;不同的编程语言之间相差很大，在熟悉了一门之后再去学另一门时总会感到别扭、生涩。C里面的指针，在Java里面就被隐藏了起来。在C、Java中必须显式声明类型的变量，在Python中却能进行动态地变化，更不要说Python中map等的函数，直接打开了函数式编程的大门。但不同的语言之间，都有类似的部分，如变量、函数的声明，if、for、while语句等等。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://kaywu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>编程之路</title>
    <link href="http://kaywu.github.io/2015/11/30/The-Way-To-Program/"/>
    <id>http://kaywu.github.io/2015/11/30/The-Way-To-Program/</id>
    <published>2015-11-30T12:54:10.000Z</published>
    <updated>2015-12-19T05:40:18.000Z</updated>
    
    <content type="html">&lt;p&gt;转行当程序员也快一年了，这篇给自己的交代硬生生拖了半年，趁着没忘，赶紧写写。&lt;/p&gt;
&lt;p&gt;大三前对编程的印象停留在初中用VB编猜数字游戏，但一直对编程抱有一定的好奇。&lt;br&gt;有数学和逻辑的魅力，又不会过于抽象，可以充分验证自己的想法，所需却不多，仅仅是一台电脑。&lt;br&gt;好奇心加上时间，我开始去学习编程相关的知识。&lt;/p&gt;
&lt;p&gt;那，如何去学呢？可能是因为一直都是按部就班地学习，对基础这块就特别重视，&lt;br&gt;再加上搜索如何学习编程时，经常看到“程序=算法+数据结构”这话，就决定先从算法开始。想来真是初生牛犊不怕虎。&lt;br&gt;幸运的是，那段时间MOOC正好兴起，尤其以计算机相关的课程最多。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Algorithms-Part-I&quot;&gt;&lt;a href=&quot;#Algorithms-Part-I&quot; class=&quot;headerlink&quot; title=&quot;Algorithms, Part I&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mooc.guokr.com/course/404/Algorithms--Part-I/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Algorithms, Part I&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我第一门公开课是&lt;code&gt;Algorithms, Part I&lt;/code&gt;，是用Java教学的。当时刚看完&lt;code&gt;Head First Java&lt;/code&gt;，敲过书上的例子，就硬着头皮去学了。难度真心比较大，每周都会有Programming Assignment要完成并且评分。由于自己编程的经验比较少且是第一次上公开课，在开发环境的构建上就费了很大的功夫。多亏了课程资料及论坛上的帮助，一步步地啃了下来。Assignment经常看的一头雾水，就去研究说明里的提示和论坛上的CheckList，实在不会还去网上搜答案，看懂了自己再写一遍。这门课由于老师的PPT和附带的代码都非常非常精致（对，可以用精致来形容），每个Assignment都会合理地拆分成几个函数，再加上评分系统对代码的时间复杂度和空间复杂度有一定的要求，对我自身的代码习惯产生了很大的影响。我这样一个自学的人，代码习惯没有很差的话，我想都是这门课锻炼出来的。&lt;/p&gt;
&lt;h3 id=&quot;Algorithms-Part-II&quot;&gt;&lt;a href=&quot;#Algorithms-Part-II&quot; class=&quot;headerlink&quot; title=&quot;Algorithms, Part II&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mooc.guokr.com/course/403/Algorithms--Part-II/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Algorithms, Part II&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I上完后就趁热打铁，上了&lt;code&gt;Algorithms, Part II&lt;/code&gt;。II的难度果然上了一个层次，算法的原理也不那么容易理解了。其中好几个算法的推导部分都是囫囵吞枣，没有做到细致的理解。Assignment的难度也上升了，但是做起来反而轻松了些。大概是习惯了将大问题拆解成小问题的思考方式。独立完成了几个Assignment这点让我觉得有了进步。&lt;/p&gt;
&lt;h3 id=&quot;The-Hardware-Sofeware-Interface&quot;&gt;&lt;a href=&quot;#The-Hardware-Sofeware-Interface&quot; class=&quot;headerlink&quot; title=&quot;The Hardware/Sofeware Interface&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mooc.guokr.com/course/67/The-Hardware-Software-Interface/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Hardware/Sofeware Interface&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;上这门课的主要原因其实是因为这门课太有名、太难了，经常看见各种评论对其的赞赏。&lt;br&gt;它的难度可以从选择的教材中看出——&lt;code&gt;CSAPP&lt;/code&gt;。&lt;br&gt;如果说Algorithms是啃下来的，那么这门课就是硬啃下来的。&lt;br&gt;其中印象最深的是二进制炸弹和缓冲区溢出攻击这两个作业，都来自CSAPP。&lt;br&gt;二进制炸弹是通过gdb看汇编代码，然后推测出其中的意思，输入密码来通关，类似解谜游戏。&lt;br&gt;缓冲区溢出是通过输入一段较长的字符串，来覆盖掉函数的参数、返回位置等等，来使程序不按照原本的流程走。&lt;br&gt;为什么说硬啃呢？因为在这门课之前，我完全不懂gdb，汇编语言，栈机制等知识。为了解题，就翻来覆去地看CSAPP汇编那章。&lt;br&gt;就是在这种折磨下，学到了计算机稍微底层的知识。&lt;/p&gt;
&lt;h3 id=&quot;From-Nand-to-Tetris-Part-I&quot;&gt;&lt;a href=&quot;#From-Nand-to-Tetris-Part-I&quot; class=&quot;headerlink&quot; title=&quot;From Nand to Tetris, Part I&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mooc.guokr.com/course/2847/From-Nand-to-Tetris---Part-I/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;From Nand to Tetris, Part I&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这门课也是相对比较底层的，讲的是从零开始构建一个计算机。&lt;code&gt;Part I&lt;/code&gt;主要是从Nand门开始，搭建And门，Or门，接着搭建相关运算，然后是Bit、ALU，最终搭建一个CPU。&lt;br&gt;在看CSAPP时，就知道CPU是由三个部分构成的，ALU、寄存器、Program Counter。但具体是如何实现的却一头雾水。&lt;br&gt;学了之后才发现，最最简单的CPU构成，也是如下这种。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/cpu.png&quot; alt=&quot;CPU&quot;&gt;&lt;br&gt;Part II迟迟没有开课，不过内容的话配套的书和程序都有了，有空了一定要补起来。&lt;/p&gt;
&lt;h3 id=&quot;Introduction-to-Computer-Networks&quot;&gt;&lt;a href=&quot;#Introduction-to-Computer-Networks&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Computer Networks&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mooc.guokr.com/course/734/Introduction-to-Computer-Networks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Computer Networks&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这门课的难度比较简单，内容以知识性的为主，实践的部分不是很多。&lt;br&gt;老师讲得很通俗易懂，而且会翻来覆去地讲，印象特别深刻。PPT上的动画也十分形象，对初学者很友好。&lt;br&gt;上了这门课，我终于把&lt;code&gt;Ethernet&lt;/code&gt;和&lt;code&gt;Internet&lt;/code&gt;分清楚了（不知为何以前总搞不清），也了解了一个个封包是如何在网络中传递的。&lt;/p&gt;
&lt;h2 id=&quot;待续&quot;&gt;&lt;a href=&quot;#待续&quot; class=&quot;headerlink&quot; title=&quot;待续&quot;&gt;&lt;/a&gt;待续&lt;/h2&gt;&lt;p&gt;由于时间和精力有限，像离散数学、编译原理、操作系统等知识还未来得及学习，只能边工作边补充了。&lt;/p&gt;
&lt;p&gt;自己这一路走来，意外发现和&lt;a href=&quot;http://spin.atomicobject.com/2015/05/15/obtaining-thorough-cs-background-online/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Obtaining a Thorough CS Background Online&lt;/a&gt;的做法很相似，看了下课程清单，任重而道远，还须努力努力。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转行当程序员也快一年了，这篇给自己的交代硬生生拖了半年，趁着没忘，赶紧写写。&lt;/p&gt;
&lt;p&gt;大三前对编程的印象停留在初中用VB编猜数字游戏，但一直对编程抱有一定的好奇。&lt;br&gt;有数学和逻辑的魅力，又不会过于抽象，可以充分验证自己的想法，所需却不多，仅仅是一台电脑。&lt;br&gt;好奇心加上时间，我开始去学习编程相关的知识。&lt;/p&gt;
&lt;p&gt;那，如何去学呢？可能是因为一直都是按部就班地学习，对基础这块就特别重视，&lt;br&gt;再加上搜索如何学习编程时，经常看到“程序=算法+数据结构”这话，就决定先从算法开始。想来真是初生牛犊不怕虎。&lt;br&gt;幸运的是，那段时间MOOC正好兴起，尤其以计算机相关的课程最多。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaywu.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Android的自学之路</title>
    <link href="http://kaywu.github.io/2015/05/14/Experience/"/>
    <id>http://kaywu.github.io/2015/05/14/Experience/</id>
    <published>2015-05-14T02:01:00.000Z</published>
    <updated>2016-02-28T01:52:43.000Z</updated>
    
    <content type="html">&lt;p&gt;简单介绍下，非计算机专业，14年开始接触编程，陆续学习了些Android知识。然后年底的时候辞职开始专心学习Android开发。那时候其实差不多把《第一行代码》看完了，对Android基础的知识有了一定的了解。&lt;/p&gt;
&lt;h2 id=&quot;自学过程&quot;&gt;&lt;a href=&quot;#自学过程&quot; class=&quot;headerlink&quot; title=&quot;自学过程&quot;&gt;&lt;/a&gt;自学过程&lt;/h2&gt;&lt;p&gt;由于自己习惯把做过的一些demo放到github上，正好可以借此回顾下自学的过程。&lt;/p&gt;
&lt;p&gt;其实android入门的教程是很多的，比如我看的《第一行代码》（强推），官方教程（强推），极客学院的视频课程等资料。&lt;br&gt;但是，我在学完了之后其实很困惑，四大组件学完了然后呢？我只能根据书上的例子敲demo，做不出什么实际的东西来。&lt;br&gt;然后想到要自己做出个App来，现在想来这虽然有用，但不是一个高效的方法。&lt;br&gt;因为做一个App不是一件容易的事，除了代码方面的工作，设计和功能都是要进行构思的，而这两项工作都很费功夫。&lt;br&gt;所以，我决定从模仿一个App的UI开始。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;豆瓣Demo&quot;&gt;&lt;a href=&quot;#豆瓣Demo&quot; class=&quot;headerlink&quot; title=&quot;豆瓣Demo&quot;&gt;&lt;/a&gt;豆瓣Demo&lt;/h3&gt;&lt;p&gt;我首先做的是一个非常粗略地模仿豆瓣UI的demo。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/20150221173403265.gif&quot; alt=&quot;豆瓣demo&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/KayWu/Douban&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kaywu.github.io/2015/04/03/DoubanDemo/&quot;&gt;demo详细介绍&lt;/a&gt;&lt;br&gt;这个demo虽然简单，但是用到了几个非常常用的控件，如ViewPager(居家必备)， SwipeRefreshLayout(官方下拉刷新), PagerSlidingTabStrip(常用的ViewPager Indicator)。我也是在这个demo中第一次使用到了开源库，体会到了gradle导库的爽感。&lt;/p&gt;
&lt;h3 id=&quot;简易知乎日报&quot;&gt;&lt;a href=&quot;#简易知乎日报&quot; class=&quot;headerlink&quot; title=&quot;简易知乎日报&quot;&gt;&lt;/a&gt;简易知乎日报&lt;/h3&gt;&lt;p&gt;第一个demo完成了之后，挺开心。但是想想，光滑来滑去也没太多意思。总得来些网络请求之类的吧，但是自己又没有api，正巧这时候发现了&lt;a href=&quot;https://github.com/izzyleung/ZhihuDailyPurify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;纯净知乎日报&lt;/a&gt;，既是个开源的App，wiki还有针对知乎Api的分析。于是就先拿来玩耍了下，然后学到了不少东西，如java文件的包设计，一些自定义的drawable的使用，如layer-list, shape等等。&lt;br&gt;学完了的东西就得用起来，于是我就做了自己的知乎日报。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/zhihudaily.gif&quot; alt=&quot;知乎日报&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/KayWu/Zhihu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个App在很大程度上参考了纯净知乎日报，比如网络请求同样是用asynctask封装，gson解析，图片加载用的是universal-image-loader等等。&lt;br&gt;但是又加了自己的一些东西，比如webview+css样式的运用，以及收藏功能的实现。前者是通过google+stackoverflow，后者只是简单的数据库的应用。&lt;/p&gt;
&lt;h3 id=&quot;仿堆糖UI&quot;&gt;&lt;a href=&quot;#仿堆糖UI&quot; class=&quot;headerlink&quot; title=&quot;仿堆糖UI&quot;&gt;&lt;/a&gt;仿堆糖UI&lt;/h3&gt;&lt;p&gt;现在终于可以做出一个比较简易的App了，虽然是在大量借鉴的情况下，但起码又是一个大的进步。&lt;br&gt;接下来我又做了一个高仿堆糖UI的App，纯UI，没有网络交互。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/duitang_welcome.gif&quot; alt=&quot;堆糖首页&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/duitang_person.gif&quot; alt=&quot;堆糖个人页&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/KayWu/Duitang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;br&gt;这个阶段UI的仿照就比较细致了，而且随着UI复杂度的提升，可能会出现Touch事件冲突的现象。&lt;br&gt;比如热门页那里，ViewPager的左右滑动和下拉刷新是有冲突的，我采取的解决方法可以看github里面的介绍。&lt;br&gt;瀑布流、actionbar透明度的变化，都是通过google+stackoverflow一步步解决的。&lt;br&gt;这个App是手工通过玩正版App一步步拷下来的，基本是看图写代码。大量的看、写、比、改，布局写法的熟练度迅速上升。&lt;br&gt;做下来之后，不是太过复杂的界面基本可以Hold住了。&lt;/p&gt;
&lt;h3 id=&quot;上线App&quot;&gt;&lt;a href=&quot;#上线App&quot; class=&quot;headerlink&quot; title=&quot;上线App&quot;&gt;&lt;/a&gt;上线App&lt;/h3&gt;&lt;p&gt;接下来就跑到一家创业公司做App去了。独立开发的App已在各大市场上架。但是感觉做的一般，就不上图了。&lt;br&gt;App包含了第三方分享，第三方登录，自动更新，这部分都是友盟的插件来实现的，没什么技术含量。&lt;br&gt;在这个App里我实现了网络的封装，可以通过发送请求，然后自动解析json，返回java对象。&lt;br&gt;看起来好像很高大上的样子，其实就是使用了Volley库，实现里自己的request，并在parseNetworkResponse里使用gson对数据进行了处理而已。&lt;/p&gt;
&lt;h2 id=&quot;经验总结&quot;&gt;&lt;a href=&quot;#经验总结&quot; class=&quot;headerlink&quot; title=&quot;经验总结&quot;&gt;&lt;/a&gt;经验总结&lt;/h2&gt;&lt;p&gt;回顾结束，下面讲讲一些经验总结。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从简单的东西做起，然后一步步加深&lt;br&gt;我刚开始的仿豆瓣其实非常的粗略，但是通过它熟悉了Viewpager，SwipeRefreshLayout，而这两项又在后面的项目中大量运用到。自己做的东西也从以前的只有UI，到加入网络请求，再到封装网络。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果没有具体的App的点子，从模仿开始&lt;br&gt;比如可以简单的模仿一个App的UI，或者学习一个简单的开源App，然后通过学习自己制作一个类似的，尝试增加一些小功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遇到瓶颈的时候，不要想太多，只管努力就是了&lt;br&gt;虽然上面的经历回顾写的好像顺风顺水的样子，其实完全不是，经常几天都没有啥进展。&lt;br&gt;在那时候也会对自己有些怀疑，但是不要想太多，努力下去就是了。&lt;br&gt;因为编程需要积累，而积累的反馈是具有延迟性的，一点点的量变引起质变。&lt;br&gt;比较常见的情况是，可能好几天都没有啥突破，然后过了一段时间后，突然发现自己已经进步了不少。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多想想有没有更好的实现方法&lt;br&gt;比如学会用asynctask来进行网路请求后，可以想想有没有更好的实现方式。这时就可以找下相关的网络库，比如volley, retrofit之类的进行学习。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用开源库&lt;br&gt;Android现在的开源库已经比较强大了，比如图片加载库有picasso，universal-image-loader，glide等等。&lt;br&gt;开源库的总结可以看看&lt;a href=&quot;https://github.com/Trinea/android-open-project，整理的比较全面了。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Trinea/android-open-project，整理的比较全面了。&lt;/a&gt;&lt;br&gt;程度上升了之后可以去看看&lt;a href=&quot;https://github.com/android-cn/android-open-project-analysis，了解下开源库的实现原理。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/android-cn/android-open-project-analysis，了解下开源库的实现原理。&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把英语练好，学会翻墙&lt;br&gt;大部分碰到的问题都可以通过google+stackoverflow解决。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍下，非计算机专业，14年开始接触编程，陆续学习了些Android知识。然后年底的时候辞职开始专心学习Android开发。那时候其实差不多把《第一行代码》看完了，对Android基础的知识有了一定的了解。&lt;/p&gt;
&lt;h2 id=&quot;自学过程&quot;&gt;&lt;a href=&quot;#自学过程&quot; class=&quot;headerlink&quot; title=&quot;自学过程&quot;&gt;&lt;/a&gt;自学过程&lt;/h2&gt;&lt;p&gt;由于自己习惯把做过的一些demo放到github上，正好可以借此回顾下自学的过程。&lt;/p&gt;
&lt;p&gt;其实android入门的教程是很多的，比如我看的《第一行代码》（强推），官方教程（强推），极客学院的视频课程等资料。&lt;br&gt;但是，我在学完了之后其实很困惑，四大组件学完了然后呢？我只能根据书上的例子敲demo，做不出什么实际的东西来。&lt;br&gt;然后想到要自己做出个App来，现在想来这虽然有用，但不是一个高效的方法。&lt;br&gt;因为做一个App不是一件容易的事，除了代码方面的工作，设计和功能都是要进行构思的，而这两项工作都很费功夫。&lt;br&gt;所以，我决定从模仿一个App的UI开始。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>从 LayoutInflater 谈起</title>
    <link href="http://kaywu.github.io/2015/04/05/LayoutInfalter/"/>
    <id>http://kaywu.github.io/2015/04/05/LayoutInfalter/</id>
    <published>2015-04-05T10:00:02.000Z</published>
    <updated>2015-04-05T13:35:23.000Z</updated>
    
    <content type="html">&lt;p&gt;LayoutInflater 是我们用来加载布局的类，经常用于 Adapter 的 getView，Fragment 的 onCreateView 方法中。但我在使用时，经常有些疑惑，比如 inflater 方法参数的数目有时候为 2 个，有时候 3 个。第 2 个参数经常为 null，而第 3 个参数在第 2 个参数不为 null 的情况下常为 false。这些到底有什么区别？通过一段时间的实践，稍微有了些体会，写文章来总结下。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;获取-LayoutInflater-实例&quot;&gt;&lt;a href=&quot;#获取-LayoutInflater-实例&quot; class=&quot;headerlink&quot; title=&quot;获取 LayoutInflater 实例&quot;&gt;&lt;/a&gt;获取 LayoutInflater 实例&lt;/h2&gt;&lt;p&gt;我们首先从简单的说起，如何获取 LayoutInflater 的实例。&lt;br&gt;比较常用的方法有 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LayoutInflater inflater = getLayoutInflater(); // 调用 Activity 的 getLayoutInflater()&lt;/li&gt;
&lt;li&gt;LayoutInflater inflater = LayoutInflater.from(context);&lt;/li&gt;
&lt;li&gt;LayoutInflater inflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两种看起来简单，第三种看起来最繁琐。但实质上前两种都是调用的第三种。&lt;/p&gt;
&lt;h2 id=&quot;inflate-int-resource-ViewGroup-root-boolean-attachToRoot&quot;&gt;&lt;a href=&quot;#inflate-int-resource-ViewGroup-root-boolean-attachToRoot&quot; class=&quot;headerlink&quot; title=&quot;inflate(int resource, ViewGroup root, boolean attachToRoot)&quot;&gt;&lt;/a&gt;inflate(int resource, ViewGroup root, boolean attachToRoot)&lt;/h2&gt;&lt;p&gt;然后来到我们的重点，LayoutInflater.inflate 的方法。&lt;/p&gt;
&lt;h3 id=&quot;参数的数量&quot;&gt;&lt;a href=&quot;#参数的数量&quot; class=&quot;headerlink&quot; title=&quot;参数的数量&quot;&gt;&lt;/a&gt;参数的数量&lt;/h3&gt;&lt;p&gt;inflate 方法有 2 个参数的，也有 3 个参数的。但本质上来讲 2 个参数只是 3 个参数的缩略形式。&lt;br&gt;inflate(resource, root) &amp;lt;=&amp;gt; inflate(resource, root, true)&lt;br&gt;inflate(resource, null) &amp;lt;=&amp;gt; inflate(resource, root, false)&lt;br&gt;通过判断 root == null 来添加第 3 个参数，若是 null 则为 false， 反之则为 true。&lt;/p&gt;
&lt;h3 id=&quot;参数的意义&quot;&gt;&lt;a href=&quot;#参数的意义&quot; class=&quot;headerlink&quot; title=&quot;参数的意义&quot;&gt;&lt;/a&gt;参数的意义&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/LayoutInflater.html#inflate(int, android.view.ViewGroup, boolean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;br&gt;第 1 个参数大家都很清楚，是要加载的布局 id。&lt;br&gt;而第 2 个参数从直观但不准确的意义上来讲，有两种作用。在 attachToRoot 为 false 的情况下，root 使得要加载的布局文件最外层的布局的 layout_height、layout_width 等属性生效。在 attachToRoot 为 true 的情况下，root 为加载的布局的父布局。&lt;br&gt;第 3 个参数如上所述，是用来控制 root 参数所发挥的作用。&lt;/p&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;例子来源&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/12921889&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android LayoutInflater原理分析，带你一步步深入了解View&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;activity-main-xml&quot;&gt;&lt;a href=&quot;#activity-main-xml&quot; class=&quot;headerlink&quot; title=&quot;activity_main.xml&quot;&gt;&lt;/a&gt;activity_main.xml&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  &amp;#10;    android:id=&amp;#34;@+id/main_layout&amp;#34;  &amp;#10;    android:layout_width=&amp;#34;match_parent&amp;#34;  &amp;#10;    android:layout_height=&amp;#34;match_parent&amp;#34; &amp;#62;  &amp;#10;&amp;#60;/LinearLayout&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;button-layout-xml&quot;&gt;&lt;a href=&quot;#button-layout-xml&quot; class=&quot;headerlink&quot; title=&quot;button_layout.xml&quot;&gt;&lt;/a&gt;button_layout.xml&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;Button xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  &amp;#10;    android:layout_width=&amp;#34;80dp&amp;#34;  &amp;#10;    android:layout_height=&amp;#34;80dp&amp;#34;  &amp;#10;    android:text=&amp;#34;Button&amp;#34; &amp;#62;  &amp;#10;&amp;#60;/Button&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;MainActivity-java&quot;&gt;&lt;a href=&quot;#MainActivity-java&quot; class=&quot;headerlink&quot; title=&quot;MainActivity.java&quot;&gt;&lt;/a&gt;MainActivity.java&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class MainActivity extends Activity &amp;#123;  &amp;#10;  &amp;#10;    private LinearLayout mainLayout;  &amp;#10;  &amp;#10;    @Override  &amp;#10;    protected void onCreate(Bundle savedInstanceState) &amp;#123;  &amp;#10;        super.onCreate(savedInstanceState);  &amp;#10;        setContentView(R.layout.activity_main);  &amp;#10;        mainLayout = (LinearLayout) findViewById(R.id.main_layout);  &amp;#10;        LayoutInflater layoutInflater = LayoutInflater.from(this);  &amp;#10;        View buttonLayout = layoutInflater.inflate(R.layout.button_layout, null);  &amp;#10;        mainLayout.addView(buttonLayout);  &amp;#10;    &amp;#125;  &amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当运行程序时，我们会发现，button 的大小和我们的设定不一致。这是因为 root 设为 null，使得加载的布局的最外层，这里也就是 Button，它的layout_width，layout_height 等都会失效。&lt;br&gt;那怎么解决这个问题？参考的文章中采用了在 Button 外面再套一层 RelatvieLayout 的方法。但是，这显然不是好方法。因为 RelativeLayout 这个布局几乎没什么作用。那如何做到优化呢？其实我们只要简单修改下 inflate 的参数就可以了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; protected void onCreate(Bundle savedInstanceState) &amp;#123;  &amp;#10;        super.onCreate(savedInstanceState);  &amp;#10;        setContentView(R.layout.activity_main);  &amp;#10;        mainLayout = (LinearLayout) findViewById(R.id.main_layout);  &amp;#10;        LayoutInflater layoutInflater = LayoutInflater.from(this);  &amp;#10;        // &amp;#23558; null &amp;#25913;&amp;#20026; mainLayout&amp;#65292;&amp;#30456;&amp;#24403;&amp;#20110; inflate(R.layout.button_layout, mainLayout, true)  &amp;#10;        // &amp;#20063;&amp;#30456;&amp;#24403;&amp;#20110; View view = layoutInflater.inflate(R.layout.button_layout, mianLayout, false);&amp;#10;        // &amp;#21152;&amp;#19978; mainLayout.addView(view);&amp;#10;        layoutInflater.inflate(R.layout.button_layout, mainLayout);&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;那么问题来了，我们平时应该如何使用 inflate 呢？&lt;br&gt;我个人的看法是，在类似 adapter 的 getView 和 fragment 的 onCreateView 等方法中，应该使用 inflate(resource, root, false) 而不是 inflate(resource, null)。后者会使得布局最外层的 layout_width, layout_height 等属性失效。&lt;/p&gt;
&lt;p&gt;另外值得注意的是自定义 view。自定义 view 的构造方法中（特指参考文中的组合控件），我们应该使用 inflate(resource, root) 或 infalte(resource, root, true)。&lt;br&gt;参考&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/17357967&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android自定义View的实现方法，带你一步步深入了解View&lt;/a&gt;中的组合控件。&lt;br&gt;在你的应用中有自定义的导航栏，你想在多处使用，那你就可以自定义一个导航栏。&lt;br&gt;但是这样做，有一个不好的地方。你继承的是 FrameLayout, 然后通过 inflate 返回 LiearnLayout。这样，外层的 FrameLayout 就基本没什么用。&lt;br&gt;正确的做法应该是，直接继承 LinearLayout, 然后读取的布局文件以 merge 作为根布局，可以参考&lt;a href=&quot;http://www.vogella.com/tutorials/AndroidCustomViews/article.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating custom and compound Views in Android - Tutorial&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h2&gt;&lt;p&gt;写了才知道写博客真的挺难的，我深刻感受到了自己的词不达意。&lt;br&gt;上面参考的两篇文章都来自郭霖大神的博客。该博客有大量干货，而且写得浅显易懂。&lt;br&gt;其实参数 root 起到的作用是为 view 添加 LayoutParams, 而这 LayoutParams 会在 addView(view) 中发挥作用，大家可以参照源码，但直观来讲就是使最外层布局的相关 layout 属性生效。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;LayoutInflater 是我们用来加载布局的类，经常用于 Adapter 的 getView，Fragment 的 onCreateView 方法中。但我在使用时，经常有些疑惑，比如 inflater 方法参数的数目有时候为 2 个，有时候 3 个。第 2 个参数经常为 null，而第 3 个参数在第 2 个参数不为 null 的情况下常为 false。这些到底有什么区别？通过一段时间的实践，稍微有了些体会，写文章来总结下。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>简单分析下 Google 最近的开源播放器</title>
    <link href="http://kaywu.github.io/2015/04/04/GoogleMusicPlayer/"/>
    <id>http://kaywu.github.io/2015/04/04/GoogleMusicPlayer/</id>
    <published>2015-04-04T10:47:05.000Z</published>
    <updated>2015-04-05T03:27:17.000Z</updated>
    
    <content type="html">&lt;p&gt; &lt;a href=&quot;https://github.com/googlesamples/android-UniversalMusicPlayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt;&lt;br&gt;Google 最近开源了一款播放器，android-UniversalMusicPlayer，可以在 phones, tablets, Auto, Wear and Cast devices 提供一致的用户体验。&lt;br&gt;而且项目不算复杂，再加上编译起来很简单，就是 Android Studio 直接导入就可以了，很适合我这种新手学习。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总体-UI-分析&quot;&gt;&lt;a href=&quot;#总体-UI-分析&quot; class=&quot;headerlink&quot; title=&quot;总体 UI 分析&quot;&gt;&lt;/a&gt;总体 UI 分析&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/20150319113711041.jpg&quot; alt=&quot;主页面&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/20150319115256136.jpg&quot; alt=&quot;播放页面&quot;&gt;&lt;br&gt;UI 比较重要的类有 MusicPlayerActivity, PlaceholderActivity, MediaBrowserFragment, FullScreenPlayerActivity, PlaybackControlsFragment。&lt;br&gt;其中 MusicPlayerActivity, PlaceholderActivity 都是继承 BaseActivity, FullScreenPlayerActivity 是继承 ActionBarCastActivity，而 BaseActivity 是 ActionBarCastActivity 的子类。&lt;br&gt;ActionBarCastActivity 主要实现了 DrawLayout, Toolbar 之类的功能，而 BaseActivity 在此之上又添加了与 PlaybackControlsFragment 交互的功能。&lt;/p&gt;
&lt;h3 id=&quot;DrawerLayout&quot;&gt;&lt;a href=&quot;#DrawerLayout&quot; class=&quot;headerlink&quot; title=&quot;DrawerLayout&quot;&gt;&lt;/a&gt;DrawerLayout&lt;/h3&gt;&lt;p&gt;值得注意的是，这里的 DrawerLayout 是在不同的 Activity 之中进行切换，而不是在 fragment 之间。主要实现的方法主要是通过继承一个含有 DrawLayout 的 Activity，在这里即是 ActionBarCastActivity。可以参考 &lt;a href=&quot;http://stackoverflow.com/questions/19451715/same-navigation-drawer-in-different-activities&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;该问题&lt;/a&gt; 。&lt;br&gt;还有一个比较奇特的效果是，DrawerLayout 原本被 status bar 和 actionbar 挡住的部分可以显示出来了。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/20150319122547034.jpg&quot; alt=&quot;DrawLayout&quot;&gt;&lt;br&gt;具体做法分析可以参考源码和文章 &lt;a href=&quot;http://solo.farbox.com/blog/how-do-i-use-drawerlayout-to-display-over-the-actionbar-or-toolbar-and-under-the-status-bar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何将 DrawerLayout 显示在 ActionBar/Toolbar 和 status bar 之间&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;Animation&quot;&gt;&lt;a href=&quot;#Animation&quot; class=&quot;headerlink&quot; title=&quot;Animation&quot;&gt;&lt;/a&gt;Animation&lt;/h2&gt;&lt;h3 id=&quot;Drawble-Animation&quot;&gt;&lt;a href=&quot;#Drawble-Animation&quot; class=&quot;headerlink&quot; title=&quot;Drawble Animation&quot;&gt;&lt;/a&gt;Drawble Animation&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/20150319122336166.gif&quot; alt=&quot;Playing Animation&quot;&gt;&lt;br&gt;在播放时 listview 图标会有变动的效果。这个主要是在 MediaItemViewHolder.java 通过 Drawble Animation 实现的。&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/graphics/drawable-animation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;br&gt;主要实现代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AnimationDrawable animation = (AnimationDrawable)activity.getDrawable(R.drawable.ic_equalizer_white_36dp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;holder.mImageView.setImageDrawable(animation);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;holder.mImageView.setImageTintList(sColorStatePlaying);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;holder.mImageView.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;animation.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;animation-list xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:oneshot=&amp;#34;false&amp;#34;&amp;#62;&amp;#10;    &amp;#60;item android:drawable=&amp;#34;@drawable/ic_equalizer1_white_36dp&amp;#34; android:duration=&amp;#34;200&amp;#34;/&amp;#62;&amp;#10;    &amp;#60;item android:drawable=&amp;#34;@drawable/ic_equalizer2_white_36dp&amp;#34; android:duration=&amp;#34;200&amp;#34;/&amp;#62;&amp;#10;    &amp;#60;item android:drawable=&amp;#34;@drawable/ic_equalizer3_white_36dp&amp;#34; android:duration=&amp;#34;200&amp;#34;/&amp;#62;&amp;#10;&amp;#60;/animation-list&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;切换-Drawer-Activity-Fragment-的动画效果&quot;&gt;&lt;a href=&quot;#切换-Drawer-Activity-Fragment-的动画效果&quot; class=&quot;headerlink&quot; title=&quot;切换 Drawer Activity Fragment 的动画效果&quot;&gt;&lt;/a&gt;切换 Drawer Activity Fragment 的动画效果&lt;/h3&gt;&lt;p&gt;ActionBarCastActivity.java&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Bundle extras = ActivityOptions.makeCustomAnimation(ActionBarCastActivity.this, R.anim.fade_in, R.anim.fade_out).toBundle();&amp;#10;Class activityClass = mDrawerMenuContents.getActivity(position);&amp;#10;startActivity(new Intent(ActionBarCastActivity.this, activityClass), extras);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;MusicPlayerActivity.java&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FragmentTransaction transaction = getFragmentManager().beginTransaction();&amp;#10;transaction.setCustomAnimations(R.animator.slide_in_from_right, R.animator.slide_out_to_left, R.animator.slide_in_from_left, R.animator.slide_out_to_right);&amp;#10;transaction.replace(R.id.container, fragment);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;小技巧&quot;&gt;&lt;a href=&quot;#小技巧&quot; class=&quot;headerlink&quot; title=&quot;小技巧&quot;&gt;&lt;/a&gt;小技巧&lt;/h2&gt;&lt;h3 id=&quot;tools-xxx&quot;&gt;&lt;a href=&quot;#tools-xxx&quot; class=&quot;headerlink&quot; title=&quot;tools:xxx&quot;&gt;&lt;/a&gt;tools:xxx&lt;/h3&gt;&lt;p&gt;在显示布局时，TextView 可能需要文字填充来看看效果，但是又嫌调试后删去 android:text=”…”麻烦，就可以用 tools:text=”…”。&lt;br&gt;其中 tools:xxx 在用来预览界面方面还是很方便的。比如在看 activity_player.xml 预览时会提示 fragment 可能动态布局，请选择一个布局进行显示。进行选择后，就会在 fragment 里添加 tools:layout=”@layout/fragment_playback_controls”，这样在预览时就可以看到 PlaybackControlsFragment 的具体布局，但对运行时又没有影响。&lt;br&gt;关于 tools:xxx 的用法可参考 &lt;a href=&quot;http://tools.android.com/tech-docs/tools-attributes。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tools.android.com/tech-docs/tools-attributes。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;android-tint&quot;&gt;&lt;a href=&quot;#android-tint&quot; class=&quot;headerlink&quot; title=&quot;android:tint&quot;&gt;&lt;/a&gt;android:tint&lt;/h3&gt;&lt;p&gt;在播放器里，像播放按钮一共有两种颜色，白色和蓝色。我们可以使用两个不同的图标来完成这种效果，也可以通过 android:tint 来使图标简单地变色，有点像 ps 里添加蒙版的感觉。&lt;br&gt;xml 里的用法是 android:tint，可参考 fragment_playback_controls.xml 里的 ImageButton。&lt;br&gt;Java 里的用法 setImageTintList()，可参考 MediaItemViewHolder.java 里相关代码。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sColorStateNotPlaying = ColorStateList.valueOf(ctx.getResources().getColor(R.color.media_item_icon_not_playing));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;holder.mImageView.setImageTintList(sColorStatePlaying);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;a href=&quot;https://github.com/googlesamples/android-UniversalMusicPlayer&quot;&gt;项目地址&lt;/a&gt;&lt;br&gt;Google 最近开源了一款播放器，android-UniversalMusicPlayer，可以在 phones, tablets, Auto, Wear and Cast devices 提供一致的用户体验。&lt;br&gt;而且项目不算复杂，再加上编译起来很简单，就是 Android Studio 直接导入就可以了，很适合我这种新手学习。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>打造豆瓣App</title>
    <link href="http://kaywu.github.io/2015/04/03/DoubanDemo/"/>
    <id>http://kaywu.github.io/2015/04/03/DoubanDemo/</id>
    <published>2015-04-03T11:23:22.000Z</published>
    <updated>2015-05-14T02:38:42.000Z</updated>
    
    <content type="html">&lt;p&gt;使用 ViewPager, PagerSlidingTabStrip, SwipeRefreshLayout打造豆瓣App的效果。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/20150221173403265.gif&quot; alt=&quot;最终效果&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先简单介绍下三个所使用的开源库。&lt;/p&gt;
&lt;h2 id=&quot;ViewPager&quot;&gt;&lt;a href=&quot;#ViewPager&quot; class=&quot;headerlink&quot; title=&quot;ViewPager&quot;&gt;&lt;/a&gt;ViewPager&lt;/h2&gt;&lt;p&gt;ViewPager是v4包里提供的，可以通过PagerAdapter根据左右的滑动产生不同的page。&lt;br&gt;PagerAdapter分为FragmentPagerAdapter, FragmentStatePagerAdapter。&lt;br&gt;唯一的区别是在对不再需要的fragment时所采用的处理方法不同。&lt;br&gt;前者选择detach，后者选择remove并保存状态。&lt;br&gt;ViewPager的使用方法类似ListView, 都是使用Adapter来提供内容。而ListView中getItem返回的是View, 而ViewPager返回的是Fragment。&lt;/p&gt;
&lt;p&gt;###使用方法&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ViewPager pager = (ViewPager)findViewById(R.id.pager);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pager.setAdapter(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PagerAdapter(getSupportFragmentManager()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 继承PagerAdapter 必须实现的方法有getCount, 返回列表的总数。 getItem，即根据position返回对应的fragment。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PagerAdapter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FragmentPagerAdapter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Fragment &lt;span class=&quot;title&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NUM_OF_PAGES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;PagerSlidingTabStrip&quot;&gt;&lt;a href=&quot;#PagerSlidingTabStrip&quot; class=&quot;headerlink&quot; title=&quot;PagerSlidingTabStrip&quot;&gt;&lt;/a&gt;PagerSlidingTabStrip&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/astuetz/PagerSlidingTabStrip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;br&gt;作用是根据ViewPager生成对应的tab 在页面切换时有相应的动画效果&lt;br&gt;其中TestAdapter是FragmentPagerAdapter或FragmentStatePagerAdapter的子类。&lt;/p&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize the ViewPager and set an adapter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ViewPager pager = (ViewPager) findViewById(R.id.pager);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pager.setAdapter(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TestAdapter(getSupportFragmentManager()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// Bind the tabs to the ViewPager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; PagerSlidingTabStrip tabs = (PagerSlidingTabStrip) findViewById(R.id.tabs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; tabs.setViewPager(pager);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;SwipeRefreshLayout&quot;&gt;&lt;a href=&quot;#SwipeRefreshLayout&quot; class=&quot;headerlink&quot; title=&quot;SwipeRefreshLayout&quot;&gt;&lt;/a&gt;SwipeRefreshLayout&lt;/h2&gt;&lt;p&gt;SwipeRefreshLayout同样是v4包里的，它提供了下拉刷新的功能以及对应的动画效果，使用起来非常简便。但是其中只能包含一个View，且该View必须是可滑动的（不可滑动的话动画显示有bug），如ListView。&lt;/p&gt;
&lt;h3 id=&quot;使用方法-1&quot;&gt;&lt;a href=&quot;#使用方法-1&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;在xml文件中添加android.support.v4.widget.SwipeRefreshLayout&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;android.support.v4.widget.SwipeRefreshLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&amp;#10;    xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34;&amp;#10;    android:id=&amp;#34;@+id/refresh_layout&amp;#34;&amp;#10;    android:layout_width=&amp;#34;match_parent&amp;#34;&amp;#10;    android:layout_height=&amp;#34;match_parent&amp;#34;&amp;#62;&amp;#10;&amp;#10;    &amp;#60;ListView&amp;#10;        android:id=&amp;#34;@+id/lv&amp;#34;&amp;#10;        android:layout_width=&amp;#34;match_parent&amp;#34;&amp;#10;        android:layout_height=&amp;#34;match_parent&amp;#34; /&amp;#62;&amp;#10;&amp;#10;&amp;#60;/android.support.v4.widget.SwipeRefreshLayout&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下拉时若要触发事件， 需实现SwipeRefreshLayout.OnRefreshListener，重写onRefresh方法。&lt;/p&gt;
&lt;h2 id=&quot;打造豆瓣App效果&quot;&gt;&lt;a href=&quot;#打造豆瓣App效果&quot; class=&quot;headerlink&quot; title=&quot;打造豆瓣App效果&quot;&gt;&lt;/a&gt;打造豆瓣App效果&lt;/h2&gt;&lt;p&gt;整个项目UI有三个文件，为MainActivity, ListRefreshFragment, PagerFragment。&lt;/p&gt;
&lt;h3 id=&quot;PagerFragment&quot;&gt;&lt;a href=&quot;#PagerFragment&quot; class=&quot;headerlink&quot; title=&quot;PagerFragment&quot;&gt;&lt;/a&gt;PagerFragment&lt;/h3&gt;&lt;p&gt;PagerFragment为其中最简单的，仅含有一个TextView。&lt;br&gt;在最初创建的时候，会从getArguments()取出参数填充TextView。&lt;br&gt;arguments会在configuration changes后被自动保存，可参考&lt;a href=&quot;http://stackoverflow.com/questions/22784904/does-fragment-getarguments-return-passed-arguments-after-configuration-changes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;该问题&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;onCreateView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        View pager = inflater.inflate(R.layout.pager_fragment, container, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tv = (TextView) pager.findViewById(R.id.tv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bundle bundle = getArguments();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pageNum = bundle.getInt(&lt;span class=&quot;string&quot;&gt;&quot;page_num&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tv.setText(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; + pageNum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pager;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;ListRefreshFragment&quot;&gt;&lt;a href=&quot;#ListRefreshFragment&quot; class=&quot;headerlink&quot; title=&quot;ListRefreshFragment&quot;&gt;&lt;/a&gt;ListRefreshFragment&lt;/h3&gt;&lt;p&gt;ListRefreshFragment布局文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;android.support.v4.widget.SwipeRefreshLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&amp;#10;    xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34;&amp;#10;    android:id=&amp;#34;@+id/refresh_layout&amp;#34;&amp;#10;    android:layout_width=&amp;#34;match_parent&amp;#34;&amp;#10;    android:layout_height=&amp;#34;match_parent&amp;#34;&amp;#10;    tools:context=&amp;#34;com.kay.douban.ListRefreshFragment&amp;#34;&amp;#62;&amp;#10;&amp;#10;    &amp;#60;ListView&amp;#10;        android:id=&amp;#34;@+id/lv&amp;#34;&amp;#10;        android:layout_width=&amp;#34;match_parent&amp;#34;&amp;#10;        android:layout_height=&amp;#34;match_parent&amp;#34; /&amp;#62;&amp;#10;&amp;#10;&amp;#60;/android.support.v4.widget.SwipeRefreshLayout&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对SwipeRefreshLayout进行配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &amp;#123;&amp;#10;&amp;#9;mRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.refresh_layout);&amp;#10;    // fragment implements SwipeRefreshLayout.OnRefreshListener&amp;#10;    mRefreshLayout.setOnRefreshListener(this);&amp;#10;    // &amp;#35774;&amp;#32622;&amp;#21160;&amp;#30011;&amp;#39068;&amp;#33394;&amp;#10;    mRefreshLayout.setColorSchemeResources(&amp;#10;            android.R.color.holo_blue_bright,&amp;#10;            android.R.color.holo_green_light,&amp;#10;            android.R.color.holo_orange_light,&amp;#10;            android.R.color.holo_red_light);&amp;#10;&amp;#125;&amp;#10;&amp;#10;// &amp;#19979;&amp;#25289;&amp;#26102;&amp;#26174;&amp;#31034;&amp;#21160;&amp;#30011;3&amp;#31186;&amp;#10;// &amp;#19968;&amp;#33324;&amp;#22312;onRefresh()&amp;#37324;&amp;#38754;&amp;#25191;&amp;#34892;&amp;#26356;&amp;#26032;&amp;#25805;&amp;#20316;&amp;#10;public void onRefresh() &amp;#123;&amp;#10;    mRefreshLayout.setRefreshing(true);&amp;#10;    new Handler().postDelayed(new Runnable() &amp;#123;&amp;#10;            public void run() &amp;#123;&amp;#10;            // &amp;#36890;&amp;#36807;setRefreshing(false)&amp;#20351;&amp;#21160;&amp;#30011;&amp;#20572;&amp;#27490;&amp;#10;                mRefreshLayout.setRefreshing(false);&amp;#10;            &amp;#125;&amp;#10;    &amp;#125;, 3000);&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;MainActivity&quot;&gt;&lt;a href=&quot;#MainActivity&quot; class=&quot;headerlink&quot; title=&quot;MainActivity&quot;&gt;&lt;/a&gt;MainActivity&lt;/h3&gt;&lt;p&gt;布局文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&amp;#10;    xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&amp;#10;    xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34;&amp;#10;    android:layout_width=&amp;#34;match_parent&amp;#34;&amp;#10;    android:layout_height=&amp;#34;match_parent&amp;#34;&amp;#10;    android:orientation=&amp;#34;vertical&amp;#34;&amp;#10;    tools:context=&amp;#34;.MainActivity&amp;#34;&amp;#62;&amp;#10;&amp;#10;    // &amp;#37197;&amp;#32622;tab&amp;#30340;&amp;#39068;&amp;#33394; &amp;#23383;&amp;#20307;&amp;#22823;&amp;#23567;&amp;#31561;&amp;#26679;&amp;#24335;&amp;#10;    &amp;#60;com.astuetz.PagerSlidingTabStrip&amp;#10;        android:id=&amp;#34;@+id/pager_tabs&amp;#34;&amp;#10;        android:layout_width=&amp;#34;match_parent&amp;#34;&amp;#10;        android:layout_height=&amp;#34;48dp&amp;#34;&amp;#10;        android:textColor=&amp;#34;#ff8f8f8f&amp;#34;&amp;#10;        android:textSize = &amp;#34;18sp&amp;#34;&amp;#10;        android:background=&amp;#34;#ff2d2d2d&amp;#34;&amp;#10;        app:pstsShouldExpand=&amp;#34;true&amp;#34;&amp;#10;        app:pstsIndicatorHeight=&amp;#34;4dp&amp;#34;&amp;#10;        app:pstsIndicatorColor=&amp;#34;#ff00cd79&amp;#34;/&amp;#62;&amp;#10;&amp;#10;    &amp;#60;android.support.v4.view.ViewPager&amp;#10;        android:id=&amp;#34;@+id/pager&amp;#34;&amp;#10;        android:layout_width=&amp;#34;match_parent&amp;#34;&amp;#10;        android:layout_height=&amp;#34;match_parent&amp;#34; /&amp;#62;&amp;#10;&amp;#60;/LinearLayout&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Activity中主要是配置PagerSlidingTabStrip以及FragmentPagerAdapter。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;protected void onCreate(Bundle savedInstanceState) &amp;#123;&amp;#10;        super.onCreate(savedInstanceState);&amp;#10;        requestWindowFeature(Window.FEATURE_NO_TITLE);&amp;#10;        setContentView(R.layout.activity_main);&amp;#10;&amp;#10;        pagerTab = (PagerSlidingTabStrip) findViewById(R.id.pager_tabs);&amp;#10;        pager = (ViewPager) findViewById(R.id.pager);&amp;#10;        pager.setOffscreenPageLimit(3);&amp;#10;        pager.setAdapter(new PagerAdapter(getSupportFragmentManager()));&amp;#10;        pagerTab.setViewPager(pager);&amp;#10;&amp;#125;&amp;#10;&amp;#10; private class PagerAdapter extends FragmentPagerAdapter &amp;#123;&amp;#10;&amp;#10;        private final String[] TITLES = getResources().getStringArray(R.array.pager_name);&amp;#10;&amp;#10;        private PagerAdapter(FragmentManager fm) &amp;#123;&amp;#10;            super(fm);&amp;#10;        &amp;#125;&amp;#10;&amp;#9;&amp;#9;&amp;#10;        // &amp;#20351;tab&amp;#21487;&amp;#20197;&amp;#26174;&amp;#31034;&amp;#23545;&amp;#24212;fragment&amp;#30340;title&amp;#10;        @Override&amp;#10;        public CharSequence getPageTitle(int position) &amp;#123;&amp;#10;            return TITLES[position];&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        // &amp;#36820;&amp;#22238;&amp;#23545;&amp;#24212;position&amp;#30340;fragment &amp;#35774;&amp;#32622;pagerFragment&amp;#30340;arguments&amp;#20351;&amp;#24471;&amp;#35813;fragment&amp;#21487;&amp;#20197;&amp;#22312;TextView&amp;#20013;&amp;#26174;&amp;#31034;&amp;#10;        @Override&amp;#10;        public Fragment getItem(int position) &amp;#123;&amp;#10;            Bundle bundle = new Bundle();&amp;#10;            Fragment pagerFragment;&amp;#10;            if (position == 0) &amp;#123;&amp;#10;                pagerFragment = new ListRefreshFragment();&amp;#10;            &amp;#125; else &amp;#123;&amp;#10;                pagerFragment = new PagerFragment();&amp;#10;            &amp;#125;&amp;#10;            bundle.putInt(&amp;#34;page_num&amp;#34;, position);&amp;#10;            pagerFragment.setArguments(bundle);&amp;#10;            return pagerFragment;&amp;#10;&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        @Override&amp;#10;        public int getCount() &amp;#123;&amp;#10;            return NUM_PAGES;&amp;#10;        &amp;#125;&amp;#10; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Kay-Wu/Douban.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;br&gt;关于各种开源库的导入，使用gradle。可参考&lt;a href=&quot;https://github.com/Kay-Wu/Douban/blob/master/app%2Fbuild.gradle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;build.gradle&lt;/a&gt;里的dependencies。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用 ViewPager, PagerSlidingTabStrip, SwipeRefreshLayout打造豆瓣App的效果。&lt;br&gt;&lt;img src=&quot;http://7xifw0.com1.z0.glb.clouddn.com/20150221173403265.gif&quot; alt=&quot;最终效果&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
</feed>
