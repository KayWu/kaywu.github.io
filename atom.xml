<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kay Wu&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kaywu.github.io/"/>
  <updated>2016-09-25T05:28:17.000Z</updated>
  <id>http://kaywu.github.io/</id>
  
  <author>
    <name>Kay Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>探索 pointerIndex out of range</title>
    <link href="http://kaywu.github.io/2016/09/25/pointer-index-out-of-range/"/>
    <id>http://kaywu.github.io/2016/09/25/pointer-index-out-of-range/</id>
    <published>2016-09-25T03:50:53.000Z</published>
    <updated>2016-09-25T05:28:17.000Z</updated>
    
    <content type="html">&lt;p&gt;最近 App 里报了一个奇怪的 Exception。为什么说奇怪呢，因为它发生的概率不是很大，但每天总有那么几个。这种非必现的问题，解决起来最是麻烦。查了下代码，发现是 &lt;code&gt;event.getY()&lt;/code&gt; 报错，我刚看到的反应是：纳尼，这里都能报错？网上查找了下解决方案，大致都是在  &lt;code&gt;onTouchEvent&lt;/code&gt; 里面或外面包一层 try…catch。能解决问题，可惜不够优雅。 于是花了些时间研究下。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: pointerIndex out of range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.MotionEvent.nativeGetAxisValue(Native Method)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.MotionEvent.getY(MotionEvent.java:&lt;span class=&quot;number&quot;&gt;1994&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.kay.example.DemoView.onTouchEvent(HomeView.java:&lt;span class=&quot;number&quot;&gt;184&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.View.dispatchTouchEvent(View.java:&lt;span class=&quot;number&quot;&gt;7714&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:&lt;span class=&quot;number&quot;&gt;2210&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:&lt;span class=&quot;number&quot;&gt;1945&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;探索&quot;&gt;&lt;a href=&quot;#探索&quot; class=&quot;headerlink&quot; title=&quot;探索&quot;&gt;&lt;/a&gt;探索&lt;/h2&gt;&lt;p&gt;这种非必现的问题，第一步要找到能重现问题的场景。于是我就拼命地戳那个报错的 View，在不懈努力之下，还真重现了几次。异常的栈跟上面是一致的，看来 &lt;code&gt;event.getY()&lt;/code&gt; 真能出错。&lt;br&gt;如果 &lt;code&gt;event.getY()&lt;/code&gt; 这种基础的方法都能出错，那么系统的控件是如何防止这个错误的呢。&lt;br&gt;查看了 &lt;code&gt;NestedScrollView&lt;/code&gt; 的源码，发现它的 &lt;code&gt;onTouchEvent&lt;/code&gt; 的处理果然是有门道的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NestedScrollView#onTouchEvent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (actionMasked) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MotionEvent.ACTION_DOWN: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mActivePointerId = MotionEventCompat.getPointerId(ev, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startNestedScroll(ViewCompat.SCROLL_AXIS_VERTICAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MotionEvent.ACTION_MOVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; activePointerIndex = MotionEventCompat.findPointerIndex(ev,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mActivePointerId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (activePointerIndex == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.e(TAG, &lt;span class=&quot;string&quot;&gt;&quot;Invalid pointerId=&quot;&lt;/span&gt; + mActivePointerId + &lt;span class=&quot;string&quot;&gt;&quot; in onTouchEvent&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; y = event.getY(activePointerIndex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在报错的 View 中，是直接通过 &lt;code&gt;event.getY()&lt;/code&gt; 来获取到纵坐标的值。而 &lt;code&gt;NestedScrollView&lt;/code&gt; 先保存了原先 MotionEvent 的 PointerId，再通过 PointerId 查找到 Index，并判断是否有效，最终通过 &lt;code&gt;event.getY(activePointerIndex)&lt;/code&gt; 获取纵坐标的值。&lt;br&gt;查看源码发现，&lt;code&gt;event.getY()&lt;/code&gt; 相当于 &lt;code&gt;event.getY(0)&lt;/code&gt;，也就是说两者的差别在于对 Index 的获取。那么 Index 和 Id 两者有什么区别呢？&lt;/p&gt;
&lt;h2 id=&quot;Index-vs-ID&quot;&gt;&lt;a href=&quot;#Index-vs-ID&quot; class=&quot;headerlink&quot; title=&quot;Index vs ID&quot;&gt;&lt;/a&gt;Index vs ID&lt;/h2&gt;&lt;p&gt;以下这段来自 &lt;a href=&quot;http://android-developers.blogspot.ru/2010/06/making-sense-of-multitouch.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making Sense of Multitouch&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;At a higher level, touchscreen data from a snapshot in time may not be immediately useful since touch gestures involve motion over time spanning many motion events. A pointer index does not necessarily match up across complex events, it only indicates the data’s position within the MotionEvent. However this is not work that your app has to do itself. Each pointer also has an ID mapping that stays persistent across touch events. You can retrieve this ID for each pointer using MotionEvent.getPointerId(index) and find an index for a pointer ID using MotionEvent.findPointerIndex(id).&lt;/p&gt;
&lt;p&gt;简单的说，Index 只是表示存储在 MotionEvent 中数据的位置，在事件中不一定保持一致。而 ID 在 Touch 事件中是保持一致的。因此我们需要先保存 PointerId 然后再通过它来找到对应的 Index 来获取相应的坐标数据。&lt;/p&gt;
&lt;p&gt;看来得多看看系统源码，能少爬多少坑。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.ru/2010/06/making-sense-of-multitouch.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making Sense of Multitouch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近 App 里报了一个奇怪的 Exception。为什么说奇怪呢，因为它发生的概率不是很大，但每天总有那么几个。这种非必现的问题，解决起来最是麻烦。查了下代码，发现是 &lt;code&gt;event.getY()&lt;/code&gt; 报错，我刚看到的反应是：纳尼，这里都能报错？网上查找了下解决方案，大致都是在  &lt;code&gt;onTouchEvent&lt;/code&gt; 里面或外面包一层 try…catch。能解决问题，可惜不够优雅。 于是花了些时间研究下。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: pointerIndex out of range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.MotionEvent.nativeGetAxisValue(Native Method)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.MotionEvent.getY(MotionEvent.java:&lt;span class=&quot;number&quot;&gt;1994&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.kay.example.DemoView.onTouchEvent(HomeView.java:&lt;span class=&quot;number&quot;&gt;184&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.View.dispatchTouchEvent(View.java:&lt;span class=&quot;number&quot;&gt;7714&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:&lt;span class=&quot;number&quot;&gt;2210&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:&lt;span class=&quot;number&quot;&gt;1945&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;探索&quot;&gt;&lt;a href=&quot;#探索&quot; class=&quot;headerlink&quot; title=&quot;探索&quot;&gt;&lt;/a&gt;探索&lt;/h2&gt;&lt;p&gt;这种非必现的问题，第一步要找到能重现问题的场景。于是我就拼命地戳那个报错的 View，在不懈努力之下，还真重现了几次。异常的栈跟上面是一致的，看来 &lt;code&gt;event.getY()&lt;/code&gt; 真能出错。&lt;br&gt;如果 &lt;code&gt;event.getY()&lt;/code&gt; 这种基础的方法都能出错，那么系统的控件是如何防止这个错误的呢。&lt;br&gt;查看了 &lt;code&gt;NestedScrollView&lt;/code&gt; 的源码，发现它的 &lt;code&gt;onTouchEvent&lt;/code&gt; 的处理果然是有门道的。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在非 UI 线程截图</title>
    <link href="http://kaywu.github.io/2016/09/17/Screenshot-in-Non-UI-Thread/"/>
    <id>http://kaywu.github.io/2016/09/17/Screenshot-in-Non-UI-Thread/</id>
    <published>2016-09-17T10:50:48.000Z</published>
    <updated>2016-09-17T13:46:37.000Z</updated>
    
    <content type="html">&lt;p&gt;截图是一个很常见的需求，但网上常见的截图方法都是在主线程运行的。而这有一个隐患，就是卡。因为截图是通过调用 view.draw(canvas)，而这就会阻塞主线程的绘制流程引起卡顿。&lt;/p&gt;
&lt;p&gt;我司的 App，为了解决卡顿的问题，是在后台线程进行截图的，同样也是调用 view.draw(canvas) 方法，如下方代码所示。第一次看到时挺讶异的，draw 还能在后台线程运行而不报错？介于使用该方法时一直很安全，从未报错，也就默默收起这个疑问。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在后台线程调用该方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Bitmap &lt;span class=&quot;title&quot;&gt;getBitmapByView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinearLayout linearLayout)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; h = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bitmap bitmap = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; linearLayout.getChildCount(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (linearLayout.getChildAt(i).getVisibility() == View.VISIBLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h += linearLayout.getChildAt(i).getHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bitmap = Bitmap.createBitmap(linearLayout.getWidth(), h,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Config.ARGB_8888);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Canvas canvas = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Canvas(bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        linearLayout.draw(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bitmap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但没想到之后有一个类似的方法，仅是将参数从 LinearLayout 改为 ScrollView，竟然会偶发性地报错。报错截图如下：&lt;br&gt;&lt;img src=&quot;/img/thread_exception.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样看来，draw 是只能在主线程调用了？那之前的方法为什么一直没事呢？&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;我们先来研究下这个 Exception 是怎么产生的。&lt;br&gt;从上面的堆栈看出，是由 ViewRootImpl 的 checkThread 引起的。该方法是为了防止我们在非 UI 线程更新 UI。当我们调用 requestLayout、invalidate 时最终都会调用到 checkThread 方法。&lt;/p&gt;
&lt;p&gt;那又是如何调用到 checkThread 的呢？首先我们调用了 ScrollView.draw 方法，通过 super.draw 调用了 View.draw 方法。而 Draw 方法中又包含 onDrawScrollBars，它调用了 invalidate 而使得 checkThread 抛出异常。&lt;/p&gt;
&lt;p&gt;我们大胆猜测 onDrawScrollBars 是 LinearLayout、ScrollView 调用相同方法却引发不同结果的关键。我们可以把 ScrollView 的 scrollbar 设为 none 来验证一下猜想。果不其然，之后就再不报这个错了。看代码的逻辑，LinearLayout、ScrollView 都会调用 onDrawScrollBars。但由于 LinearLayout 的 scrollbar 为 none 直接返回，而 ScrollView 走进了 onDrawScrollBars 的逻辑引发了 invalidate。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;从上面的分析可得，使用 view.draw 后台截图时需要十分小心，不然容易出现类似 ScrollView 的情况而报错。&lt;br&gt;使用 view.draw 方法截的图和屏幕展示出来的效果是一样的。但某些软件的截图功能两者是不一致的。比如高德地图的路线截图保存功能，屏幕上显示的路线没有完全展开，而截图显示的是完全展开的路线。猜测可能在自定义 View 中写了类似 draw 的方法然后调用，原理应该还是通过 canvas 来实现的。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zhaokaiqiang1992/article/details/43410351&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;讨论一下“只能在UI主线程更新View”这件小事&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/aigestudio/article/details/43449123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么我们可以在非UI线程中更新UI&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;截图是一个很常见的需求，但网上常见的截图方法都是在主线程运行的。而这有一个隐患，就是卡。因为截图是通过调用 view.draw(canvas)，而这就会阻塞主线程的绘制流程引起卡顿。&lt;/p&gt;
&lt;p&gt;我司的 App，为了解决卡顿的问题，是在后台线程进行截图的，同样也是调用 view.draw(canvas) 方法，如下方代码所示。第一次看到时挺讶异的，draw 还能在后台线程运行而不报错？介于使用该方法时一直很安全，从未报错，也就默默收起这个疑问。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 博客加速实践</title>
    <link href="http://kaywu.github.io/2016/09/06/blog-speed-up/"/>
    <id>http://kaywu.github.io/2016/09/06/blog-speed-up/</id>
    <published>2016-09-06T14:36:27.000Z</published>
    <updated>2016-09-10T16:51:26.000Z</updated>
    
    <content type="html">&lt;p&gt;最近打开博客的速度特别特别慢。慢到怎样的程度呢？打开篇文章要花 60s 以上，还经常死机。虽然博客没什么人看，但作为本博客最忠实的用户，实在不能忍。就花了点时间排查原因，优化速度。&lt;/p&gt;
&lt;h2 id=&quot;排查&quot;&gt;&lt;a href=&quot;#排查&quot; class=&quot;headerlink&quot; title=&quot;排查&quot;&gt;&lt;/a&gt;排查&lt;/h2&gt;&lt;p&gt;由于博客使用 Hexo 托管在 Github Pages 上，都是些静态文件的显示，速度慢的原因大致就是资源的加载速度问题。使用 Chrome Console 的 Network 工具，发现有一个发送到 fonts.useso.com 请求持续了几十秒。&lt;br&gt;然后在 Hexo 相应的 Theme 文件下使用&lt;code&gt;grep -rI fonts.useso.com .&lt;/code&gt; 搜索相关字符串，发现了相关的 css 文件。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;font-title = &quot;Lato&quot;, Helvetica Neue, Helvetica, Arial, sans-serif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import url(&quot;//fonts.useso.com/css?family=Lato:400,400italic&quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当初搭建博客的时候，为了提升加载速度将字体源从 google fonts 替换为 360 提供的前端公共库 CDN，也就是 fonts.useso.com。没想到现在变得这么不稳定。搜了下国内没有好的替换源，再加上 Lato 字体也就一处使用，索性删了。&lt;br&gt;再次打开 kaywu.github.io，发送到 fonts.useso.com 的请求没有了，速度果然快了不少。&lt;br&gt;但是，这还不够。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;迁移&quot;&gt;&lt;a href=&quot;#迁移&quot; class=&quot;headerlink&quot; title=&quot;迁移&quot;&gt;&lt;/a&gt;迁移&lt;/h2&gt;&lt;p&gt;由于众所周知的原因，Github 连接速度一直很不稳定，时好时坏。要想更快地提升速度，得将博客迁移到国内才行。国内 coding 也提供 Pages 的服务。通过配置 _config.yml，使得 &lt;code&gt;hexo deploy&lt;/code&gt; 时可以同时更新两边的内容。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: https://github.com/KayWu/kaywu.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: https://git.coding.net/KayWu/KayWu.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: coding-pages&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;域名绑定&quot;&gt;&lt;a href=&quot;#域名绑定&quot; class=&quot;headerlink&quot; title=&quot;域名绑定&quot;&gt;&lt;/a&gt;域名绑定&lt;/h2&gt;&lt;p&gt;有了国内国外两处博客，但同时也有了两个地址。最好能统一地址访问，根据不同的情况访问不同的博客。而这就需要我们购买域名并配置 DNS。&lt;br&gt;域名的话我是去 NameCheap 买的，&lt;code&gt;kaywu.xyz&lt;/code&gt;。第一年才 8 块钱。续费的话一年 60 左右，算是比较公道的价格。DNS 使用的是 Dnspod 的免费服务。&lt;br&gt;在购买了域名后，先将域名与 Pages 绑定。Github 是在仓库的根目录下新建一个名为 CNAME 文件，里面写入要绑定域名。coding 是直接在代码-&amp;gt; Pages 服务里配置。&lt;br&gt;接着去 NameCheap 将 Dns 设置为 Custom DNS，并添加 &lt;code&gt;f1g1ns1.dnspod.net&lt;/code&gt;、&lt;code&gt;f1g1ns2.dnspod.net&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/img/namecheap.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;最后去 Dnspod 配置 Dns 解析，根据线路不同解析到不同的博客地址。&lt;br&gt;&lt;img src=&quot;/img/dnspod.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;配置完成后等几个小时使 Dns 解析结果更新，就能使用 &lt;code&gt;kaywu.xyz&lt;/code&gt; 来访问博客，并且将根据国内国外分别访问 GitHub 或 coding。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://quantumman.me/blog/setting-up-a-domain-with-gitHub-pages.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Pages 绑定来自阿里云的域名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/05289a4bc8b2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何搭建一个独立博客——简明Github Pages与Hexo教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近打开博客的速度特别特别慢。慢到怎样的程度呢？打开篇文章要花 60s 以上，还经常死机。虽然博客没什么人看，但作为本博客最忠实的用户，实在不能忍。就花了点时间排查原因，优化速度。&lt;/p&gt;
&lt;h2 id=&quot;排查&quot;&gt;&lt;a href=&quot;#排查&quot; class=&quot;headerlink&quot; title=&quot;排查&quot;&gt;&lt;/a&gt;排查&lt;/h2&gt;&lt;p&gt;由于博客使用 Hexo 托管在 Github Pages 上，都是些静态文件的显示，速度慢的原因大致就是资源的加载速度问题。使用 Chrome Console 的 Network 工具，发现有一个发送到 fonts.useso.com 请求持续了几十秒。&lt;br&gt;然后在 Hexo 相应的 Theme 文件下使用&lt;code&gt;grep -rI fonts.useso.com .&lt;/code&gt; 搜索相关字符串，发现了相关的 css 文件。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;font-title = &quot;Lato&quot;, Helvetica Neue, Helvetica, Arial, sans-serif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import url(&quot;//fonts.useso.com/css?family=Lato:400,400italic&quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当初搭建博客的时候，为了提升加载速度将字体源从 google fonts 替换为 360 提供的前端公共库 CDN，也就是 fonts.useso.com。没想到现在变得这么不稳定。搜了下国内没有好的替换源，再加上 Lato 字体也就一处使用，索性删了。&lt;br&gt;再次打开 kaywu.github.io，发送到 fonts.useso.com 的请求没有了，速度果然快了不少。&lt;br&gt;但是，这还不够。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaywu.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>从代码创建 Shape Drawable</title>
    <link href="http://kaywu.github.io/2016/08/28/Shape-Drawable/"/>
    <id>http://kaywu.github.io/2016/08/28/Shape-Drawable/</id>
    <published>2016-08-28T02:48:34.000Z</published>
    <updated>2016-08-28T05:27:53.000Z</updated>
    
    <content type="html">&lt;p&gt;平时一直是用 xml 来写 Shape Drawable，但由于这次的背景是会根据状态变化不同的颜色，xml 就不能满足要求了。得从代码来构造相关的 Drawable 对象。&lt;/p&gt;
&lt;p&gt;相关 xml 代码如下：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;android:shape&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;rectangle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;corners&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;android:radius&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;10dp&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;stroke&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;android:width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;2px&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;android:color&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#ff000000&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;shape&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看有个相关类叫 ShapeDrawable，根据里面的 Api 实现了类似的效果。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; radius = DensityUtil.dip2px(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;[] outerR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;[]&amp;#123;radius, radius, radius, radius, radius, radius, radius, radius&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RoundRectShape rr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RoundRectShape(outerR, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ShapeDrawable drawable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShapeDrawable(rr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drawable.getPaint().setColor(&lt;span class=&quot;number&quot;&gt;0xff333333&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drawable.getPaint().setStyle(Paint.Style.STROKE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drawable.getPaint().setStrokeWidth(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code.setBackgroundDrawable(drawable);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了代码上相对繁琐之外，还有一点，ShapeDrawable 对 StrokeWidth 的处理不够完善，在边缘处的 Stroke 只显示了一半。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/img/shapedrawable.png&quot; alt=&quot;对比&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;我们来研究下源码，看下对 xml 的解析到底是个怎样的流程。&lt;br&gt;从 view.setBackgroundResource 开始，发现是通过 Resources.getDrawable 来获取到 Drawable。重点是其中的 loadDrawable 方法。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Drawable &lt;span class=&quot;title&quot;&gt;getDrawable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@DrawableRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id, @Nullable Theme theme)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NotFoundException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TypedValue value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mAccessLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = mTmpValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            value = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TypedValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mTmpValue = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getValue(id, value, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Drawable res = loadDrawable(value, id, theme);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mAccessLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mTmpValue == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mTmpValue = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;loadDrawable 方法挺长的，抽取中间最重要的一部分进行说明。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Drawable &lt;span class=&quot;title&quot;&gt;loadDrawable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TypedValue value, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id, Theme theme)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NotFoundException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 上面都是对 Drawable 缓存的检查和处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 下文的 cs 为缓存的 Drawable 具体属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Drawable dr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cs != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr = cs.newDrawable(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isColorDrawable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ColorDrawable(value.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr = loadDrawableForCookie(value, id, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以分析出，当第一次加载 xml 时，最终会调用到 loadDrawableForCookie 来获取到 Drawable。&lt;br&gt;我们再来看下 loadDrawableForCookie 的代码。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Loads a drawable from XML or resources stream.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Drawable &lt;span class=&quot;title&quot;&gt;loadDrawableForCookie&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TypedValue value, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id, Theme theme)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Drawable dr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Trace.traceBegin(Trace.TRACE_TAG_RESOURCES, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;.xml&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; XmlResourceParser rp = loadXmlResourceParser(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    file, id, value.assetCookie, &lt;span class=&quot;string&quot;&gt;&quot;drawable&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dr = Drawable.createFromXml(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, rp, theme);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rp.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; InputStream is = mAssets.openNonAsset(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    value.assetCookie, file, AssetManager.ACCESS_STREAMING);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dr = Drawable.createFromResourceStream(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, value, is, file, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            is.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; NotFoundException rnf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotFoundException(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;File &quot;&lt;/span&gt; + file + &lt;span class=&quot;string&quot;&gt;&quot; from drawable resource ID #0x&quot;&lt;/span&gt; + Integer.toHexString(id));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rnf.initCause(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; rnf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若是 xml 文件，则会调用 Drawable.createFromXml，而 Drawable.createFromXml 会调用 Drawable.createFromInner 方法。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Drawable &lt;span class=&quot;title&quot;&gt;createFromXmlInner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Resources r, XmlPullParser parser, AttributeSet attrs,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Theme theme)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; XmlPullParserException, IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Drawable drawable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String name = parser.getName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;shape&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            drawable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GradientDrawable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlPullParserException(parser.getPositionDescription() +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;: invalid drawable tag &quot;&lt;/span&gt; + name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    drawable.inflate(r, parser, attrs, theme);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; drawable;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;原来，shape 时创建的是 GradientDrawable 而不是 ShapeDrawable，被名字无情地欺骗了，还是源码最靠谱。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;将 ShapeDrawable 替换为 GradientDrawable 就可以完美解决问题了，代码也简洁了许多。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; radius = DensityUtil.dip2px(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GradientDrawable drawable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GradientDrawable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drawable.setCornerRadius(radius);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drawable.setStroke(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xff333333&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code.setBackgroundDrawable(drawable);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;平时一直是用 xml 来写 Shape Drawable，但由于这次的背景是会根据状态变化不同的颜色，xml 就不能满足要求了。得从代码来构造相关的 Drawable 对象。&lt;/p&gt;
&lt;p&gt;相关 xml 代码如下：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;android:shape&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;rectangle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;corners&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;android:radius&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;10dp&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;stroke&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;android:width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;2px&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;android:color&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#ff000000&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;shape&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看有个相关类叫 ShapeDrawable，根据里面的 Api 实现了类似的效果。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; radius = DensityUtil.dip2px(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;[] outerR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;[]&amp;#123;radius, radius, radius, radius, radius, radius, radius, radius&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RoundRectShape rr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RoundRectShape(outerR, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ShapeDrawable drawable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShapeDrawable(rr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drawable.getPaint().setColor(&lt;span class=&quot;number&quot;&gt;0xff333333&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drawable.getPaint().setStyle(Paint.Style.STROKE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drawable.getPaint().setStrokeWidth(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code.setBackgroundDrawable(drawable);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了代码上相对繁琐之外，还有一点，ShapeDrawable 对 StrokeWidth 的处理不够完善，在边缘处的 Stroke 只显示了一半。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Single Number</title>
    <link href="http://kaywu.github.io/2016/08/14/Single-Number/"/>
    <id>http://kaywu.github.io/2016/08/14/Single-Number/</id>
    <published>2016-08-14T15:54:09.000Z</published>
    <updated>2016-08-14T10:52:29.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Single-Number&quot;&gt;&lt;a href=&quot;#Single-Number&quot; class=&quot;headerlink&quot; title=&quot;Single Number&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Single Number&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given an array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;/p&gt;
&lt;p&gt;题目很简单，但有难度的是不使用额外空间。也就是说要使用一些比较 trick 的方法。&lt;br&gt;这让我想到以前碰到的一题，交换 Array 中两元素的位置，同样不使用额外空间，最后解法是使用 bitwise operation。&lt;br&gt;按照这思路去解题的话，很快就想到 xor 运算，相同得 0，不同得 1，题目就引刃而解了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :type nums: List[int]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :rtype: int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result ^= i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Single-Number-II&quot;&gt;&lt;a href=&quot;#Single-Number-II&quot; class=&quot;headerlink&quot; title=&quot;Single Number II&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Single Number II&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;于是题目升级了。&lt;br&gt;Given an array of integers, every element appears three times except for one. Find that single one.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;/p&gt;
&lt;p&gt;由于出现次数是 3 次，我们不能再方便地使用 xor 运算了。那有没有哪个现成的运算可以拿来用？显然没有。那我们只能直接做出类似 xor 的运算了。&lt;br&gt;具体公式的形成可以参考 &lt;a href=&quot;https://discuss.leetcode.com/topic/22821/an-general-way-to-handle-all-this-sort-of-questions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An General Way to Handle All this sort of questions.&lt;/a&gt; 以及 &lt;a href=&quot;https://discuss.leetcode.com/topic/11877/detailed-explanation-and-generalization-of-the-bitwise-operation-method-for-single-numbers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Detailed explanation and generalization of the bitwise operation method for single numbers&lt;/a&gt;。&lt;br&gt;其中 b 存放的是只出现一次的值，a 存放的是出现两次的值。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :type nums: List[int]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :rtype: int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ta = (~a &amp;amp; b &amp;amp; c) | (a &amp;amp; ~b &amp;amp; ~c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b = (~a &amp;amp; ~b &amp;amp; c) | (~a &amp;amp; b &amp;amp; ~c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a = ta&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a | b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Single-Number-III&quot;&gt;&lt;a href=&quot;#Single-Number-III&quot; class=&quot;headerlink&quot; title=&quot;Single Number III&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number-iii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Single Number III&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;又是一个变形。&lt;br&gt;Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;The order of the result is not important. So in the above example, [5, 3] is also correct.&lt;br&gt;Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?&lt;/p&gt;
&lt;p&gt;既然还是出现两次，那自然还是使用 xor 运算。但如果和 I 一样，直接对数组进行 xor 运算，会无法识别那两个数字。有什么办法能把那两个数字分开？&lt;br&gt;我们可以先对数组进行 xor 运算，对得到的结果进行分析。由于两个数肯定不相等，那得到的结果中必有一位为 1。我们再根据该位将数组分成两部分，然后分别进行 xor 运算，就可以得到剩下的两个数。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :type nums: List[int]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :rtype: List[int]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xor = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            xor ^= num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mask = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (xor &amp;amp; mask == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mask = mask &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num &amp;amp; mask:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a ^= num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                b ^= num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [a, b]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://discuss.leetcode.com/topic/22821/an-general-way-to-handle-all-this-sort-of-questions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An General Way to Handle All this sort of questions.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://discuss.leetcode.com/topic/11877/detailed-explanation-and-generalization-of-the-bitwise-operation-method-for-single-numbers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Detailed explanation and generalization of the bitwise operation method for single numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://discuss.leetcode.com/topic/21605/accepted-c-java-o-n-time-o-1-space-easy-solution-with-detail-explanations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Accepted C++/Java O(n)-time O(1)-space Easy Solution with Detail Explanations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Single-Number&quot;&gt;&lt;a href=&quot;#Single-Number&quot; class=&quot;headerlink&quot; title=&quot;Single Number&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number/&quot;&gt;Single Number&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given an array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;/p&gt;
&lt;p&gt;题目很简单，但有难度的是不使用额外空间。也就是说要使用一些比较 trick 的方法。&lt;br&gt;这让我想到以前碰到的一题，交换 Array 中两元素的位置，同样不使用额外空间，最后解法是使用 bitwise operation。&lt;br&gt;按照这思路去解题的话，很快就想到 xor 运算，相同得 0，不同得 1，题目就引刃而解了。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://kaywu.github.io/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>Counting Bits</title>
    <link href="http://kaywu.github.io/2016/07/31/Counting-Bits/"/>
    <id>http://kaywu.github.io/2016/07/31/Counting-Bits/</id>
    <published>2016-07-31T08:48:06.000Z</published>
    <updated>2016-07-31T09:59:08.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/counting-bits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Counting Bits&lt;/a&gt;&lt;br&gt;Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array. For num = 5 you should return [0,1,1,2,1,2].&lt;br&gt;给定一个非负整数 num，返回一个数组，数组中的值为 0 到 num 间相对应整数其二进制表示中 1 的个数。举例来说，若 num 为 5，则返回的数组为 [0,1,1,2,1,2]。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，求二进制表示中 1 的个数是比较简单的。只要把这个数不断地除 2，再把得到的余数相加即可。&lt;br&gt;拿 5 来说，&lt;br&gt;$ 5 ÷ 2 = 2 … 1 $&lt;br&gt;$ 2 ÷ 2 = 1 … 0 $&lt;br&gt;$ 1 ÷ 2 = 0 … 1 $&lt;br&gt;因此二进制 101 中的 1 的个数为 2。&lt;/p&gt;
&lt;p&gt;但若是求 0 到 num 之间所有数的 1 的个数，每个数都这么算就太慢了。我们找找看有什么规律可以让我们省掉一些计算。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16&amp;#10;0  1  1  2  1  2  2  3  1  2  2  3  2  3  3  4  1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1 的个数看上去好像有点重复性，但没找到具体的规律。在 2 的指数次时，如 4、8 时，个数都变为了 1。仔细想想也很简单，4、8 二进制表示分别为 100、1000，之前的数进 1 而使 1 的个数锐减。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;000 001 010 011 100 101 110 111&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那再从二进制的角度看看。上面是 0 到 7 的二进制表示。仔细看的话，后 4 个数字若除去第 1 位，与前 4 个数字的规律是一样的。也就是进位之后，除第 1 位，其他位数的变化和以前是重复的。&lt;br&gt;[2,3] 与 [0,1] 的个位数变化是相同的，[4,7] 和 [0,3] 的个十位变化相同，[8,15] 和 [0,7] 的个十百位变化相同。这样我们就可以省略掉大量重复的运算，用 $O(n)$ 的时间计算出结果。&lt;/p&gt;
&lt;p&gt;具体算法如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countBits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :type num: int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :rtype: List[int]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            initial = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result = result + list(map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, result))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                initial *= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num &amp;lt; initial:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:num+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/counting-bits/&quot;&gt;Counting Bits&lt;/a&gt;&lt;br&gt;Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array. For num = 5 you should return [0,1,1,2,1,2].&lt;br&gt;给定一个非负整数 num，返回一个数组，数组中的值为 0 到 num 间相对应整数其二进制表示中 1 的个数。举例来说，若 num 为 5，则返回的数组为 [0,1,1,2,1,2]。&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://kaywu.github.io/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 性能优化实践小记</title>
    <link href="http://kaywu.github.io/2016/07/24/Performance-Improvement/"/>
    <id>http://kaywu.github.io/2016/07/24/Performance-Improvement/</id>
    <published>2016-07-24T07:34:37.000Z</published>
    <updated>2016-07-24T10:21:10.000Z</updated>
    
    <content type="html">&lt;p&gt;说来惭愧，看过那么多 Android 性能优化的文章，但这块实战经验微乎其微。抱着已经看过猪跑了，怎么着也得吃上猪肉的心态，尝试去解决某页面的卡顿。实践下来觉得是一次不错的经验，写文章记录下。&lt;/p&gt;
&lt;h2 id=&quot;发现卡顿&quot;&gt;&lt;a href=&quot;#发现卡顿&quot; class=&quot;headerlink&quot; title=&quot;发现卡顿&quot;&gt;&lt;/a&gt;发现卡顿&lt;/h2&gt;&lt;p&gt;在解决卡顿之前，你得发现哪里卡顿。这里多亏了 &lt;a href=&quot;https://github.com/markzhai/AndroidPerformanceMonitor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockCanary&lt;/a&gt;，它是 Android 上一个性能监控组件，能很方便地发现卡顿的原因。&lt;br&gt;下面是 BlockCanary 显示卡顿信息的截图。&lt;br&gt;&lt;img src=&quot;/img/performance_improve_0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以看出，卡顿是由于 DateHelper.parseString 而引起的。&lt;br&gt;那接下来让我们看看 parseString 的具体代码。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Date &lt;span class=&quot;title&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String dateString)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SimpleDateFormat dateFormat = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;, Locale.getDefault());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dateFormat.parse(dateString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很简单的一段代码，将规定格式的 String 转换为 Date 对象，简单到貌似没有可以出错及优化的空间。&lt;br&gt;至此我们陷入了一个死胡同。我们查找到了疑似卡顿的原因，但是无法确认也不知如何优化。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;TraceView&quot;&gt;&lt;a href=&quot;#TraceView&quot; class=&quot;headerlink&quot; title=&quot;TraceView&quot;&gt;&lt;/a&gt;TraceView&lt;/h2&gt;&lt;p&gt;这时候，我们就要借助 TraceView 的力量了。TraceView 是一个性能分析的工具，记录了应用程序中每个函数的执行时间。具体使用方法可以参考&lt;a href=&quot;http://blog.csdn.net/yanbober/article/details/48394201&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android应用开发性能优化完全分析&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;/img/performance_improve_1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;上图是 TraceView 部分结果的截图。Excl CPU Time 指当前方法（不包含内部调运的子方法）执行占用的CPU时间，这里我们可以看到一个非常显眼的数据 16.6%。由 NativeDecimalFormat.open 向上层层查找调用它的方法，我们可以查找到 SimpleDateFormat.&amp;lt;init&amp;gt;，最终查找到 DateHelper.parseString，终于露出马脚了。从 Calls+Recur Calls/Total 的数值来分析，我们可以看出 DateHelper.parseString 被调用了上百次，而每一次调用都会新建 SimpleDateFormat 对象，使得调用了 NativeDecimalFormat.open 方法，从而造成了卡顿。&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;既然卡顿的原因是因为每次调用都会新建 SimpleDateFormat 对象，那么只要重用对象就可以解决。注意，最好在修改之前先添加一下单元测试，养成一个好习惯。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; DateFormat DEFAULT_FORMAT = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;, Locale.getDefault());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Date &lt;span class=&quot;title&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String dateString)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DEFAULT_FORMAT.parse(dateString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后再通过 TraceView 进行了对比，就发现前几十项中 DateHelper.parseString 的身影消失不见了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在优化之前，我完全想不到卡顿的原因竟然是这样。因此，运用工具来快速、准确地定位卡顿的原因就显得很关键了，如 BlockCanary、TraceView 等。找准了原因，优化就是水到渠成的事了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/markzhai/AndroidPerformanceMonitor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockCanary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/yanbober/article/details/48394201&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android应用开发性能优化完全分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;说来惭愧，看过那么多 Android 性能优化的文章，但这块实战经验微乎其微。抱着已经看过猪跑了，怎么着也得吃上猪肉的心态，尝试去解决某页面的卡顿。实践下来觉得是一次不错的经验，写文章记录下。&lt;/p&gt;
&lt;h2 id=&quot;发现卡顿&quot;&gt;&lt;a href=&quot;#发现卡顿&quot; class=&quot;headerlink&quot; title=&quot;发现卡顿&quot;&gt;&lt;/a&gt;发现卡顿&lt;/h2&gt;&lt;p&gt;在解决卡顿之前，你得发现哪里卡顿。这里多亏了 &lt;a href=&quot;https://github.com/markzhai/AndroidPerformanceMonitor&quot;&gt;BlockCanary&lt;/a&gt;，它是 Android 上一个性能监控组件，能很方便地发现卡顿的原因。&lt;br&gt;下面是 BlockCanary 显示卡顿信息的截图。&lt;br&gt;&lt;img src=&quot;/img/performance_improve_0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以看出，卡顿是由于 DateHelper.parseString 而引起的。&lt;br&gt;那接下来让我们看看 parseString 的具体代码。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Date &lt;span class=&quot;title&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String dateString)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SimpleDateFormat dateFormat = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;, Locale.getDefault());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dateFormat.parse(dateString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很简单的一段代码，将规定格式的 String 转换为 Date 对象，简单到貌似没有可以出错及优化的空间。&lt;br&gt;至此我们陷入了一个死胡同。我们查找到了疑似卡顿的原因，但是无法确认也不知如何优化。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 存储笔记</title>
    <link href="http://kaywu.github.io/2016/07/17/Android-Storage-Note/"/>
    <id>http://kaywu.github.io/2016/07/17/Android-Storage-Note/</id>
    <published>2016-07-17T11:52:03.000Z</published>
    <updated>2016-09-10T16:37:43.000Z</updated>
    
    <content type="html">&lt;p&gt;一直搞不清 Android 常用文件夹的位置，做笔记整理下。顺便记录下自己在存储文件时踩的坑。&lt;br&gt;以包名为 com.kay.example 为例。&lt;/p&gt;
&lt;h3 id=&quot;内部储存&quot;&gt;&lt;a href=&quot;#内部储存&quot; class=&quot;headerlink&quot; title=&quot;内部储存&quot;&gt;&lt;/a&gt;内部储存&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context.getCacheDir /data/data/com.kay.example/cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getFileDir /data/data/com.kay.example/files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getDir /data/data/com.kay.example&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;外部存储&quot;&gt;&lt;a href=&quot;#外部存储&quot; class=&quot;headerlink&quot; title=&quot;外部存储&quot;&gt;&lt;/a&gt;外部存储&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context.getExternalCacheDir /sdcard/Android/data/com.example.kay/cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getExternalFilesDir /sdcard/Android/data/com.example.kay/files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Environment.getExternalStorageDirectory /sdcard/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES) /sdcard/Movies&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;外置存储这方面没太多接触，有兴趣的人可以看下 &lt;a href=&quot;http://blog.desmondyao.com/2016/05/04/android-storage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 存储挖坑记&lt;/a&gt;，这方面讲解得挺详细的。&lt;/p&gt;
&lt;h3 id=&quot;缓存清理&quot;&gt;&lt;a href=&quot;#缓存清理&quot; class=&quot;headerlink&quot; title=&quot;缓存清理&quot;&gt;&lt;/a&gt;缓存清理&lt;/h3&gt;&lt;p&gt;做下载功能时，发现下载记录经常被清。研究了下，推测有两个原因。&lt;br&gt;一是把下载记录存到了 &lt;code&gt;/data/data/com.kay.example/cache&lt;/code&gt; 下，而 Android 自带的清除缓存功能会把内部储存和外部储存的缓存文件夹同时清除，也就是 &lt;code&gt;/data/data/com.example.kay/cache&lt;/code&gt; 以及 &lt;code&gt;/sdcard/Android/data/com.example/cache&lt;/code&gt;。除此之外，像腾讯管家、百度管家等软件在空间清理时也会调动系统的清除缓存功能。&lt;br&gt;二是把下载的文件放到了 &lt;code&gt;/sdcard/Android/data/com.example.kay/files&lt;/code&gt; 下。而 360 手机管家清理空间时会自动把该文件夹识别为日志文件然后清除。清理时该文件夹是默认勾选的，且隐藏得很深。当时发现这一点时我真是一脸懵逼，然后试了下某个大厂的 App，发现它家该文件夹倒是被视为重要文件，不默认勾选。竟然还区别待遇，只好乖乖地修改了下载的位置。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.desmondyao.com/2016/05/04/android-storage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 存储挖坑记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ZhaoKaiQiang/AndroidDifficultAnalysis/blob/master/06.%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%E5%8F%AF%E4%BB%A5%E6%94%BE%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F%E5%AE%83%E4%BB%AC%E5%90%84%E8%87%AA%E7%9A%84%E7%89%B9%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;缓存文件可以放在哪里？它们各自的特点是什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://liaohuqiu.net/cn/posts/storage-in-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android存储使用参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一直搞不清 Android 常用文件夹的位置，做笔记整理下。顺便记录下自己在存储文件时踩的坑。&lt;br&gt;以包名为 com.kay.example 为例。&lt;/p&gt;
&lt;h3 id=&quot;内部储存&quot;&gt;&lt;a href=&quot;#内部储存&quot; class=&quot;headerlink&quot; title=&quot;内部储存&quot;&gt;&lt;/a&gt;内部储存&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context.getCacheDir /data/data/com.kay.example/cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getFileDir /data/data/com.kay.example/files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getDir /data/data/com.kay.example&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;外部存储&quot;&gt;&lt;a href=&quot;#外部存储&quot; class=&quot;headerlink&quot; title=&quot;外部存储&quot;&gt;&lt;/a&gt;外部存储&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context.getExternalCacheDir /sdcard/Android/data/com.example.kay/cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getExternalFilesDir /sdcard/Android/data/com.example.kay/files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Environment.getExternalStorageDirectory /sdcard/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES) /sdcard/Movies&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Fragment 源码笔记</title>
    <link href="http://kaywu.github.io/2016/07/03/fragment/"/>
    <id>http://kaywu.github.io/2016/07/03/fragment/</id>
    <published>2016-07-03T07:30:27.000Z</published>
    <updated>2016-07-03T09:02:59.000Z</updated>
    
    <content type="html">&lt;p&gt;说来惭愧，用了 Fragment 这么久却没怎么看过它的源码。原因么，一个字懒。每次碰到疑难杂症，Copy and Paste from StackOverflow。前几天看了&lt;a href=&quot;http://www.jianshu.com/p/f2fcc670afd6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通过源码解析 Fragment 启动过程&lt;/a&gt;，跟着流程走了遍，颇有体会，下面就简单记录下几个要点。&lt;/p&gt;
&lt;h2 id=&quot;Transaction-commit-是异步操作&quot;&gt;&lt;a href=&quot;#Transaction-commit-是异步操作&quot; class=&quot;headerlink&quot; title=&quot;Transaction commit 是异步操作&quot;&gt;&lt;/a&gt;Transaction commit 是异步操作&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getSupportFragmentManager().beginTransaction().add(R.id.container, fragment).commit();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面是常常使用的一段代码。&lt;code&gt;beginTransacton()&lt;/code&gt; 返回的是 BackStackRecord。BackStackRecord 的 &lt;code&gt;commit()&lt;/code&gt; 最终调用的是 &lt;code&gt;mHandler.post()&lt;/code&gt;。&lt;code&gt;post()&lt;/code&gt; 中的操作不是同步执行的，而是在 UI 线程的 Handler 队列的尾部被提交。&lt;/p&gt;
&lt;h2 id=&quot;Fragment-的状态同步&quot;&gt;&lt;a href=&quot;#Fragment-的状态同步&quot; class=&quot;headerlink&quot; title=&quot;Fragment 的状态同步&quot;&gt;&lt;/a&gt;Fragment 的状态同步&lt;/h2&gt;&lt;p&gt;依旧是上面那句代码，&lt;code&gt;beginTransaction.add(R.id.container, fragment)&lt;/code&gt; 最终会调用 &lt;code&gt;mManager.addFragment(f, false)&lt;/code&gt;。第二个参数含义为 moveToStateNow，表示是否立即变更 fragment 的状态。由于该参数为 false，因此在 addFragment 时，fragment 不会立即更变其状态，也就意味着 fragment 的回调函数，如 onAttach、onCreate 不会被调用。但 addFragment 会将 fragment 添加到 FragmentManagerImpl 的 mAdded、mActive 队列中。&lt;br&gt;当下一次 FragmentManagerImpl 的 &lt;code&gt;moveToState(int, boolean)&lt;/code&gt; 被调用时，一般发生在 Activity 调用 FragmentManagerImpl 相关的方法时，如 Activity onCreate 时会调用 FragmentManagerImpl 的 dispatchCreate 方法，FragmentManagerImpl 会遍历 mActive 队列并调用 &lt;code&gt;moveToState(f, newState, transit, transitStyle, false)&lt;/code&gt;，使 fragment 的状态和最新的状态同步。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/f2fcc670afd6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通过源码解析 Fragment 启动过程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;说来惭愧，用了 Fragment 这么久却没怎么看过它的源码。原因么，一个字懒。每次碰到疑难杂症，Copy and Paste from StackOverflow。前几天看了&lt;a href=&quot;http://www.jianshu.com/p/f2fcc670afd6&quot; t
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Longest Palindromic Substring</title>
    <link href="http://kaywu.github.io/2016/06/26/Longest-Palindromic-Substring/"/>
    <id>http://kaywu.github.io/2016/06/26/Longest-Palindromic-Substring/</id>
    <published>2016-06-26T06:12:18.000Z</published>
    <updated>2016-07-03T12:48:47.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LeetCode 5. Longest Palindromic Substring&lt;/a&gt;&lt;br&gt;Given a string S, find the longest palindromic substring in S.&lt;br&gt;给定一个字符串 S，找到其中最长的连续回文串。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;暴力法&quot;&gt;&lt;a href=&quot;#暴力法&quot; class=&quot;headerlink&quot; title=&quot;暴力法&quot;&gt;&lt;/a&gt;暴力法&lt;/h2&gt;&lt;p&gt;最先想到的是暴力法，找到所有可能的字符串然后判断是否是回文。可能的字符串一共有 $n(n-1)/2$，判断一个字符串是否为回文所需时间为 $O(n)$，则时间复杂度为 $O(n^3)$，效率太低。&lt;/p&gt;
&lt;h2 id=&quot;从中心往外延伸&quot;&gt;&lt;a href=&quot;#从中心往外延伸&quot; class=&quot;headerlink&quot; title=&quot;从中心往外延伸&quot;&gt;&lt;/a&gt;从中心往外延伸&lt;/h2&gt;&lt;p&gt;我们可以利用回文的特点来提高算法的效率。从单个字符或一对字符开始，然后慢慢向两边扩展，若两边添加的为相同字符则继续，否则开始下一轮。这样我们就可以把所需判断的字符串个数，从 $n(n-1)/2$ 减少为 $2n -1$，时间复杂度降为 $O(n^2)$。&lt;br&gt;具体 Python 代码如下。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, s)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       :type s: str&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       :rtype: str&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        start = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(s)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            len1 = self.expandString(s, index, index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            len2 = self.expandString(s, index, index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = max(len1, len2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; result &amp;gt; (end - start + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                end = index + result // &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                start = end - result + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s[start:end + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expandString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, s, left, right)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        begin = left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end = right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; begin &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; end &amp;lt; len(s) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; s[begin] == s[end]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            begin -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; end - begin - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Manacher’s-Algorithm&quot;&gt;&lt;a href=&quot;#Manacher’s-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Manacher’s Algorithm&quot;&gt;&lt;/a&gt;Manacher’s Algorithm&lt;/h2&gt;&lt;p&gt;是否还有继续提升的空间呢？答案是肯定的。有一种神奇的算法 Manacher’s Algorithm，时间复杂度竟然只有 $O(n)$。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# c # a # b # a # a # b # a # a #&amp;#10;0 1 0 1 0 3 0 1 6 1 0 ?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;举个例子来简单说明这个算法是怎么工作的。&lt;br&gt;上面一行是字符串，其中 # 是插入到字符之间的特殊符号，使我们可以统一处理奇数长和偶数长的回文。&lt;br&gt;下面一行代表以当前位置为中心，最长回文的长度。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    [         i&amp;#39;c i         ]&amp;#10;# c # a # b # a # a # b # a # a #&amp;#10;0 1 0 1 0 3 0 1 6 1 0 ?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设我们现在已经知道 $c$ 及之前位置最长回文的长度，那么 $i$ 位置上的数字应该是多少？&lt;br&gt;由于回文的对称性，$i$ 位置上的数字应该与 $i’$ 位置上的相同，即 1。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    [     j&amp;#39;    c     j     ]&amp;#10;# c # a # b # a # a # b # a # a #&amp;#10;0 1 0 1 0 3 0 1 6 1 0 ?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么 $j$ 的数字呢，是否也和 $j’$ 一样？&lt;br&gt;不巧的是，以 $c$ 为中心的回文只能保证在 [ ] 之间的对称性，对超出其范围的无能为力。&lt;br&gt;由于 $j$ 和 ] 相差 3，$j’$ 的数字为 3，因此 $j$ 的数字必定大于等于 3。之后再往两边延伸，发现最终为 5。&lt;/p&gt;
&lt;p&gt;关于算法更详细的说明可以看&lt;a href=&quot;http://articles.leetcode.com/longest-palindromic-substring-part-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;br&gt;下面是 Manacher’s Algorithm 的 python 代码。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longestPalindrome2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, s)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newS = &lt;span class=&quot;string&quot;&gt;&#39;^#%s#$&#39;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt;.join(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = len(newS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pArr = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] * length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        center, right, i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i_mirror = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * center - i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; right &amp;gt; i:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pArr[i] = min(right - i, pArr[i_mirror])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pArr[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; newS[i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + pArr[i]] == newS[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - pArr[i]]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pArr[i] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i + pArr[i] &amp;gt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                center = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                right = i + pArr[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxLen, centerIndex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(length):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pArr[j] &amp;gt; maxLen:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                maxLen = pArr[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                centerIndex = j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        start = (centerIndex - maxLen - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) // &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s[start:start + maxLen]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://articles.leetcode.com/longest-palindromic-substring-part-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://articles.leetcode.com/longest-palindromic-substring-part-ii/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.com/articles/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/articles/longest-palindromic-substring/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot;&gt;LeetCode 5. Longest Palindromic Substring&lt;/a&gt;&lt;br&gt;Given a string S, find the longest palindromic substring in S.&lt;br&gt;给定一个字符串 S，找到其中最长的连续回文串。&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://kaywu.github.io/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 HAProxy 加速  Shadowsocks</title>
    <link href="http://kaywu.github.io/2016/06/19/Shadowsocks-HAProxy/"/>
    <id>http://kaywu.github.io/2016/06/19/Shadowsocks-HAProxy/</id>
    <published>2016-06-19T01:55:12.000Z</published>
    <updated>2016-06-19T03:28:51.000Z</updated>
    
    <content type="html">&lt;p&gt;最近用 ss 上网的速度越来越慢，工作日晚上 Google 都很难连上。ping 了下服务器，发现都在 300、400 ms，或者 time_out，得想些方法加速一下。&lt;br&gt;后来发现 ss 支持中继，那么只要有一个服务器，连接自己电脑和 ss 服务器都很快的话就能实现加速。下面选了阿里云作为中继服务器进行实践。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#23458;&amp;#25143;&amp;#31471; &amp;#60; - &amp;#62; &amp;#20013;&amp;#32487;&amp;#26381;&amp;#21153;&amp;#22120; &amp;#60; - &amp;#62; Shadowsocks &amp;#26381;&amp;#21153;&amp;#22120;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在自己电脑上 ping 中继服务器，中继服务器 ping ss 服务器，延迟分别为 10+ ms、60+ ms。阿里云的出口带宽果然不一样。加速条件满足，开始进入安装配置。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;HAProxy&quot;&gt;&lt;a href=&quot;#HAProxy&quot; class=&quot;headerlink&quot; title=&quot;HAProxy&quot;&gt;&lt;/a&gt;HAProxy&lt;/h2&gt;&lt;p&gt;简单介绍下 HAProxy，HAProxy 是一个高效的负载均衡软件，可以实现 TCP/HTTP 的代理。这里使用它将我们发给它的请求转发给 ss 服务器。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 以 CentOS &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 为例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install haproxy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;编辑 &lt;code&gt;/etc/haproxy/haproxy.cfg&lt;/code&gt;，保存以下内容&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;ulimit&lt;/span&gt;-n  &lt;span class=&quot;number&quot;&gt;51200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mode    tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        option  dontlognull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        contimeout &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clitimeout &lt;span class=&quot;number&quot;&gt;150000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        srvtimeout &lt;span class=&quot;number&quot;&gt;150000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;frontend ss-in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; *:&lt;span class=&quot;number&quot;&gt;8388&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        default_backend ss-out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;backend ss-out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server server1 &lt;span class=&quot;number&quot;&gt;222.222&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;222.222&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2222&lt;/span&gt; maxconn &lt;span class=&quot;number&quot;&gt;20480&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;*:8388&lt;/code&gt; 中的 8388 是中继服务器接受请求的端口，&lt;code&gt;222.222.222.222:2222&lt;/code&gt; 是 ss 服务器的 IP 地址加端口号。&lt;br&gt;然后执行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;service haproxy restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;HAProxy 就会在后台进行启动。可以使用 &lt;code&gt;ps -ef&lt;/code&gt; 查看进程，&lt;code&gt;lsof -i&lt;/code&gt; 查看端口占用情况来验证 HAProxy 是否已经运行。若无法连接中继服务器，使用 &lt;code&gt;iptables -L&lt;/code&gt; 查看防火墙规则是否有问题。&lt;/p&gt;
&lt;p&gt;客户端的配置，只要将原来配置的 ip 地址和端口更换成中继服务器的 ip 地址和端口号就可以了。&lt;/p&gt;
&lt;h3 id=&quot;未解之迷&quot;&gt;&lt;a href=&quot;#未解之迷&quot; class=&quot;headerlink&quot; title=&quot;未解之迷&quot;&gt;&lt;/a&gt;未解之迷&lt;/h3&gt;&lt;p&gt;加速之后，公司电脑和手机使用都没问题，个人电脑却死活连不上去，一直显示 &lt;code&gt;ERR_CONNECTION_CLOSED&lt;/code&gt;，将原来的 Shadowsocks Mac 客户端替换成 &lt;code&gt;Shadowsocks-libev&lt;/code&gt; 之后才行，但明明公司电脑使用的客户端是一样的。&lt;/p&gt;
&lt;h2 id=&quot;其他加速方法&quot;&gt;&lt;a href=&quot;#其他加速方法&quot; class=&quot;headerlink&quot; title=&quot;其他加速方法&quot;&gt;&lt;/a&gt;其他加速方法&lt;/h2&gt;&lt;p&gt;除 HAProxy 加速之外，还可以使用微林加速，具体可以参考代码家的&lt;a href=&quot;http://www.jianshu.com/p/475182d8c503&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;提速 Shadowsocks&lt;/a&gt;。还有个更偷懒的方法，直接购买 CN2 线路的 Shadowsocks。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Setup-a-Shadowsocks-relay&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近用 ss 上网的速度越来越慢，工作日晚上 Google 都很难连上。ping 了下服务器，发现都在 300、400 ms，或者 time_out，得想些方法加速一下。&lt;br&gt;后来发现 ss 支持中继，那么只要有一个服务器，连接自己电脑和 ss 服务器都很快的话就能实现加速。下面选了阿里云作为中继服务器进行实践。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#23458;&amp;#25143;&amp;#31471; &amp;#60; - &amp;#62; &amp;#20013;&amp;#32487;&amp;#26381;&amp;#21153;&amp;#22120; &amp;#60; - &amp;#62; Shadowsocks &amp;#26381;&amp;#21153;&amp;#22120;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在自己电脑上 ping 中继服务器，中继服务器 ping ss 服务器，延迟分别为 10+ ms、60+ ms。阿里云的出口带宽果然不一样。加速条件满足，开始进入安装配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://kaywu.github.io/categories/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>git submodule vs git subtree</title>
    <link href="http://kaywu.github.io/2016/06/10/git-submodule-vs-git-subtree/"/>
    <id>http://kaywu.github.io/2016/06/10/git-submodule-vs-git-subtree/</id>
    <published>2016-06-10T05:47:34.000Z</published>
    <updated>2016-09-06T14:36:57.000Z</updated>
    
    <content type="html">&lt;p&gt;Git 仓库 A 包含 Git 仓库 B，若在 B 中做改动，一些诡异的情况会发生。若 B 中的改动没有提交，A 看起来就像什么都没发生一样。而当改动提交之后，A 中就会显示类似 &lt;code&gt;Subproject commit 3fd38c0c070ed6b44c2e9b9551343bc75522ce25&lt;/code&gt; 的信息（git diff 显示的结果）。&lt;br&gt;而提交 A 到远程仓库后再拉取下来，仓库 B 竟是一个空的目录。必须再拉取 B 的代码才能得到一个完整的仓库。&lt;br&gt;针对这些问题有两种解决方法，分别是 git submodule 和 git subtree。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-submodule&quot;&gt;&lt;a href=&quot;#git-submodule&quot; class=&quot;headerlink&quot; title=&quot;git submodule&quot;&gt;&lt;/a&gt;git submodule&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 新增 submodule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git submodule add https://github.com/KayWu/ExViewPager child&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会将 git 仓库中的代码拷贝到 child 目录中，同时添加 .gitmodules 配置文件。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// .gitmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[submodule &lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path = child&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url = https://github.com/KayWu/ExViewPager&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;child 目录被当做一个独立的 Git 仓库，所有的 Git 命令都可以在 child 目录以及上层项目下独立工作。&lt;br&gt;尽管 child 是子目录，当你不在 child 目录时并不记录它的内容。取而代之的是，当你在那个子目录里修改并提交时，子项目会通知那里的 HEAD 已经发生变更并记录你当前正在工作的那个提交。而此时上层项目会显示 child 目录下的改动，将它记录成来自那个仓库的一个特殊的提交，如同上文举例的 &lt;code&gt;Subproject commit 3fd38c0c070ed6b44c2e9b9551343bc75522ce25&lt;/code&gt;。&lt;br&gt;若他人要克隆该项目，会发现 child 目录为空。这时需要执行 &lt;code&gt;git submodule init&lt;/code&gt; 来初始化你的本地配置文件，以及 &lt;code&gt;git submodule update&lt;/code&gt; 拉取数据并切换到合适的提交。而后每次从主项目拉取子模块的变更时，由于主项目只更新了子模块提交的引用而没有更新子模块目录下的代码，必须执行 &lt;code&gt;git submodule update&lt;/code&gt; 来更新子模块代码。&lt;/p&gt;
&lt;h2 id=&quot;git-subtree&quot;&gt;&lt;a href=&quot;#git-subtree&quot; class=&quot;headerlink&quot; title=&quot;git subtree&quot;&gt;&lt;/a&gt;git subtree&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 添加 subtree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// git subtree add --prefix=目录 项目地址 分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree add --prefix=child https://github.com/KayWu/ExViewPager master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同于 git submodule，此时的 child 仅仅是含有相关代码的普通目录，而不是一个独立的 Git 仓库。因此当在 child 进行修改时，上层项目会立刻记录其改动，而不是像之前那样先在子项目中提交才能进行记录。克隆上层仓库时 child 目录也不再为空。但同时，child 也不能再执行独立的 Git 命令，只有 git subtree 相关的操作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 提交改动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// git subtree push --prefix=目录 项目地址 分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree push --prefix=child https://github.com/KayWu/ExViewPager master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提交改动时 Git 会遍历所有的 commit，从中找出 child 相关的修改然后提交到 child 的项目地址上。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 更新改动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// git subtree pull --prefix=目录 项目地址 分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree pull --prefix=child https://github.com/KayWu/ExViewPager master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更新 child 目录下的代码。&lt;br&gt;简便起见，可将项目地址添加为 remote 方便后续操作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 添加 remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add remote child https://github.com/KayWu/ExViewPager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 用 remote 替换项目地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree push --prefix=child child master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单来说，submodule 和 subtree 最大的区别是，submodule 保存的是子仓库的 link，而 subtree 保存的是子仓库的 copy。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/31769820/differences-between-git-submodule-and-subtree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Differences between git submodule and subtree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 工具 - 子模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://delai.me/code/git-subtree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用 Git Subtree 在多个 Git 项目间双向同步子项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Git 仓库 A 包含 Git 仓库 B，若在 B 中做改动，一些诡异的情况会发生。若 B 中的改动没有提交，A 看起来就像什么都没发生一样。而当改动提交之后，A 中就会显示类似 &lt;code&gt;Subproject commit 3fd38c0c070ed6b44c2e9b9551343bc75522ce25&lt;/code&gt; 的信息（git diff 显示的结果）。&lt;br&gt;而提交 A 到远程仓库后再拉取下来，仓库 B 竟是一个空的目录。必须再拉取 B 的代码才能得到一个完整的仓库。&lt;br&gt;针对这些问题有两种解决方法，分别是 git submodule 和 git subtree。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://kaywu.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 线程池笔记</title>
    <link href="http://kaywu.github.io/2016/05/29/ThreadPoolExecutor/"/>
    <id>http://kaywu.github.io/2016/05/29/ThreadPoolExecutor/</id>
    <published>2016-05-29T02:58:55.000Z</published>
    <updated>2016-06-10T03:55:38.000Z</updated>
    
    <content type="html">&lt;p&gt;下面是一种最为简单的线程创建和回收的方法。它创建了一个线程，并在 run() 方法结束后，自动回收该线程。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码在简单的应用系统中没有太大问题。但在真实环境下，这种为“为每一个任务分配一个线程”的方法存在较多的缺陷，它没有限制可创建线程的数量，并且会频繁地创建和销毁线程。我们可以通过合理地使用线程池来克服这些缺陷。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Executors&quot;&gt;&lt;a href=&quot;#Executors&quot; class=&quot;headerlink&quot; title=&quot;Executors&quot;&gt;&lt;/a&gt;Executors&lt;/h2&gt;&lt;p&gt;Executors 通过静态工厂方法提供了 4 种线程池。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;newFixedThreadPool(int)：一个固定长度的线程池。每当提交一个任务时就创建一个线程，直至达到线程池的最大数量，这时线程池的规模将不再变化。此后有新任务提交时，线程池中若有空闲线程，则立即执行，若没有，则在任务队列等待。&lt;/li&gt;
&lt;li&gt;newCachedThreadPool()：可缓存的无界线程池。当任务超过线程数量时则创建新线程，当线程空闲时间超过 60s 时则自动回收。&lt;/li&gt;
&lt;li&gt;newSingleThreadExecutors()：只有一个线程的线程池，保证任务按照其提交的顺序执行。&lt;/li&gt;
&lt;li&gt;newScheduledThreadPool(int)：创建一个定时或周期性执行任务的线程池，该方法可指定线程池的核心线程个数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ThreadPoolExucutor&quot;&gt;&lt;a href=&quot;#ThreadPoolExucutor&quot; class=&quot;headerlink&quot; title=&quot;ThreadPoolExucutor&quot;&gt;&lt;/a&gt;ThreadPoolExucutor&lt;/h2&gt;&lt;p&gt;上述的简单工厂方法最终都是调用 ThreadPoolExecutor 的构造函数来实现的。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; corePoolSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maximumPoolSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; keepAliveTime,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              TimeUnit unit,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ThreadFactory threadFactory)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         threadFactory, defaultHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;corePoolSize（线程池基本大小）：当提交一个任务到线程池时，若线程池已创建的线程数小于 corePoolSize，即使存在空闲线程也会创建一个新线程来执行该任务。&lt;/li&gt;
&lt;li&gt;maximumPoolSize（线程池最大大小）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于 maximumPoolSize，则线程池会创建新的线程去执行任务。&lt;/li&gt;
&lt;li&gt;keepAliveTime（线程活动保持时间）：当线程池的线程个数多于 corePoolSize 时，线程的空闲时间超过 keepAliveTime 则会终止。但调用 allowCoreThreadTimeOut(boolean) 方法也可将此超时策略应用于核心线程。&lt;/li&gt;
&lt;li&gt;TimeUnit（线程活动保持时间的单位）：DAYS、HOURS、MINUTES、SECONDS、MILLISECONDS、MICROSECONDS、NANOSECONDS&lt;/li&gt;
&lt;li&gt;workQueue（任务队列）：用于保存等待执行任务的阻塞队列。主要有以下几种：&lt;ul&gt;
&lt;li&gt;ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按  FIFO（先进先出）原则对元素进行排序。&lt;/li&gt;
&lt;li&gt;LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按 FIFO （先进先出） 排序元素。静态工厂方法 Executors.newFixedThreadPool() 使用了这个队列。&lt;/li&gt;
&lt;li&gt;SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态。静态工厂方法Executors.newCachedThreadPool使用了这个队列。&lt;/li&gt;
&lt;li&gt;PriorityBlockingQueue：一个具有优先级的无限阻塞队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;threadFactory：创建线程的工厂。&lt;/li&gt;
&lt;li&gt;handler（饱和策略）：当任务太多时来不及处理时，如何拒绝任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/executors.png&quot; alt=&quot;流程&quot;&gt;&lt;br&gt;当提交一个新任务到线程池时，线程池的处理流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先线程池判断核心线程池是否已满？没满，创建一个工作线程来执行任务。满了，则进入下个流程。corePoolSize 为 0 时是一种特殊情况, 此时即使工作队列没有饱和, 向线程池第一次提交任务时仍然会创建新的线程。&lt;/li&gt;
&lt;li&gt;其次线程池判断是否有空闲线程？若是，则使用空闲线程来执行任务。否则进入下个流程。&lt;/li&gt;
&lt;li&gt;接着线程池判断工作队列是否已满？没满，则将新提交的任务存储在工作队列里。满了，则进入下个流程。&lt;/li&gt;
&lt;li&gt;最后线程池判断整个线程池是否已满？没满，则创建一个新的工作线程来执行任务，满了，则交给饱和策略来处理这个任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;我们分析下 newFixedThreadPool 和 newCachedThreadPool 的构造函数，来验证下整个流程。&lt;/p&gt;
&lt;h4 id=&quot;newFixedThreadPool&quot;&gt;&lt;a href=&quot;#newFixedThreadPool&quot; class=&quot;headerlink&quot; title=&quot;newFixedThreadPool&quot;&gt;&lt;/a&gt;newFixedThreadPool&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(nThreads, nThreads,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      &lt;span class=&quot;number&quot;&gt;0L&lt;/span&gt;, TimeUnit.MILLISECONDS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设这是一个线程数量为 n 的 newFixedThreadPool，当我们提交 n 个任务到该线程池时，由于此时核心线程池未满，线程池会创建 n 个工作线程来执行任务。当我们再提交新的任务时，由于核心线程池已满且没有空闲线程，就会进入流程 3。由于 LinkedBlockingQueue 是个无界队列，因此之后不管再加多少个任务，都不会走到流程 4.&lt;br&gt;分析可得 newFixedThreadPool 确实是个固定长度的线程池。&lt;/p&gt;
&lt;h4 id=&quot;newCachedThreadPool&quot;&gt;&lt;a href=&quot;#newCachedThreadPool&quot; class=&quot;headerlink&quot; title=&quot;newCachedThreadPool&quot;&gt;&lt;/a&gt;newCachedThreadPool&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, Integer.MAX_VALUE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;number&quot;&gt;60L&lt;/span&gt;, TimeUnit.SECONDS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SynchronousQueue&amp;lt;Runnable&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们添加第一个任务到 newCachedThreadPool 时，线程池会创建一个线程去执行任务。之后，当我们添加任务时，由于核心线程池大小为 0，且此时线程池中没有空闲线程，再加上 SynchronousQueue 是一个不储存的阻塞队列，会直接进入流程 4 中，会创建一个新的线程来执行任务。由于 maximumPoolSize 为 Integer.MAX_VALUE，线程池无界而走不进饱和策略。之后当线程空闲时间超过 60s 时则自动回收。&lt;/p&gt;
&lt;p&gt;如果我希望 newCacedThreadPool 线程池有个上界，应该怎么做？直接把 maximumPoolSize 改为上界是否可以？&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;60L&lt;/span&gt;, TimeUnit.SECONDS, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SynchronusQueue&amp;lt;Runable&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时当你提交 3 个任务时，一切正常。之后再提交任务，就会进入饱和策略。此时确实有了上界，但多余的任务会进入饱和策略，而不是储存到队列里。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;new ThreadPoolExecutor(0, 3, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue&amp;#60;Runable&amp;#62;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果把工作队列改为无界的 LinkedBlockingQueue？情况更糟了，线程池中只有一个线程。因为 LinkedBlockingQueue 是个无界队列，所以会停留在流程 3，而不是去创建新的线程。&lt;br&gt;正确的做法其实是调用 newFixedThreadPool 的构造函数并设置 allowCoreThreadTimeOut(true)。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gityuan.com/2016/01/16/thread-pool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java线程池分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/java-threadPool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;聊聊并发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1800317/impossible-to-make-a-cached-thread-pool-with-a-size-limit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Impossible to make a cached thread pool with a size limit?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下面是一种最为简单的线程创建和回收的方法。它创建了一个线程，并在 run() 方法结束后，自动回收该线程。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码在简单的应用系统中没有太大问题。但在真实环境下，这种为“为每一个任务分配一个线程”的方法存在较多的缺陷，它没有限制可创建线程的数量，并且会频繁地创建和销毁线程。我们可以通过合理地使用线程池来克服这些缺陷。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://kaywu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>闭包是什么</title>
    <link href="http://kaywu.github.io/2016/05/15/Closure/"/>
    <id>http://kaywu.github.io/2016/05/15/Closure/</id>
    <published>2016-05-15T06:44:29.000Z</published>
    <updated>2016-05-29T02:59:35.000Z</updated>
    
    <content type="html">&lt;p&gt;闭包是什么？《Functional programming using standard ML》是这么定义的：一个包含了自由变量的开放表达式，它和该自由变量的约束环境组合在一起后，实现了一种封闭的状态。第一遍看时完全不知道它在说啥。自由变量？开放表达式？约束环境？但在理解了之后，发现闭包确实是这么回事。但在理解闭包之前，我们需要知道一些基础性的概念。让我们先从命名说起。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;写程序时，我们对变量和函数命名，使代码更具有可读性和重用性。当需要之前的变量和函数时，我们只需使用它的名字即可。那么运行时程序是怎么知道名字对应的值或者函数呢？&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;800&quot; height=&quot;500&quot; frameborder=&quot;0&quot; src=&quot;http://pythontutor.com/iframe-embed.html#code=number+%3D+0%0Adef+print_number(%29%3A%0A++++number+%3D+1%0A++++print(number%29%0A%0Aprint(number%29%0Aprint_number(%29%0Aprint(number%29%0A&amp;origin=opt-frontend.js&amp;cumulative=false&amp;heapPrimitives=false&amp;textReferences=false&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;curInstr=9&amp;codeDivWidth=350&amp;codeDivHeight=400&quot;&gt; &lt;/iframe&gt;&lt;br&gt;实际上，在程序运行时，它会创建一个名字和内容的对照表，类似于 Map。它以变量或函数的名称为键，其内容为值。&lt;br&gt;以上面这段代码为例，运行时它会创建一个全局对照表，&lt;code&gt;{&amp;quot;number&amp;quot;: 0, &amp;quot;print_number&amp;quot;: print_number 函数}&lt;/code&gt;。当调用 &lt;code&gt;print(number)&lt;/code&gt; 时，它首先会查找到 number 对应的值是 0，然后将其打印出来。实际上，一个程序不只有一个对照表，它在每调用一个函数时都会创建新的对照表。在调用 print_number 时，它会创建一个对照表，&lt;code&gt;{&amp;quot;number&amp;quot;: 1}&lt;/code&gt;。注意，这里的 number 不同于全局对照表中的 number，修改它的值并不会影响在全照对照表中的 number，可从最后一次调用 &lt;code&gt;print(number)&lt;/code&gt; 得到 0 来验证。在 print_number 的调用结束后，它所创建的对照表也会被销毁。&lt;/p&gt;
&lt;p&gt;了解了对照表之后，我们再说说闭包是什么。&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;800&quot; height=&quot;500&quot; frameborder=&quot;0&quot; src=&quot;http://pythontutor.com/iframe-embed.html#code=def+make_counter(%29%3A%0A++++count+%3D+0%0A++++def+push(%29%3A%0A++++++++nonlocal+count%0A++++++++count+%2B%3D+1%0A++++++++print(count%29%0A++++return+push%0A%0Ac+%3D+make_counter(%29%0Ac(%29++%23+-%3E+1%0Ac(%29++%23+-%3E+2%0Ac(%29++%23+-%3E+3&amp;origin=opt-frontend.js&amp;cumulative=false&amp;heapPrimitives=false&amp;textReferences=false&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;curInstr=3&amp;codeDivWidth=350&amp;codeDivHeight=400&quot;&gt; &lt;/iframe&gt;&lt;br&gt;上面是一段简单的 Python 代码，实现了每调用一次显示的数字加 1 的函数 make_counter。函数 make_counter 中定义了变量 count 和 函数 push。通过调用函数 make_counter 将返回的 push 函数赋给变量 c，然后调用它 3 次。每调用一次，显示的值就加 1。注意，每次调用 c 时结果都是不一样的。&lt;br&gt;调用函数 make_counter 时创建了对照表 f1，&lt;code&gt;{&amp;quot;count&amp;quot;: 0, &amp;quot;push&amp;quot;: push 函数}&lt;/code&gt;，并将返回的 push 函数赋值给 c。由于此时全局对照表中 c 指向 push 函数，而 push 函数又依赖于 f1，所以 f1 没有在 make_counter 调用结束后被销毁。 随后 c 每次被调用时，函数 push 会创建新的对照表，此对照表依赖于它被定义时的对照表，也就是 f1。它会从 f1 中查找到变量 count 的值，加 1 然后返回。&lt;br&gt;函数 push 使用了变量 count，但变量 count 并不是在函数 push 中定义的。这种变量被称为自由变量。函数 push 就是一个包含了自由变量的开放函数，也就是闭包。其实可以简单地把闭包想象成带有某种状态的函数。&lt;/p&gt;
&lt;p&gt;最后强烈推荐下 &lt;a href=&quot;http://www.pythontutor.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python Tutor&lt;/a&gt;，可以直观地了解程序是怎么执行的。文中的代码执行过程都是由这个网站提供的。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/25927585/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码之髓&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/34210214&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;到底什么是闭包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pythontutor.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python Tutor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;闭包是什么？《Functional programming using standard ML》是这么定义的：一个包含了自由变量的开放表达式，它和该自由变量的约束环境组合在一起后，实现了一种封闭的状态。第一遍看时完全不知道它在说啥。自由变量？开放表达式？约束环境？但在理解了之后，发现闭包确实是这么回事。但在理解闭包之前，我们需要知道一些基础性的概念。让我们先从命名说起。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kaywu.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>读《App 研发录》</title>
    <link href="http://kaywu.github.io/2016/05/07/App-Development/"/>
    <id>http://kaywu.github.io/2016/05/07/App-Development/</id>
    <published>2016-05-07T00:45:29.000Z</published>
    <updated>2016-05-15T06:54:18.000Z</updated>
    
    <content type="html">&lt;p&gt;去年出了不少 Android 相关的好书，如《Android 开发艺术探索》、《Android 源码设计模式》。如果说以上书是专注于代码，《App 研发录》则是专注于经验，没有踩过坑的人很难体会到这本书的魅力。&lt;br&gt;我自己也是经常看着看着，发现这个问题碰到过，赶紧看看作者是怎么做的然后汲取经验。&lt;br&gt;下文是自己在阅读过程中的一些思考和笔记。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;高效-App-框架设计与重构&quot;&gt;&lt;a href=&quot;#高效-App-框架设计与重构&quot; class=&quot;headerlink&quot; title=&quot;高效 App 框架设计与重构&quot;&gt;&lt;/a&gt;高效 App 框架设计与重构&lt;/h2&gt;&lt;p&gt;这部分讲的是开发规范以及基础库的设计，都是些实际开发会碰到的问题，如项目大了之后混乱的目录、臃肿的 Activity、Html 与 App 之间的跳转等等。每看到一个问题时，最好想想自己是怎么做的，然后对比总结。比如以前自己做项目时 Html 与 App 之间的跳转是通过 int 值来进行判断的，页面越来越多后哪个数字对应于哪个页面就会变得很混乱，每次都要打开文档或代码进行确认，可读性比较差。而书中采取字符串定义协议的方式就清楚很多，要跳转哪个页面一目了然。我们可以再优化一下，协议以 &lt;code&gt;app://&lt;/code&gt; 开头，如 &lt;code&gt;app://user_profile&lt;/code&gt;，可读性就更强了。&lt;br&gt;现在如网络请求、图片加载都已经有相当成熟的库了，不需要重新造轮子。但是了解其基本原理仍然是很有必要的，方便我们增加新功能。如在后端接口还未好时 App 的开发不能因此停滞，就需要 Mock Api 的数据。这时我们可以将网络库再封装一层，在未好的接口上使用本地假数据来继续开发。&lt;/p&gt;
&lt;h2 id=&quot;Crash-异常收集与统计&quot;&gt;&lt;a href=&quot;#Crash-异常收集与统计&quot; class=&quot;headerlink&quot; title=&quot;Crash 异常收集与统计&quot;&gt;&lt;/a&gt;Crash 异常收集与统计&lt;/h2&gt;&lt;p&gt;异常收集大部分公司都是采用第三方服务，这部分功夫可以省了。作者花了大力气在 Crash 分析这章，对八十多种线上崩溃追根溯源。众所周知，Android App 经常会出现一些诡异的 Bug，大部分情况下都是正常的但总有一定的概率报错，让人百思不得其解。比如 Resources$NotFoundException，明明 apk 里有这个资源文件。书中分析是由于内存溢出，解了长久的疑惑。建议遇到诡异的 Bug 时，就到这章搜寻下，即使没有直接的解决方案，就如上文的 Resources$NotFoundException，但定位了异常的原因，省了不少的功夫。&lt;/p&gt;
&lt;h2 id=&quot;App-竞品技术分析&quot;&gt;&lt;a href=&quot;#App-竞品技术分析&quot; class=&quot;headerlink&quot; title=&quot;App 竞品技术分析&quot;&gt;&lt;/a&gt;App 竞品技术分析&lt;/h2&gt;&lt;p&gt;竞品分析真是相当接地气的章节，分析竞争对手 App 的技术实现，掌握他们先进的思想和技术。别的不说，通过其他 App 包里面的 META_INF 目录下会有一个名为某个渠道的 0 字节的文件，猜测是用来批量打渠道包再加以实践验证，不得不谓之高。当然，美团分享&lt;a href=&quot;http://tech.meituan.com/mt-apk-packaging.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多渠道打包方案&lt;/a&gt;是后话了。&lt;br&gt;其他如把 HTML5 页面嵌入到 Zip 包中、将 icon 做成 ttf 文件等针对实际问题的解决方案也让人耳目一新。&lt;/p&gt;
&lt;h2 id=&quot;项目管理和团队建设&quot;&gt;&lt;a href=&quot;#项目管理和团队建设&quot; class=&quot;headerlink&quot; title=&quot;项目管理和团队建设&quot;&gt;&lt;/a&gt;项目管理和团队建设&lt;/h2&gt;&lt;p&gt;敏捷开发这节有个很有意思的点，App 在经过几天的集中测试后会进入 Code Freeze，除非发现很严重的 Bug，否则不再改动代码。初看挺没道理的，明明还有时间去修复 Bug 却不做。但要是有过在上线前几个小时还在改 Bug 的经历就能体会到 Code Freeze 的意义。由于急着上线，修复 Bug 时很容易考虑不周，测试也只来得及测相关功能，一个不小心后果就比较严重。所以距离上线一段时间之内最好不要修改代码，也就是 Code Freeze。&lt;/p&gt;
&lt;p&gt;《App 研发录》是本踏实的书，书中没有高大上的技术，只有应对不同场景的具体解决方案，读之颇有“重剑无锋”之感。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;去年出了不少 Android 相关的好书，如《Android 开发艺术探索》、《Android 源码设计模式》。如果说以上书是专注于代码，《App 研发录》则是专注于经验，没有踩过坑的人很难体会到这本书的魅力。&lt;br&gt;我自己也是经常看着看着，发现这个问题碰到过，赶紧看看作者是怎么做的然后汲取经验。&lt;br&gt;下文是自己在阅读过程中的一些思考和笔记。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://kaywu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>为 aar 关联源代码</title>
    <link href="http://kaywu.github.io/2016/05/01/Maven-aar-source/"/>
    <id>http://kaywu.github.io/2016/05/01/Maven-aar-source/</id>
    <published>2016-05-01T11:43:01.000Z</published>
    <updated>2016-05-08T09:46:30.000Z</updated>
    
    <content type="html">&lt;p&gt;不知大家是否注意过，在使用 aar 时，若是本地的 aar 包，打开相关源码是反编译后的文件。而如果是引用的如 jcenter 的库，就能阅读详尽的源代码。两者的区别是什么呢？&lt;br&gt;如果大家有尝试过上传 library 到 jcenter 或 maven 就会知道，除了 aar 文件之外，还要上传相应的 sources、javadoc 以及 pom 文件，就像 &lt;a href=&quot;https://bintray.com/bintray/jcenter/com.yalantis%3Aucrop/1.5.0/view#files/com/yalantis/ucrop/1.5.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ucrop&lt;/a&gt; 所显示的那样。gradle 在下载依赖时，也会包括 sources、javadoc 等文件，而 sources 文件正是使我们能够阅读源代码的真正原因。&lt;br&gt;那么，如何为 aar 文件添加 sources 支持呢？一种方法是添加 aar 的同时手工导入相应的 sources 文件，另一种则是将 aar、sources 上传到仓库然后通过 gradle 导入。这里说明第二种方法的使用。&lt;br&gt;由于上传到 maven、jcenter 都需要额外的步骤，为方便起见，我们搭建一个本地 Maven 仓库来讲解。如何搭建仓库可以参考 &lt;a href=&quot;http://jeroenmols.com/blog/2015/08/06/artifactory/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A PRIVATE MAVEN REPOSITORY FOR ANDROID IN 30 MIN&lt;/a&gt;，有&lt;a href=&quot;http://www.devtf.cn/?p=1079&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文翻译&lt;/a&gt;。后续对 build.gradle 的说明会建立在该文章的基础上。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// build.gradle in root project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &lt;span class=&quot;string&quot;&gt;&#39;com.android.tools.build:gradle:2.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 关键&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &lt;span class=&quot;string&quot;&gt;&quot;org.jfrog.buildinfo:build-info-extractor-gradle:3.2.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// build.gradle in library project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.android.library&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.jfrog.artifactory&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;maven-publish&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 省略无关 andorid 配置代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; packageName = &lt;span class=&quot;string&quot;&gt;&#39;com.jeroenmols.awesomelibrary&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; libraryVersion = &lt;span class=&quot;string&quot;&gt;&#39;1.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;publishing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publications &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        aar(MavenPublication) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            groupId packageName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            version libraryVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifactId project.getName()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Tell maven to prepare the generated &quot;*.aar&quot; file for publishing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifact(&lt;span class=&quot;string&quot;&gt;&quot;$buildDir/outputs/aar/$&amp;#123;project.getName()&amp;#125;-release.aar&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;artifactory &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    contextUrl = &lt;span class=&quot;string&quot;&gt;&#39;http://localhost:8081/artifactory&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publish &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        repository &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// The Artifactory repository key to publish to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            repoKey = &lt;span class=&quot;string&quot;&gt;&#39;libs-release-local&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            username = &lt;span class=&quot;string&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            password = &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defaults &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Tell the Artifactory Plugin which artifacts should be published to Artifactory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            publications(&lt;span class=&quot;string&quot;&gt;&#39;aar&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            publishArtifacts = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Properties to be attached to the published artifacts.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            properties = [&lt;span class=&quot;string&quot;&gt;&#39;qa.level&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;basic&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dev.team&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;core&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Publish generated POM files to Artifactory (true by default)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            publishPom = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;生成-sources-jar-文件&quot;&gt;&lt;a href=&quot;#生成-sources-jar-文件&quot; class=&quot;headerlink&quot; title=&quot;生成 sources.jar 文件&quot;&gt;&lt;/a&gt;生成 sources.jar 文件&lt;/h2&gt;&lt;p&gt;sources 文件实质上就是对 Android 的 java 源代码进行打包而生成 jar 包。gradle （准确来说是 Android Library Plugin） 已经为我们提供了方便的打包工具，我们简单配置一下就可以了。&lt;br&gt;在 library 的 build.gradle 中添加以下代码。&lt;br&gt;下文中的 build.gradle 如无声明，则指的是 library 下的 build.gradle 文件。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task generateSourcesJar(&lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt; Jar) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    from android.sourceSets.main.java.srcDirs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classifier &lt;span class=&quot;string&quot;&gt;&#39;sources&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们新建了类型为 Jar 的 Task，from 指定的是源代码的位置，classifier 会使生成的 jar 包带上 -sources 的后缀。&lt;/p&gt;
&lt;h2 id=&quot;将-jar-包上传到-Maven-仓库&quot;&gt;&lt;a href=&quot;#将-jar-包上传到-Maven-仓库&quot; class=&quot;headerlink&quot; title=&quot;将 jar 包上传到 Maven 仓库&quot;&gt;&lt;/a&gt;将 jar 包上传到 Maven 仓库&lt;/h2&gt;&lt;p&gt;maven-publish 是 gradle 推出的用来替代 Upload Task 的 Plugin，具体用法可看 &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User Guide&lt;/a&gt;。我们使用 &lt;code&gt;arfifact&lt;/code&gt; 方法来增加上传的文件。在 publishing 中添加一行，&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;publishing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publications &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        aar(MavenPublication) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            groupId packageName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            version libraryVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifactId project.getName()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Tell maven to prepare the generated &quot;*.aar&quot; file for publishing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifact(&lt;span class=&quot;string&quot;&gt;&quot;$buildDir/outputs/aar/$&amp;#123;project.getName()&amp;#125;-release.aar&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 将 generateSourcesJar Task 生成的 sources.jar 也一并上传&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            artifact generateSourcesJar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了方便起见，我们添加如下代码，使得执行 artifactoryPublish 之前会自动执行 assembleRelease、generateSourcesJar Task。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;artifactoryPublish.dependsOn assembleRelease, generateSourcesJar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时，我们运行 &lt;code&gt;./gradlew artifactoryPublish&lt;/code&gt;，就会把 aar 连同 sources.jar 上传到 Maven 仓库了。&lt;br&gt;上传 javadoc 的做法也是类似的，就不赘述了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2015/08/06/artifactory/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A PRIVATE MAVEN REPOSITORY FOR ANDROID IN 30 MIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2015/08/13/artifactory2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GETTING THE MOST OUT OF ARTIFACTORY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;不知大家是否注意过，在使用 aar 时，若是本地的 aar 包，打开相关源码是反编译后的文件。而如果是引用的如 jcenter 的库，就能阅读详尽的源代码。两者的区别是什么呢？&lt;br&gt;如果大家有尝试过上传 library 到 jcenter 或 maven 就会知道，除了 aar 文件之外，还要上传相应的 sources、javadoc 以及 pom 文件，就像 &lt;a href=&quot;https://bintray.com/bintray/jcenter/com.yalantis%3Aucrop/1.5.0/view#files/com/yalantis/ucrop/1.5.0&quot;&gt;ucrop&lt;/a&gt; 所显示的那样。gradle 在下载依赖时，也会包括 sources、javadoc 等文件，而 sources 文件正是使我们能够阅读源代码的真正原因。&lt;br&gt;那么，如何为 aar 文件添加 sources 支持呢？一种方法是添加 aar 的同时手工导入相应的 sources 文件，另一种则是将 aar、sources 上传到仓库然后通过 gradle 导入。这里说明第二种方法的使用。&lt;br&gt;由于上传到 maven、jcenter 都需要额外的步骤，为方便起见，我们搭建一个本地 Maven 仓库来讲解。如何搭建仓库可以参考 &lt;a href=&quot;http://jeroenmols.com/blog/2015/08/06/artifactory/&quot;&gt;A PRIVATE MAVEN REPOSITORY FOR ANDROID IN 30 MIN&lt;/a&gt;，有&lt;a href=&quot;http://www.devtf.cn/?p=1079&quot;&gt;中文翻译&lt;/a&gt;。后续对 build.gradle 的说明会建立在该文章的基础上。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>从编程的角度理解 Gradle</title>
    <link href="http://kaywu.github.io/2016/04/24/Gradle/"/>
    <id>http://kaywu.github.io/2016/04/24/Gradle/</id>
    <published>2016-04-24T06:52:03.000Z</published>
    <updated>2016-06-10T03:54:48.000Z</updated>
    
    <content type="html">&lt;p&gt;刚开始接触 Gradle 时，一头雾水。碰到不会的地方，搜索相关解决方案然后依样画葫芦。至于为什么这么做，这么做的原理是什么，完全不清楚。后来看了 &lt;a href=&quot;http://blog.csdn.net/innost/article/details/48228651&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle 详解&lt;/a&gt;，觉得作者说的十分有道理，得从编程的角度而不是脚本的角度来看 Gradle。下面小结下我在这个过程中的一些收获。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;从-apply-说起&quot;&gt;&lt;a href=&quot;#从-apply-说起&quot; class=&quot;headerlink&quot; title=&quot;从 apply 说起&quot;&gt;&lt;/a&gt;从 apply 说起&lt;/h2&gt;&lt;p&gt;Android 项目的 build.gradle 常有这么一句，&lt;code&gt;apply plugin: &amp;#39;com.android.application&amp;#39;&lt;/code&gt;。&lt;br&gt;它常常给我一种强烈的错觉，以为 &lt;code&gt;apply plugin&lt;/code&gt; 是一部分，&lt;code&gt;&amp;#39;com.android.application&amp;#39;&lt;/code&gt; 是另一个部分。&lt;br&gt;而这得归因于 Groovy 调用方法的时候是可以省略括号的。拿最简单的 &lt;code&gt;println&lt;/code&gt; 来说，你既可以写 &lt;code&gt;println(3)&lt;/code&gt;，也可以使用 &lt;code&gt;println 3&lt;/code&gt;。如果加上省略的括号，这行代码就变成了 &lt;code&gt;apply(plugin: &amp;#39;com.android.application&amp;#39;)&lt;/code&gt;。虽然降低了可读性，但从编程的角度来看更清晰了。&lt;br&gt;但是问题又来了，&lt;code&gt;plugin: &amp;#39;com.android.application&amp;#39;&lt;/code&gt; 又是个什么鬼？这就得提到 Groovy 的 &lt;a href=&quot;http://www.groovy-lang.org/objectorientation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Named arguments&lt;/a&gt; 机制了。下面拿代码说明。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; foo(Map args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	println &lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;args.name&amp;#125;: $&amp;#123;args.age&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 调用方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Marie&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用 foo 时，&lt;code&gt;name: &amp;#39;Marie&amp;#39;, age: 1&lt;/code&gt; 会被解析成 Map，作为 foo 的参数。&lt;br&gt;可见 &lt;code&gt;plugin: &amp;#39;com.android.application&amp;#39;&lt;/code&gt; 实质上是一个 Map。顺带说下在 Groovy 里，Map 的 key 默认是 String 类型，所以 &lt;code&gt;plugin&lt;/code&gt; 两边可以不用加引号。所以 &lt;code&gt;apply&lt;/code&gt; 实质上是以 Map 为参数的方法，可以查看 &lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.api.plugins.PluginAware.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PluginAware&lt;/a&gt; 加以验证。&lt;br&gt;一行简单的方法调用就有这么多细节，那都是因为 Groovy 的灵活性。大家都知道 Gradle 建立在 Groovy 之上，而 Groovy 相比于 Java 灵活太多，所以想从编程的角度来理解 Gradle，对 Groovy 的熟悉度有一定的要求。建议多读读 &lt;a href=&quot;http://www.groovy-lang.org/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy Doc&lt;/a&gt; 加深对 Groovy 的学习。&lt;/p&gt;
&lt;p&gt;接下来提高难度，如何理解下面这段代码。&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;buildscript&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;repositories&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.android.tools.build:gradle:2.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先把省略的括号都加上。&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;buildscript&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;repositories&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.android.tools.build:gradle:2.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;buildscript&lt;/code&gt;、&lt;code&gt;repositories&lt;/code&gt;、&lt;code&gt;dependencies&lt;/code&gt; 其实都是接收 Closure 为参数的方法。调用 &lt;code&gt;buildscript&lt;/code&gt;传入的闭包里调用了 &lt;code&gt;repositories&lt;/code&gt;、&lt;code&gt;dependencies&lt;/code&gt; 方法。&lt;br&gt;了解了这些都是方法调用之后，又有个问题冒出来了，这些方法是哪里来的呢？&lt;br&gt;答案就是 Project。当 build.gradle 执行时它会配置 Project 实例并将其设为 Delegate 对象，即它的语句块都会被委托给 Project 的实例。我们继续查看 &lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.api.Project.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Project Doc&lt;/a&gt;，会发现 &lt;code&gt;buildscript&lt;/code&gt; 被 &lt;code&gt;ScriptHandler&lt;/code&gt; 委托了，接着查看 &lt;a href=&quot;https://docs.gradle.org/current/javadoc/org/gradle/api/initialization/dsl/ScriptHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ScriptHandler Doc&lt;/a&gt; 会找到 &lt;code&gt;repositories&lt;/code&gt; 和 &lt;code&gt;dependencies&lt;/code&gt; 方法。&lt;br&gt;由于 Delegate 在 Gradle 中频繁使用，这里再多说几句。简单来说，Closure 的 Delegate 机制可以使我们将一个闭包中的执行代码的作用对象设置成任意其他对象。下面是来自 &lt;a href=&quot;http://mrhaki.blogspot.sg/2009/11/groovy-goodness-setting-closures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting a Closure’s Delegate&lt;/a&gt; 的一个例子。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Simple class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Post&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; info() &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;This is Groovy Goodness post #$count!&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Script variable and method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; info() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Count value is $count.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Closure to increment a count variable and invoke a info() method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; printInfo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    info()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Delegate is by default set to owner, so the script in this case.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Count value is 1.&quot;&lt;/span&gt;== printInfo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Change closure resolver so first the delegate is used.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printInfo.resolveStrategy = Closure.DELEGATE_FIRST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Set delegate to Post object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printInfo.delegate = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Post(&lt;span class=&quot;string&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;This is Groovy Goodness post #101!&quot;&lt;/span&gt; == printInfo()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这段代码里，我们先创建了一个非常简单的类 Post，它有 count 属性和 info 方法。然后我们又在脚本中定义了 count 和 info 方法。当第一次调用 printInfo 时，它会直接在这个 Script 中找到 count 的值和 info 方法，count 为 0。而为 printInfo 设置了 Delegate 并且设置了 DELEGATE_FIRST 之后，调用 printInfo 时 count 属性和 info 方法会先在 Post 里面找，而在 Post 中 count 等于 100。&lt;br&gt;因此在执行 Closure 时，它会依赖于它所在的上下文，默认是定义 Closure 的上下文，对 printInfo 来说则是整个 Script，此时调用就会使用 Script 中的 count 和 info。而之后我们将 printInfo 的上下文设成 Post，由于 ResolveStrategy 为 DELEGATE_FIRST，它就会优先使用 Post 里面的属性和方法。&lt;br&gt;若还有不明白的地方，建议大家读下 &lt;a href=&quot;http://blog.csdn.net/lzyzsd/article/details/46935063&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Tips#2-语法&lt;/a&gt; 和 &lt;a href=&quot;http://www.cnblogs.com/davenkin/p/gradle-learning-3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle学习系列之三——读懂Gradle语法&lt;/a&gt;，这两篇文章都讲得很清楚。&lt;/p&gt;
&lt;h2 id=&quot;Task-amp-Plugin&quot;&gt;&lt;a href=&quot;#Task-amp-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Task &amp;amp; Plugin&quot;&gt;&lt;/a&gt;Task &amp;amp; Plugin&lt;/h2&gt;&lt;p&gt;在 Java 中，我们习惯于将常用的功能抽象成方法或类，然后在需要的时候 import 使用。&lt;br&gt;但在 Gradle 中，更标准的做法是将功能抽象成 Task 和 Plugin。以 Android 举例，在 build.gradle 通过 &lt;code&gt;apply plugin: &amp;#39;com.android.application&amp;#39;&lt;/code&gt; 来引入 Plugin，这样就为 Project 引入了相关 Android 的 Task。如何自定义 Plugin 请参考 &lt;a href=&quot;https://docs.gradle.org/current/userguide/custom_plugins.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Custom Plugins&lt;/a&gt; 和 &lt;a href=&quot;http://www.cnblogs.com/davenkin/p/gradle-learning-10.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle学习系列之十——自定义Plugin&lt;/a&gt;。&lt;br&gt;不知大家有没有疑惑，我当时就很纳闷 build.gradle 中那些 Script Block 都哪里来的。 Script Block 指的是以 Closure 为参数的方法，如上文例子的 &lt;code&gt;buildscrpt&lt;/code&gt;。其实，我们在创建 Task 或者 Extension (给 Project  添加额外的属性，在自定义 Plugin 时经常使用)时，会在 Project 中额外添加以 Task 或 Extension 名字命名的 Script Block。&lt;br&gt;比如通过 &lt;code&gt;task sayHello&lt;/code&gt; 创建了 sayHello 的 task，同时也在 Project 中增加了 &lt;code&gt;sayHello(Closure closure)&lt;/code&gt; 的方法。&lt;/p&gt;
&lt;h2 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h2&gt;&lt;p&gt;开玩笑，Gradle 还能 Debug？为什么不能。&lt;br&gt;首先在 Terminal 里输入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export GRADLE_OPTS=&amp;#34;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&amp;#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时执行 &lt;code&gt;./gradlew&lt;/code&gt; 会显示 &lt;code&gt;Listening for transport dt_socket at address: 5005&lt;/code&gt;。&lt;br&gt;打开 Android Studio，按下图设置。&lt;br&gt;&lt;img src=&quot;/img/gradle_debug_0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/gradle_debug_1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/gradle_debug_2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;最后，点击 Debug 按钮就可以开始了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/innost/article/details/48228651&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle 详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.groovy-lang.org/documentation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/lzyzsd/article/details/46935063&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Tips#2-语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/davenkin/p/gradle-learning-3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle学习系列之三——读懂Gradle语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mrhaki.blogspot.sg/2009/11/groovy-goodness-setting-closures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting a Closure’s Delegate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/custom_plugins.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Custom Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/davenkin/p/gradle-learning-10.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle学习系列之十——自定义Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/dsl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://georgik.sinusgear.com/2014/06/23/how-to-debug-gradle-script/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to debug gradle script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始接触 Gradle 时，一头雾水。碰到不会的地方，搜索相关解决方案然后依样画葫芦。至于为什么这么做，这么做的原理是什么，完全不清楚。后来看了 &lt;a href=&quot;http://blog.csdn.net/innost/article/details/48228651&quot;&gt;Gradle 详解&lt;/a&gt;，觉得作者说的十分有道理，得从编程的角度而不是脚本的角度来看 Gradle。下面小结下我在这个过程中的一些收获。&lt;br&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://kaywu.github.io/categories/Gradle/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 保持屏幕常亮方法小结</title>
    <link href="http://kaywu.github.io/2016/04/17/Android-Screen-On/"/>
    <id>http://kaywu.github.io/2016/04/17/Android-Screen-On/</id>
    <published>2016-04-17T01:37:41.000Z</published>
    <updated>2016-04-17T11:50:14.000Z</updated>
    
    <content type="html">&lt;p&gt;开发视频功能时，遇到了播放一段时间后屏幕自动变暗的问题，这里总结下解决方法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;p&gt;如果使用的是 MediaPlayer 和 SurfaceView 的话，有一个现成的方法可以使用，&lt;code&gt;setScreenOnWhilePlaying(true)&lt;/code&gt;。但是项目中采用的是TextureView，不支持这种方法。具体原因看下 &lt;code&gt;setScreenOnWhilePlaying&lt;/code&gt; 的源码和 &lt;code&gt;setDisplay&lt;/code&gt;的注释就明白了。&lt;/p&gt;
&lt;h2 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h2&gt;&lt;p&gt;另一种大家比较熟悉的是使用 &lt;code&gt;WAKE_LOCK&lt;/code&gt;。&lt;br&gt;首先声明 &lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WAKE_LOCK&amp;quot; /&amp;gt;&lt;/code&gt;这个权限，并添加以下代码，&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &lt;span class=&quot;string&quot;&gt;&quot;MyWakelockTag&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wakeLock.acquire();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并注意在适当的时候调用 &lt;code&gt;wakelock.release()&lt;/code&gt;。&lt;br&gt;该方法会影响电池的使用，若不及时释放会有严重的后果。官方文档建议只在必要的时候使用且保持尽量短的时间。&lt;br&gt;相比第一种方法，有点小题大做。&lt;/p&gt;
&lt;h2 id=&quot;方法三&quot;&gt;&lt;a href=&quot;#方法三&quot; class=&quot;headerlink&quot; title=&quot;方法三&quot;&gt;&lt;/a&gt;方法三&lt;/h2&gt;&lt;p&gt;该方法不需要额外的权限，只需声明 &lt;code&gt;getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);&lt;/code&gt;，或者直接在布局中加上 &lt;code&gt;keepScreenOn=true&lt;/code&gt; 即可。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;RelativeLayout&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;android:keepScreenOn&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是，view 的 keepScreenOn 属性只有在该 View 是 Visible 状态的时候才生效。&lt;/p&gt;
&lt;p&gt;对比来看，方法三简单实用，就选它了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/intl/zh-cn/training/scheduling/wakelock.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/intl/zh-cn/training/scheduling/wakelock.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5712849/how-do-i-keep-the-screen-on-in-my-app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/5712849/how-do-i-keep-the-screen-on-in-my-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;开发视频功能时，遇到了播放一段时间后屏幕自动变暗的问题，这里总结下解决方法。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 Python 处理 Excel 文件</title>
    <link href="http://kaywu.github.io/2016/04/03/Python-OpenPyXL/"/>
    <id>http://kaywu.github.io/2016/04/03/Python-OpenPyXL/</id>
    <published>2016-04-03T10:38:09.000Z</published>
    <updated>2016-04-04T15:44:26.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在学着使用 Python 解决些重复枯燥的工作，也给自己省些时间。比如每天从网站上摘抄几个数据然后制成 Excel。偶尔倒还好，要是每天都要这样，岂不是很浪费时间？像这种重复性的操作就可以交给不辞辛劳的计算机。&lt;br&gt;解决上面的需求主要分两步，一是从网上摘抄数据，根据不同的情况，摘抄数据的手段也各异。简单的直接&lt;code&gt;curl&lt;/code&gt;一下然后正则，复杂点的可能需要抓包，或者爬虫，这里就不做展开（自己还在学……）。二是处理 Excel，今天就着重讲讲怎么处理 Excel。&lt;/p&gt;
&lt;p&gt;Python 关于 Excel 的库主要有两个：Python-Excel（xlrd, xlwt, xlutils）和 OpenPyXL。前者主要用于 xls，后者用于 xlsx。现在多数文件都是 xlsx，且后者维护得很勤快，再加上 &lt;a href=&quot;https://automatetheboringstuff.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Automate the Boring Stuff with Python&lt;/a&gt; 也是用的 OpenPyXL，就愉快地决定用它了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;OpenPyXL&quot;&gt;&lt;a href=&quot;#OpenPyXL&quot; class=&quot;headerlink&quot; title=&quot;OpenPyXL&quot;&gt;&lt;/a&gt;OpenPyXL&lt;/h2&gt;&lt;p&gt;安装一句话，&lt;code&gt;pip3 install openpyxl&lt;/code&gt;即可。&lt;/p&gt;
&lt;h3 id=&quot;读文件&quot;&gt;&lt;a href=&quot;#读文件&quot; class=&quot;headerlink&quot; title=&quot;读文件&quot;&gt;&lt;/a&gt;读文件&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; openpyxl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 读取 sample.xlsx 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wb = openpyxl.load_workbook(&lt;span class=&quot;string&quot;&gt;&#39;sample.xlsx&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 打印 该文件所含有 sheet 的 name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(wb.get_sheet_names())  &lt;span class=&quot;comment&quot;&gt;# [&#39;Sheet1&#39;, &#39;Sheet2&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取当前使用的 sheet，默认使用第一个 sheet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;active_sheet = wb.active&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 打印 A1 单元格的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(active_sheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;].value)  &lt;span class=&quot;comment&quot;&gt;# Hello, World!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;写文件&quot;&gt;&lt;a href=&quot;#写文件&quot; class=&quot;headerlink&quot; title=&quot;写文件&quot;&gt;&lt;/a&gt;写文件&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 新建 Workbook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wb = Workbook()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sheet = wb.active&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置单元格 A1 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;].value = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 保存为 sample.xlsx 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wb.save(&lt;span class=&quot;string&quot;&gt;&quot;sample.xlsx&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字体&quot;&gt;&lt;a href=&quot;#字体&quot; class=&quot;headerlink&quot; title=&quot;字体&quot;&gt;&lt;/a&gt;字体&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置字体大小为24，斜体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;].font = Font(size=&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;, italic=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;背景色&quot;&gt;&lt;a href=&quot;#背景色&quot; class=&quot;headerlink&quot; title=&quot;背景色&quot;&gt;&lt;/a&gt;背景色&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置背景色为红色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;].fill = PatternFill(start_color=colors.RED, fill_type=fills.FILL_SOLID)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;公式&quot;&gt;&lt;a href=&quot;#公式&quot; class=&quot;headerlink&quot; title=&quot;公式&quot;&gt;&lt;/a&gt;公式&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sheet[&lt;span class=&quot;string&quot;&gt;&#39;B9&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;=SUM(B1:B8)&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;合并单元格&quot;&gt;&lt;a href=&quot;#合并单元格&quot; class=&quot;headerlink&quot; title=&quot;合并单元格&quot;&gt;&lt;/a&gt;合并单元格&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sheet.merge_cells(&lt;span class=&quot;string&quot;&gt;&#39;A1:D3&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，强烈推荐下 &lt;a href=&quot;https://automatetheboringstuff.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Automate the Boring Stuff with Python&lt;/a&gt; 这本书，真是形象说明了&lt;code&gt;人生苦短，我用 Python&lt;/code&gt;这句口号。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://openpyxl.readthedocs.org/en/2.3.3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenPyXL Doc&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://automatetheboringstuff.com/chapter12/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Automate the Boring Stuff with Python - Working with Excel Spreadsheets&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.python-excel.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Working with Excel Files in Python&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学着使用 Python 解决些重复枯燥的工作，也给自己省些时间。比如每天从网站上摘抄几个数据然后制成 Excel。偶尔倒还好，要是每天都要这样，岂不是很浪费时间？像这种重复性的操作就可以交给不辞辛劳的计算机。&lt;br&gt;解决上面的需求主要分两步，一是从网上摘抄数据，根据不同的情况，摘抄数据的手段也各异。简单的直接&lt;code&gt;curl&lt;/code&gt;一下然后正则，复杂点的可能需要抓包，或者爬虫，这里就不做展开（自己还在学……）。二是处理 Excel，今天就着重讲讲怎么处理 Excel。&lt;/p&gt;
&lt;p&gt;Python 关于 Excel 的库主要有两个：Python-Excel（xlrd, xlwt, xlutils）和 OpenPyXL。前者主要用于 xls，后者用于 xlsx。现在多数文件都是 xlsx，且后者维护得很勤快，再加上 &lt;a href=&quot;https://automatetheboringstuff.com/&quot;&gt;Automate the Boring Stuff with Python&lt;/a&gt; 也是用的 OpenPyXL，就愉快地决定用它了。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://kaywu.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Support Annotion 小结</title>
    <link href="http://kaywu.github.io/2016/03/27/Android-Support-Annotation/"/>
    <id>http://kaywu.github.io/2016/03/27/Android-Support-Annotation/</id>
    <published>2016-03-27T11:28:08.000Z</published>
    <updated>2016-06-10T03:54:48.000Z</updated>
    
    <content type="html">&lt;p&gt;Support Annotion 是指 Andoid Support Library 从 19.1 开始引入的注解库，通过&lt;code&gt;compile &amp;#39;com.android.support:support-annotations:22.2.0&amp;#39;&lt;/code&gt;就能引入。它可以检验代码潜在的问题并提醒你去修正它。&lt;br&gt;下面简单介绍下我常用的几个注解，更加全面的介绍可以看&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Nullable-amp-NonNull&quot;&gt;&lt;a href=&quot;#Nullable-amp-NonNull&quot; class=&quot;headerlink&quot; title=&quot;Nullable &amp;amp; NonNull&quot;&gt;&lt;/a&gt;Nullable &amp;amp; NonNull&lt;/h2&gt;&lt;p&gt;作为 Android 开发者，看到&lt;code&gt;NullPointer&lt;/code&gt;就五味杂成。当它发生时要么后悔这里咋不小心没写个判断，要么就是咒骂这里返回的值怎么可以是&lt;code&gt;Null&lt;/code&gt;。&lt;br&gt;如果你碰到这样的情况很多，那么这两个注解就是为你而服务的。&lt;br&gt;&lt;code&gt;Nullable&lt;/code&gt;表明这里的值可能会空，而&lt;code&gt;NonNull&lt;/code&gt;则表示这里的值必须不为空。两者可以使用在&lt;code&gt;Method&lt;/code&gt;、&lt;code&gt;Pamameter&lt;/code&gt;以及&lt;code&gt;Field&lt;/code&gt;上。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextView tv = (TextView) findViewById(R.id.tv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Method invocation &#39;getContent().getLength() may produce &#39;java.lang.NullPointerException&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tv.setText(&lt;span class=&quot;string&quot;&gt;&quot;The length of content is &quot;&lt;/span&gt; + getContent().length());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;举个例子，当你使用&lt;code&gt;Nullable&lt;/code&gt;标注的方法并对返回值不加判断直接使用时，IDE 就会高亮有问题的语句，如上段代码中的&lt;code&gt;getContent().length()&lt;/code&gt;，并提醒你这里可能会出现&lt;code&gt;NullPointerException&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;IntDef-amp-StringDef&quot;&gt;&lt;a href=&quot;#IntDef-amp-StringDef&quot; class=&quot;headerlink&quot; title=&quot;IntDef &amp;amp; StringDef&quot;&gt;&lt;/a&gt;IntDef &amp;amp; StringDef&lt;/h1&gt;&lt;p&gt;处于性能的考虑，在 Android 开发中我们会使用&lt;code&gt;Int&lt;/code&gt;常量来代替&lt;code&gt;Enum&lt;/code&gt;类型，而&lt;code&gt;Int&lt;/code&gt;常量缺乏像&lt;code&gt;Enum&lt;/code&gt;的类型安全性。但我们可以通过&lt;code&gt;IntDef&lt;/code&gt;来达到类似&lt;code&gt;Enum&lt;/code&gt;的效果。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.support.annotation.IntDef;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ActionBar&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@IntDef&lt;/span&gt;(&amp;#123;NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; NavigationMode &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NAVIGATION_MODE_STANDARD = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NAVIGATION_MODE_LIST = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NAVIGATION_MODE_TABS = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@NavigationMode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getNavigationMode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setNavigationMode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NavigationMode &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若我们在&lt;code&gt;setNavigationMode&lt;/code&gt;中传入错误的参数，如&lt;code&gt;3&lt;/code&gt;，则 IDE 就会报错，并提示可以使用的值。&lt;br&gt;&lt;code&gt;IntDef&lt;/code&gt;还有个高级属性&lt;code&gt;flag&lt;/code&gt;，当设置为&lt;code&gt;true&lt;/code&gt;时就可以通过 &amp;amp; 或 | 进行位操作，类似于&lt;code&gt;EnumSet&lt;/code&gt;的相关操作。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.support.annotation.IntDef;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@IntDef&lt;/span&gt;(flag=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, value=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_USE_LOGO,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_SHOW_HOME,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_HOME_AS_UP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_SHOW_TITLE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DISPLAY_SHOW_CUSTOM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; DisplayOptions &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_USE_LOGO = &lt;span class=&quot;number&quot;&gt;0x1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_SHOW_HOME = &lt;span class=&quot;number&quot;&gt;0x2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_HOME_AS_UP = &lt;span class=&quot;number&quot;&gt;0x4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_SHOW_TITLE = &lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DISPLAY_SHOW_CUSTOM = &lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setDisplayOptions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@DisplayOptions &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; options)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_HOME | ActionBar.DISPLAY_SHOW_TITLE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Thread-Annotations&quot;&gt;&lt;a href=&quot;#Thread-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Thread Annotations&quot;&gt;&lt;/a&gt;Thread Annotations&lt;/h2&gt;&lt;p&gt;Support Library 在 22.2 之后又引入了 Thread Annotations，用来标注方法所需要的线程环境。如果一个类中的所有方法对线程环境的要求都相同，则可以来标注整个类。&lt;br&gt;Thread Annotations 有以下4种，其中 UiThread 和 MainThread 没有本质区别，可以互换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@UiThread&lt;/li&gt;
&lt;li&gt;@MainThread&lt;/li&gt;
&lt;li&gt;@WorkerThread&lt;/li&gt;
&lt;li&gt;@BinderThread&lt;br&gt;使用效果如下图所示。&lt;br&gt;&lt;img src=&quot;/img/support_annotation_img_00.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Resource-Type-Annotations&quot;&gt;&lt;a href=&quot;#Resource-Type-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Resource Type Annotations&quot;&gt;&lt;/a&gt;Resource Type Annotations&lt;/h2&gt;&lt;p&gt;Android 中通过 id 来获取相应的资源文件，但由于 id 都是 int 型，不同类型的资源文件无法区别，在使用中可能会传入错误类型的 id。而通过 Resource Type Annotations 就可以避免这种错误。&lt;br&gt;如 ActionBar 中 setTitle 方法，若传入 &lt;code&gt;setTitle(R.drawable.title)&lt;/code&gt; 就会报错。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@StringRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resId)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Resource Type Annotations 主要有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@StringRes&lt;/li&gt;
&lt;li&gt;@DrawableRes&lt;/li&gt;
&lt;li&gt;@ColorRes&lt;/li&gt;
&lt;li&gt;@InterpolatorRes&lt;br&gt;除了特定类型的 Annotation，还有一种不指定资源类型的注解 @AnyRes。在不确定是哪种类型资源的情况下使用，如 &lt;code&gt;Resources#getResourceName(@AnyRes int resId)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面介绍的，还有 RGB Color Integers、Permission、Value Constraints 等相关的 Annotations，可参考&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;进行学习。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tools.android.com/tech-docs/support-annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/intl/zh-cn/tools/debugging/annotations.html#enum-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/intl/zh-cn/tools/debugging/annotations.html#enum-annotations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Support Annotion 是指 Andoid Support Library 从 19.1 开始引入的注解库，通过&lt;code&gt;compile &amp;#39;com.android.support:support-annotations:22.2.0&amp;#39;&lt;/code&gt;就能引入。它可以检验代码潜在的问题并提醒你去修正它。&lt;br&gt;下面简单介绍下我常用的几个注解，更加全面的介绍可以看&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot;&gt;官方文档&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.github.io/categories/Android/"/>
    
    
  </entry>
  
</feed>
