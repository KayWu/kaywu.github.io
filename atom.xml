<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kay Wu&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kaywu.xyz/"/>
  <updated>2018-04-30T11:28:57.000Z</updated>
  <id>http://kaywu.xyz/</id>
  
  <author>
    <name>Kay Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图解密码技术</title>
    <link href="http://kaywu.xyz/2018/04/30/cryptography/"/>
    <id>http://kaywu.xyz/2018/04/30/cryptography/</id>
    <published>2018-04-30T05:48:55.000Z</published>
    <updated>2018-04-30T11:28:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a>对称密码</h2><p>对称密码是一种用相同的密钥进行加密和解密的技术，用于确保消息的机密性。尽管对称密码能够确保消息的机密性，但需要解决将解密密钥配送给接受者的密钥配送问题。<br>一次性密码本的原理是将明文与一串随机的比特序列进行 XOR 运算。即使用暴力破解法遍历整个密钥空间，也绝对无法被破译。<br>随着计算机的进步，现在 DES 已经能够被暴力破解，强度大不如前了。<br>AES 是取代其 DES 而成为新标准的一种对称密码算法。在 2000 年从候选算法中选出了一种名为 Rijndael 的对称密码算法，并将其确定为了 AES。</p><a id="more"></a><h2 id="分组密码的模式"><a href="#分组密码的模式" class="headerlink" title="分组密码的模式"></a>分组密码的模式</h2><p>密码算法可以分为分组密码和流密码两种。<br>分组密码是每次只能处理特定长度的一块数据的一类密码算法，这里的“一块”就称为分组。此外，一个分组的比特数就称为分组长度。例如，DES 和三重 DES 的分组长度都是 64 比特。AES 的分组长度可以从 128 比特、192 比特、256 比特中进行选择。<br>流密码是对数据流进行连续处理的一类密码算法。一般以 1 比特、8 比特或 32 比特等为单位进行加密和解密。<br>分组密码算法只能加密固定长度的分组，当明文长度超过分组密码的分组长度时，就需要对分组密码算法进行迭代。而迭代的方式就成为分组密码的模式。</p><h3 id="ECB-模式"><a href="#ECB-模式" class="headerlink" title="ECB 模式"></a>ECB 模式</h3><p>Electronic CodeBook，电子密码本模式，不应使用。<br>将明文分组加密之后的结果将直接成为密文分组。</p><h3 id="CBC-模式"><a href="#CBC-模式" class="headerlink" title="CBC 模式"></a>CBC 模式</h3><p>Cipher Block Chaining，密文分组链接模式，推荐使用。<br>将明文分组与前一个密文分组进行 XOR 运算，然后再进行加密。</p><h3 id="CFB-模式"><a href="#CFB-模式" class="headerlink" title="CFB 模式"></a>CFB 模式</h3><p>Ciper-Feedback，密文反馈模式，现在已不使用，推荐用 CTR 模式代替。<br>前一个密文分组被送回到密码算法的输入端。</p><h3 id="OFB-模式"><a href="#OFB-模式" class="headerlink" title="OFB 模式"></a>OFB 模式</h3><p>Output-Feedback 输出反馈模式，推荐用 CTR 模式代替。<br>密码算法的输出会反馈到密码算法的输入中，属于流密码。</p><h3 id="CTR-模式"><a href="#CTR-模式" class="headerlink" title="CTR 模式"></a>CTR 模式</h3><p>CounteT，计数器模式，推荐使用。<br>通过逐次累加的计数器进行加密来生成密钥流的流密码。</p><h2 id="公钥密码"><a href="#公钥密码" class="headerlink" title="公钥密码"></a>公钥密码</h2><p>密钥配送问题解决方法</p><ul><li>事先共享密钥</li><li>密钥分配中心</li><li>Diffie-Hellman 密钥交换</li><li>公钥密码</li></ul><p>公钥密码是一种用不同的密钥进行加密和解密的技术。公钥密码解决了密钥配送问题，但没有解决公钥认证问题，且它的处理速度只有对称密钥的几百分之一。<br>使用最广泛的一种公钥密码算法是 RSA。</p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>$密文 = 明文^E mod N$<br>$明文 = 密文^D mod N$</p><p>私钥：(D, N)<br>公钥：(E, N)</p><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>中间人攻击就是主动攻击者混入发送者和接收者的中间，对发送者伪装成接收者，对接收者伪装成发送者的攻击方式。</p><h2 id="混合密码系统"><a href="#混合密码系统" class="headerlink" title="混合密码系统"></a>混合密码系统</h2><ul><li>用公钥密码加密对称密码中所使用的密钥</li><li>用对称密码来加密明文</li></ul><h2 id="单向散列函数"><a href="#单向散列函数" class="headerlink" title="单向散列函数"></a>单向散列函数</h2><p>单向散列函数有一个输入和一个输出，其中输入称为消息，输出称为散列值。单向散列函数可以根据信息的内容计算出散列值，而散列值就可以被用来检查消息的完整性。<br>难以发现碰撞的性质称为抗碰撞性。密码技术中所使用的单向散列函数，都需要具备抗碰撞性。<br>当给定某条消息的散列值时，单向散列函数必须确保要找到和该条消息具有相同散列值的另外一条消息是非常困难的，这一性质称为弱抗碰撞性。所谓强抗碰撞性，是指要找到散列值相同的两条不同的消息是非常困难的。<br>单向散列函数必须具备单向性。单向性指的是无法通过散列值反算出消息的性质。<br>使用单向散列函数可以辨别出篡改，但无法辨别出伪装。</p><h2 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h2><p>消息认证码（message athentiation code）是一种确认完整性并进行认证的技术，取三个单词的首字母，简称为 MAC。<br>消息认证码的输入包括任意长度的消息和一个发送者与接受者之间的共享的密钥，它可以输出固定长度的数据，这个数据称为 MAC 值。<br>由于发送者和接收者共享相同的密钥，因为会产生无法对第三方证明以及无法防止否认等问题。</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>数字签名使用公钥和私钥组成的密钥对，用私钥加密相当于生成签名，用公钥解密则相当于验证签名。<br>通过数字签名我们可以识别篡改和伪装，还可以防止否认。</p><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>公钥证书包括姓名、组织、邮箱地址等个人信息以及属于此人的公钥，并由认证机构施加数字签名。</p><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>将随机数的性质分为以下三类：</p><ul><li>随机性：不存在统计学偏差，是完全杂乱的数列。弱伪随机数</li><li>不可预测性：不能从过去的数列推测出下一个出现的数。强伪随机数</li><li>不可重现性：除非将数列本身保存下来，否则不能重现相同的数列。真随机数<br>在密码技术中使用的伪随机数生成器，是以具备不可重现性的真随机数作为伪随机数的种子，来生成具备不可预测性的强伪随机数。</li></ul><h2 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h2><h3 id="握手阶段"><a href="#握手阶段" class="headerlink" title="握手阶段"></a>握手阶段</h3><p><img src="/img/tls_handshake.png" alt=""><br><a href="https://blog.cloudflare.com/announcing-keyless-ssl-all-the-benefits-of-cloudflare-without-having-to-turn-over-your-private-ssl-keys/" target="_blank" rel="noopener">来源</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>图解密码技术</li><li><a href="https://blog.cloudflare.com/announcing-keyless-ssl-all-the-benefits-of-cloudflare-without-having-to-turn-over-your-private-ssl-keys/" target="_blank" rel="noopener">Announcing Keyless SSL™</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对称密码&quot;&gt;&lt;a href=&quot;#对称密码&quot; class=&quot;headerlink&quot; title=&quot;对称密码&quot;&gt;&lt;/a&gt;对称密码&lt;/h2&gt;&lt;p&gt;对称密码是一种用相同的密钥进行加密和解密的技术，用于确保消息的机密性。尽管对称密码能够确保消息的机密性，但需要解决将解密密钥配送给接受者的密钥配送问题。&lt;br&gt;一次性密码本的原理是将明文与一串随机的比特序列进行 XOR 运算。即使用暴力破解法遍历整个密钥空间，也绝对无法被破译。&lt;br&gt;随着计算机的进步，现在 DES 已经能够被暴力破解，强度大不如前了。&lt;br&gt;AES 是取代其 DES 而成为新标准的一种对称密码算法。在 2000 年从候选算法中选出了一种名为 Rijndael 的对称密码算法，并将其确定为了 AES。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://kaywu.xyz/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>转码微信 speex</title>
    <link href="http://kaywu.xyz/2018/04/22/wechat-speex/"/>
    <id>http://kaywu.xyz/2018/04/22/wechat-speex/</id>
    <published>2018-04-22T06:29:35.000Z</published>
    <updated>2018-04-22T08:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>H5 可以使用微信 jssdk 提供的录音接口，将录音上传到微信的服务器。而后端可以通过<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1444738727" target="_blank" rel="noopener">获取微信录音</a>的接口下载录音。<br>录音有两种格式，一种是 8K 采样率的 amr 格式。还有一种是 16K 采样率的 speex 格式。speex 格式的录音更清晰，当然文件也更大。同样的录音，speex 格式大约是 amr 格式的 4 倍。但同时，amr 格式的录音失真十分严重。如果有播放、语音识别的需求，建议还是采用 speex 格式的录音。<br>不知出于什么考虑，微信对 speex 格式的录音做了加工，得使用 speex 官方解码库结合微信的解码库才能进行转码。<br>下文介绍如何使用 docker 编译可转码微信 speex 的程序。</p><a id="more"></a><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>首先 <code>git clone https://github.com/ppninja/wechat-speex-declib</code>。该仓库在<a href="http://wximg.gtimg.com/shake_tv/mpwiki/declib.zip" target="_blank" rel="noopener">微信解码库示例</a> 的基础上添加了 Makefile。<br>由于编译需要使用 linux，下文使用 ubuntu 16.04 作为示例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 启动 ubuntu 16.04 的 docker 并运行 bash，绑定本机 wechat-speex-declib 的地址到 docker 的 /opt/speex 上</span><br><span class="line">docker pull ubuntu:16.04</span><br><span class="line">docker run -i -t --mount type=bind,source=(wechat-speex-declib 的绝对地址替换),target=/opt/speex ubuntu:16.04 /bin/bash</span><br><span class="line"></span><br><span class="line"># 修改为阿里云的镜像源，提升 apt-get 的速度</span><br><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt; END</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"># 安装 gcc 等编译工具</span><br><span class="line">apt-get build-essential</span><br><span class="line"># 安装 speex 开发库</span><br><span class="line">apt-get libspeex-dev</span><br><span class="line"></span><br><span class="line">cd /opt/speex</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>注意这里安装的 speex 开发库是 libspeex-dev，而不是 speex。speex 库提供了 speex 编码、解码的命令行，而 libspeex-dev 库提供了开发所需的文件。</p><p>执行完后在 bin 目录下会新增 speex_decode，也就是编译出的可执行文件。<br>通过执行 <code>./speex_decode test.speex test.wav</code> 就可以将微信定制的 speex 转码成标准的 wav 格式了。<br>提醒下，转码产生的 wav 格式未压缩，体积很大。可以通过 ffmpeg 等工具进行处理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1444738727" target="_blank" rel="noopener">获取微信录音</a></li><li><a href="http://wximg.gtimg.com/shake_tv/mpwiki/declib.zip" target="_blank" rel="noopener">微信解码库示例</a></li><li><a href="https://github.com/ppninja/wechat-speex-declib" target="_blank" rel="noopener">wechat speex declib</a></li><li><a href="https://packages.qa.debian.org/s/speex.html" target="_blank" rel="noopener">speex binaries</a></li></ul><!-- 获取临时素材 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;H5 可以使用微信 jssdk 提供的录音接口，将录音上传到微信的服务器。而后端可以通过&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1444738727&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;获取微信录音&lt;/a&gt;的接口下载录音。&lt;br&gt;录音有两种格式，一种是 8K 采样率的 amr 格式。还有一种是 16K 采样率的 speex 格式。speex 格式的录音更清晰，当然文件也更大。同样的录音，speex 格式大约是 amr 格式的 4 倍。但同时，amr 格式的录音失真十分严重。如果有播放、语音识别的需求，建议还是采用 speex 格式的录音。&lt;br&gt;不知出于什么考虑，微信对 speex 格式的录音做了加工，得使用 speex 官方解码库结合微信的解码库才能进行转码。&lt;br&gt;下文介绍如何使用 docker 编译可转码微信 speex 的程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信" scheme="http://kaywu.xyz/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>如何用 Markdown 写 PPT</title>
    <link href="http://kaywu.xyz/2017/10/19/reveal-md/"/>
    <id>http://kaywu.xyz/2017/10/19/reveal-md/</id>
    <published>2017-10-19T06:21:21.000Z</published>
    <updated>2018-03-12T15:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/hakimel/reveal.js/" target="_blank" rel="noopener">reveal-js</a> 是通过网页来制作 PPT 的 JavaScript 框架，通过它可以轻松制作精致的网页 PPT。它自身也支持 Markdown。<br>但使用过几次之后，感觉对于日常使用还是稍重了些。每次新建 PPT 都需要复制粘贴 boilerplate code。</p><p><a href="https://github.com/webpro/reveal-md" target="_blank" rel="noopener">reveal-md</a> 让你从这些繁琐的步骤中解放出来。它使用 reveal-js 自带的 Markdown 功能，让你只需写 Markdown，其他的事它帮你搞定。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>简单地说下如何使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir slides &amp;&amp; cd slides</span><br><span class="line">yarn init -y</span><br><span class="line">yarn add reveal-md</span><br><span class="line">yarn exec reveal-md demo</span><br></pre></td></tr></table></figure></p><p>此时炫酷的 PPT 网页就在你眼前呈现了。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>标准的 Markdown 语法，默认 <code>---</code> 作为 PPT 页面的分割线。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Title</span><br><span class="line"></span><br><span class="line">* Point 1</span><br><span class="line">* Point 2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## Second slide</span><br><span class="line"></span><br><span class="line">&gt; Best quote ever.</span><br><span class="line"></span><br><span class="line">Note: speaker notes FTW!</span><br></pre></td></tr></table></figure></p><h3 id="演示命令"><a href="#演示命令" class="headerlink" title="演示命令"></a>演示命令</h3><p>演示命令 <code>reveal-md</code>，启动本地 server 并使用 reveal.js 渲染 Markdown 文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn exec reveal-md demo.md</span><br></pre></td></tr></table></figure></p><p>更详细的配置请查看 <a href="https://github.com/webpro/reveal-md" target="_blank" rel="noopener">reveal-md 文档</a> 和 <a href="https://github.com/hakimel/reveal.js/" target="_blank" rel="noopener">reveal-js 文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;reveal-js&lt;/a&gt; 是通过网页来制作 PPT 的 JavaScript 框架，通过它可以轻松制作精致的网页 
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://kaywu.xyz/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Rails 通过 path 实现 subdomain —— default_url_options 的妙用</title>
    <link href="http://kaywu.xyz/2017/10/17/default_url_options/"/>
    <id>http://kaywu.xyz/2017/10/17/default_url_options/</id>
    <published>2017-10-17T14:18:46.000Z</published>
    <updated>2018-03-12T15:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发微信开放平台，需要通过 url 来区别不同的第三方。最简单直接的方法，就是通过 subdomain 来实现。<br>比如有两个第三方 A、B，那么 A 的域名为 A.example.com，B 的域名为 B.example.com。但这次由于 https 证书的问题只能通过 path 来实现，也就是 A 的域名为 <a href="http://www.example.com/A，B" target="_blank" rel="noopener">www.example.com/A，B</a> 的域名为 <a href="http://www.example.com/B。" target="_blank" rel="noopener">www.example.com/B。</a></p><p>但通过 path 实现会有一个严重的问题，就是如何保证生成的 url 带有第三方的信息。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scope <span class="symbol">path:</span> <span class="string">'/:third_party'</span> <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:orders</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面的配置使用 orders_path 时会报错 <code>missing required keys: [:third_path]</code>。<br>最笨的办法莫过于给所有的 url 手动加上，但这方法随着项目增大会变得不可行。</p><p>我们希望 url 的生成可以更加智能，当访问 url 为 <a href="http://www.example.com/A" target="_blank" rel="noopener">www.example.com/A</a> 时，使用 orders_path 可以自动生成 /A/orders。从逻辑上，这是行得通的。</p><p>首先想到 route 可以添加 default 配置，于是做了以下尝试，可惜报错了。在 route 时只能配置静态的默认值。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># undefined local variable or method `params'</span></span><br><span class="line">scope <span class="symbol">path:</span> <span class="string">'/:third_party'</span>, <span class="symbol">default:</span> &#123;<span class="symbol">third_party:</span> params[<span class="symbol">:third_party</span>]&#125; <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:orders</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>那么，有没有类似的方法，提供 url default 配置的功能呢？这时就轮到 default_url_options 出场了。<br>default_url_options 的用处不仅仅是在 config 时设置默认的 host，每个 Controller 都有该方法，调用 url_helper 时会结合该方法生成最终的 url。</p><p>在对应的 Controller 里添加以下代码，这时调用 orders_path 就会根据域名中的 third_parth 生成对应的域名了。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default_url_options</span></span></span><br><span class="line">  &#123;<span class="symbol">third_party:</span> params[<span class="symbol">:third_party</span>]&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>解决了生成 url 的问题，我们还需要解决测试时 url 的问题。这里我对 ActionController::TestCase 进行了 monkey patch，供大家参考。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionController::TestCase</span></span></span><br><span class="line"></span><br><span class="line">  alias_method <span class="symbol">:orig_process</span>, <span class="symbol">:process</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(action, <span class="symbol">method:</span> <span class="string">"GET"</span>, <span class="symbol">params:</span> &#123;&#125;, <span class="symbol">session:</span> <span class="literal">nil</span>, <span class="symbol">body:</span> <span class="literal">nil</span>, <span class="symbol">flash:</span> &#123;&#125;, <span class="symbol">format:</span> <span class="literal">nil</span>, <span class="symbol">xhr:</span> <span class="literal">false</span>, <span class="symbol">as:</span> <span class="literal">nil</span>)</span></span></span><br><span class="line">    <span class="keyword">if</span> @controller.is_a? WechatBaseController</span><br><span class="line">      params.merge!(&#123;<span class="symbol">app_alias:</span> <span class="string">'test'</span>&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    orig_process(action, <span class="symbol">method:</span> method, <span class="symbol">params:</span> params, <span class="symbol">session:</span> session, <span class="symbol">body:</span> body, <span class="symbol">flash:</span> flash, <span class="symbol">format:</span> format, <span class="symbol">xhr:</span> xhr, <span class="symbol">as:</span> as)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在开发微信开放平台，需要通过 url 来区别不同的第三方。最简单直接的方法，就是通过 subdomain 来实现。&lt;br&gt;比如有两个第三方 A、B，那么 A 的域名为 A.example.com，B 的域名为 B.example.com。但这次由于 https 证书的问
      
    
    </summary>
    
    
      <category term="Rails" scheme="http://kaywu.xyz/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>微信开发总结</title>
    <link href="http://kaywu.xyz/2017/09/10/wechat-development/"/>
    <id>http://kaywu.xyz/2017/09/10/wechat-development/</id>
    <published>2017-09-10T07:47:00.000Z</published>
    <updated>2017-09-17T15:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发了基于微信的相关项目，主要是微信的网页开发、微信支付以及发送消息这块的内容。项目本身没什么难度，但由于微信封闭的体系、混乱的配置以及分散的文档，爬了不少的坑，这里总结下经验。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>先说说微信的文档。微信的文档不是统一的，比如公众平台技术文档在<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">一个网站</a>，而支付文档在<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1" target="_blank" rel="noopener">另一个网站</a>，但支付文档所使用的 js 的相关文档又在前一个网站。除此之外，还有<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html" target="_blank" rel="noopener">小程序文档</a>、<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419318292&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">开放平台文档</a>。从这混乱的文档相信你也能或多或少体会到开发的难处。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>出于安全性（更多是封闭性）的考虑，微信的配置繁琐且复杂，这里我把整个流程都记录下来以供参考。<br>首先登录公众平台，在开发-基本配置里获得 <code>AppSecret</code> 并保存下来，之后网站就不会再显示开发者密码，只能重置。<br>同样在该页面，配置 IP 白名单。如果你需要接收用户公众号的消息以及事件推送，同一页面添加服务器配置。<br>然后，在设置-公众号设置-功能设置，按照说明对业务域名、JS 接口安全域名、网页授权域名进行设置。<br>如果有微信支付的需求，去<a href="https://pay.weixin.qq.com" target="_blank" rel="noopener">微信商户平台</a>，商户平台-产品中心-开发配置中设置公众号支付的授权目录。注意，授权目录必须是发起支付网址的上一级目录。举例来说，<br>发起支付的网址为 <code>www.xxx.com/orders/22/pay</code>，那么支付目录就必须为 <code>www.xxx.com/orders/22/</code>，填 <code>www.xxx.com/</code> 或者 <code>www.xxx.com/orders/</code> 都是不行的。再加上支付的授权目录只能填 5 个，发起支付的域名得注意设计。</p><p>PS: 没有公众号的朋友可以通过微信的<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">测试号</a>来试验除微信支付以外大部分的功能。</p><a id="more"></a><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>先简单地介绍下常见的开发概念。</p><ul><li>access_token：通过 AppID 和 AppSecret 获得，是公众号的全局唯一接口调用凭据，调用各接口时都需使用。由于是全局唯一，所以建议正式环境、测试环境使用两个公众号，不然会各自冲突。</li><li>jsapi_ticket：通过 access_token 获取，是公众号用于调用微信 JS 接口的临时票据。网页在使用 JS-SDK 的时需要先调用 config 接口，其中的参数 signature 需要用到 jsapi_ticket 生成。</li></ul><p>注意下 access_token、jsapi_ticket 有效期都为 2 小时，且每天的调用次数有限，需要做全局缓存以及过期自动刷新的处理。</p><p>我开发的项目使用了 Rails + <a href="https://github.com/Eric-Guo/wechat" target="_blank" rel="noopener">wechat gem</a> + <a href="https://github.com/jasl/wx_pay" target="_blank" rel="noopener">wx_pay gem</a>。wechat gem 自动管理 access_token、jsapi_ticket，封装了公众号的接口并提供了授权地址、调用 JS-SDK 的便捷方法，wx_pay gem 封装了支付相关的接口。强烈推荐使用，能够省去不少功夫。</p><h3 id="网页授权"><a href="#网页授权" class="headerlink" title="网页授权"></a>网页授权</h3><p>微信的网页授权也是常见的 OAuth 2.0，与其他网页不同的是有两个不同的 scope。</p><ul><li>以 snsapi_base 为 scope 发起的网页授权，可以获取进入页面的用户的openid，静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页。</li><li>以 snsapi_userinfo 为 scope 发起的网页授权，可以获取用户的基本信息。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。不同于用户管理类接口中的“获取用户基本信息接口”，需要该用户关注了公众号后，才能调用成功。</li></ul><h3 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h3><p>在调用微信支付前，需要从后端发起 unifiedorder 统一下单请求获取到 prepay_id，通过 prepay_id、AppID、商品平台的 key 等参数生成签名，最后调用 wx.chooseWXPay 发起微信支付。<br>注意，生成支付签名这边有很多的坑，比如 timestamp 在 wx.chooseWxPay 里是小写，而在生成签名时使用的是 timeStamp。尽量使用成熟的库来避免这种不知所谓的坑。<br>统一下单请求时会要求传入参数 notify_url，这个是异步接受微信支付结果通知的回调地址。注意该地址不能携带参数。举例来说 <code>https://www.xxx.com?a=1</code>，回调时 <code>a=1</code>会被省略。</p><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>发送消息主要有两大部分，其一是模板消息。<br>微信对模板消息有着严格的管理，所在行业有相应的模板库，你只能从模板库里选择添加到我的模板，向模板库里新增模板需要经过审核。<br>新增模板时最好记录下模板编号，因为添加到我的模板后，只能看见模板 ID，看不到原始的模板编号。而每一个公众号添加相同的模板时对应的模板 ID 是不一样的。</p><p>除模板消息之外，还有客服消息。客服消息又分文本消息、图片消息、语音消息等。文档里虽然没提，文本消息支持 <code>&lt;br&gt;</code> 换行、<code>&lt;a href=&quot;#&quot;&gt;</code> 超链接这些功能。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>刚开始开发微信时有一个很头疼的事，怎么才能做到本机调试呢。这里说下我个人的方法。<br>假设开发网站的域名是 <code>http://www.example.com</code>，通过修改 hosts、nginx 转发等方法，将 <code>http://www.example.com</code> 映射到本地端口如 <code>http://localhost:3000</code> 上。之后通过 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html" target="_blank" rel="noopener">微信开发者工具</a> 就可以本机调试了。<br>但是微信开发者工具也有其限制，比如不能模拟微信支付，这时候就需要用到手机了。手机通过 charles 代理，由于本机 <code>http://www.example.com</code> 的请求已经转发到本地端口，也就实现了本机调试。<br>同时还有 TBS Studio，可以通过 USB 连接手机实现真机调试。实际使用感觉效率一般，建议补充使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">微信公众平台技术文档</a></li><li><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1" target="_blank" rel="noopener">微信支付开发文档</a></li></ul><!-- 公众平台文档 --><!-- 微信支付文档 --><!-- 小程序文档 --><!-- 开放平台文档 --><!-- 微信测试号 --><!-- 微信商户平台 --><!-- wechat gem --><!-- wx_pay gem --><!-- 支付签名算法 --><!-- 微信开发工具 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开发了基于微信的相关项目，主要是微信的网页开发、微信支付以及发送消息这块的内容。项目本身没什么难度，但由于微信封闭的体系、混乱的配置以及分散的文档，爬了不少的坑，这里总结下经验。&lt;/p&gt;
&lt;h2 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h2&gt;&lt;p&gt;先说说微信的文档。微信的文档不是统一的，比如公众平台技术文档在&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1445241432&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一个网站&lt;/a&gt;，而支付文档在&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;另一个网站&lt;/a&gt;，但支付文档所使用的 js 的相关文档又在前一个网站。除此之外，还有&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小程序文档&lt;/a&gt;、&lt;a href=&quot;https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;amp;t=resource/res_list&amp;amp;verify=1&amp;amp;id=open1419318292&amp;amp;token=&amp;amp;lang=zh_CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开放平台文档&lt;/a&gt;。从这混乱的文档相信你也能或多或少体会到开发的难处。&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;出于安全性（更多是封闭性）的考虑，微信的配置繁琐且复杂，这里我把整个流程都记录下来以供参考。&lt;br&gt;首先登录公众平台，在开发-基本配置里获得 &lt;code&gt;AppSecret&lt;/code&gt; 并保存下来，之后网站就不会再显示开发者密码，只能重置。&lt;br&gt;同样在该页面，配置 IP 白名单。如果你需要接收用户公众号的消息以及事件推送，同一页面添加服务器配置。&lt;br&gt;然后，在设置-公众号设置-功能设置，按照说明对业务域名、JS 接口安全域名、网页授权域名进行设置。&lt;br&gt;如果有微信支付的需求，去&lt;a href=&quot;https://pay.weixin.qq.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信商户平台&lt;/a&gt;，商户平台-产品中心-开发配置中设置公众号支付的授权目录。注意，授权目录必须是发起支付网址的上一级目录。举例来说，&lt;br&gt;发起支付的网址为 &lt;code&gt;www.xxx.com/orders/22/pay&lt;/code&gt;，那么支付目录就必须为 &lt;code&gt;www.xxx.com/orders/22/&lt;/code&gt;，填 &lt;code&gt;www.xxx.com/&lt;/code&gt; 或者 &lt;code&gt;www.xxx.com/orders/&lt;/code&gt; 都是不行的。再加上支付的授权目录只能填 5 个，发起支付的域名得注意设计。&lt;/p&gt;
&lt;p&gt;PS: 没有公众号的朋友可以通过微信的&lt;a href=&quot;https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;测试号&lt;/a&gt;来试验除微信支付以外大部分的功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rails" scheme="http://kaywu.xyz/tags/Rails/"/>
    
      <category term="微信" scheme="http://kaywu.xyz/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>互联网创业核心技术：构建可伸缩的 Web 应用</title>
    <link href="http://kaywu.xyz/2017/07/13/core-tech/"/>
    <id>http://kaywu.xyz/2017/07/13/core-tech/</id>
    <published>2017-07-13T09:23:30.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>《互联网创业核心技术：构建可伸缩的 Web 应用》整本书围绕“可伸缩”三个字，对 Web 应用的每一层展开了全面细致的解说。<br>如果你和我一样，对负载均衡、水平伸缩之类的概念不是很了解，或者不清楚它在整个架构中的使用，那么你应该来读下这本书。<br>读完之后你会发现架构这东西是有迹可循的，是围绕一系列基本的原则建立起来的。</p><p>一图胜千言，这本书不仅有着易懂的语言，而且有大量简洁的示意图。<br><a id="more"></a><br><img src="/img/core_tech.png" alt=""><br>上图大致说明了本书涉及的内容，从前后端设计、存储设计，再到消息队列和缓存等的使用场景。</p><p>我读到这本书时颇有意外之喜，毕竟这是凑单的书，可见这书挺冷门的。在这里推荐一下，希望能有更多的人读到。<br>可以搭配 <a href="https://www.youtube.com/watch?v=-W9F__D3oY4" target="_blank" rel="noopener">Scalability Harvard Web Development (需翻墙)</a> 一起使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《互联网创业核心技术：构建可伸缩的 Web 应用》整本书围绕“可伸缩”三个字，对 Web 应用的每一层展开了全面细致的解说。&lt;br&gt;如果你和我一样，对负载均衡、水平伸缩之类的概念不是很了解，或者不清楚它在整个架构中的使用，那么你应该来读下这本书。&lt;br&gt;读完之后你会发现架构这东西是有迹可循的，是围绕一系列基本的原则建立起来的。&lt;/p&gt;
&lt;p&gt;一图胜千言，这本书不仅有着易懂的语言，而且有大量简洁的示意图。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://kaywu.xyz/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://kaywu.xyz/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>FactoryGirl 源码浅析</title>
    <link href="http://kaywu.xyz/2017/06/28/factory-girl-analysis/"/>
    <id>http://kaywu.xyz/2017/06/28/factory-girl-analysis/</id>
    <published>2017-06-28T09:21:20.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>FactoryGirl 是我个人十分喜欢的 Gem，它能很方便地模拟测试数据。使用技巧可见 <a href="http://www.jianshu.com/p/cca80f341d77" target="_blank" rel="noopener">FactoryGirl 技巧</a>。出于兴趣我研究了下它的源代码，说实话比想象得要复杂。由于 FactoryGirl 配置的灵活性以及 Ruby 本身的语言特点，使得它代码整体上比较飘逸。<br>这里我会对它最基础的方法进行分析，版本为 4.8.0。</p><h3 id="FactoryGirl-define"><a href="#FactoryGirl-define" class="headerlink" title="FactoryGirl.define"></a>FactoryGirl.define</h3><p>先从定义 Factory 开始。下面的代码定义了名为 user 的 Factory，它有一个名为 name 的属性，值为 Kay。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FactoryGirl.define <span class="keyword">do</span></span><br><span class="line">  factory <span class="symbol">:user</span> <span class="keyword">do</span></span><br><span class="line">    name <span class="string">'Kay'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>我们先找到 FactoryGirl.define 的入口，在 syntax/default.rb 里。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax/default.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">FactoryGirl</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Syntax</span></span></span><br><span class="line">    <span class="class"><span class="keyword">module</span> <span class="title">Default</span></span></span><br><span class="line">      <span class="keyword">include</span> Methods</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">define</span><span class="params">(&amp;block)</span></span></span><br><span class="line">        DSL.run(block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">DSL</span></span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">factory</span><span class="params">(name, options = &#123;&#125;, &amp;block)</span></span></span><br><span class="line">          factory = Factory.new(name, options)</span><br><span class="line">          proxy = FactoryGirl::DefinitionProxy.new(factory.definition)</span><br><span class="line">          proxy.instance_eval(&amp;block) <span class="keyword">if</span> block_given?</span><br><span class="line"></span><br><span class="line">          FactoryGirl.register_factory(factory)</span><br><span class="line"></span><br><span class="line">          proxy.child_factories.each <span class="keyword">do</span> <span class="params">|(child_name, child_options, child_block)|</span></span><br><span class="line">            parent_factory = child_options.delete(<span class="symbol">:parent</span>) <span class="params">||</span> name</span><br><span class="line">            factory(child_name, child_options.merge(<span class="symbol">parent:</span> parent_factory), &amp;child_block)</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">run</span><span class="params">(block)</span></span></span><br><span class="line">          new.instance_eval(&amp;block)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  extend Syntax::Default</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>从上面的代码分析可得，define 会调用 DSL.run，之后调用了 DSL#factory 方法，传入的参数 name 为 <code>:user</code>，block 为 <code>{ name &#39;Kay&#39; }</code>。我们重点看 factory 方法其中 4 行：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DSL#factory</span></span><br><span class="line">factory = Factory.new(name, options)</span><br><span class="line">proxy = FactoryGirl::DefinitionProxy.new(factory.definition)</span><br><span class="line">proxy.instance_eval(&amp;block) <span class="keyword">if</span> block_given?</span><br><span class="line"></span><br><span class="line">FactoryGirl.register_factory(factory)</span><br></pre></td></tr></table></figure></p><p>首先，会创建一个新的 Factory 对象，然后通过代理类 FactoryGirl::DefinitionProxy 对其进行封装，并执行其中的 block，最后注册这个 factory。其中 <code>proxy.instance_eval(&amp;block) if block_given?</code> 是属性赋值的关键。</p><p><code>{ name &#39;Kay&#39; }</code> 会调用 FactoryGirl::DefinitionProxy 的 name 方法，但由于代理类没有该方法，最终会执行 method_missing，而该方法实现了赋值的逻辑。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_missing</span><span class="params">(name, *args, &amp;block)</span></span></span><br><span class="line">  <span class="keyword">if</span> args.empty? &amp;&amp; block.<span class="literal">nil</span>?</span><br><span class="line">    @definition.declare_attribute(Declaration::Implicit.new(name, @definition, @ignore))</span><br><span class="line">  <span class="keyword">elsif</span> args.first.respond_to?(<span class="symbol">:has_key?</span>) &amp;&amp; args.first.has_key?(<span class="symbol">:factory</span>)</span><br><span class="line">    association(name, *args)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    add_attribute(name, *args, &amp;block)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>由于赋值除了固定值，还可能是 block 或者 association，这里对几种情况分别进行了处理。</p><p>FactoryGirl.define 的分析差不多结束了，method_missing 这一元编程的魔法在这里又发挥了巨大的作用。</p><h3 id="FactoryGirl-create"><a href="#FactoryGirl-create" class="headerlink" title="FactoryGirl.create"></a>FactoryGirl.create</h3><p>讲完了 Factory 是如何定义的，我们来研究下如何创建一个 Factory。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = FactoryGirl.create(<span class="symbol">:user</span>, <span class="symbol">name:</span> <span class="string">'Link'</span>)</span><br></pre></td></tr></table></figure></p><p>我们首先得找到 create 的入口。当搜寻了一遍之后会发现，并没有显式定义 create 的地方。看来该方法是动态定义的了。从官方文档上来看，create 定义在 FactoryGirl::Syntax::Methods。搜索之后发现 StrategySyntaxMethodRegistrar 里出现了给它动态添加方法的代码。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># strategy_syntax_method_registrar.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">FactoryGirl</span></span></span><br><span class="line">    private</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">define_singular_strategy_method</span></span></span><br><span class="line">      strategy_name = @strategy_name</span><br><span class="line"></span><br><span class="line">      define_syntax_method(strategy_name) <span class="keyword">do</span> <span class="params">|name, *traits_and_overrides, &amp;block|</span></span><br><span class="line">        FactoryRunner.new(name, strategy_name, traits_and_overrides).run(&amp;block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">define_syntax_method</span><span class="params">(name, &amp;block)</span></span></span><br><span class="line">      FactoryGirl::Syntax::Methods.module_exec <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> method_defined?(name) <span class="params">||</span> private_method_defined?(name)</span><br><span class="line">          undef_method(name)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        define_method(name, &amp;block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>用 create 替换 strategy_name，FactoryGirl.create 实质调用了 <code>FactoryRunner.new(name, :create, : traits_and_overrides).run(&amp;block)</code>。而 FactoryRunner#run 在进行了一些准备后，最终调用了 <code>factory.run(runner_strategy, @overrides, &amp;block)</code> 来创建对象。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Factory#run</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(build_strategy, overrides, &amp;block)</span></span></span><br><span class="line">  block <span class="params">||</span>= -&gt;(result) &#123; result &#125;</span><br><span class="line">  compile</span><br><span class="line">  strategy = StrategyCalculator.new(build_strategy).strategy.new</span><br><span class="line">  evaluator = evaluator_class.new(strategy, overrides.symbolize_keys)</span><br><span class="line">  attribute_assigner = AttributeAssigner.new(evaluator, build_class, &amp;compiled_constructor)</span><br><span class="line">  evaluation = Evaluation.new(attribute_assigner, compiled_to_create)</span><br><span class="line">  evaluation.add_observer(CallbacksObserver.new(callbacks, evaluator))</span><br><span class="line">  strategy.result(evaluation).tap(&amp;block)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>最后一行 <code>strategy.result(evaluation).tap(&amp;block)</code> 最终返回的是 evaluation.object，而 evaluation 把 object 委托给 attribute_assigner。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AttributeAssigner#object</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">object</span></span></span><br><span class="line">  @evaluator.instance = build_class_instance</span><br><span class="line">  build_class_instance.tap <span class="keyword">do</span> <span class="params">|instance|</span></span><br><span class="line">    attributes_to_set_on_instance.each <span class="keyword">do</span> <span class="params">|attribute|</span></span><br><span class="line">      instance.public_send(<span class="string">"<span class="subst">#&#123;attribute&#125;</span>="</span>, get(attribute))</span><br><span class="line">      @attribute_names_assigned &lt;&lt; attribute</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>build_class_instance 实质上调用了 User.new 方法，创建了 User 对象。<code>instance.public_send</code> 对该对象的属性进行赋值。</p><p>至此最关键的创建步骤说完了，我们简单地说下其他几行的作用。<br><code>compile</code> 主要处理 Factory 之间的继承关系。<br><code>StrategyCalculator.new(build_strategy).strategy.new</code> 为简单工厂，可以根据 Strategy 的名字找到对应的类。<br>evaluator 保存了属性的赋值。为什么不直接进行赋值，而要使用一个中间类？我觉得原因是，FactoryGirl 创建 user 时不仅可以给 user 的属性赋值，还可以给 evaluator 赋值。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:user</span> <span class="keyword">do</span></span><br><span class="line">    name <span class="string">"John Doe"</span></span><br><span class="line">    factory <span class="symbol">:user_with_posts</span> <span class="keyword">do</span></span><br><span class="line">      transient <span class="keyword">do</span></span><br><span class="line">        posts_count <span class="number">5</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      after(<span class="symbol">:create</span>) <span class="keyword">do</span> <span class="params">|user, evaluator|</span></span><br><span class="line">        create_list(<span class="symbol">:post</span>, evaluator.posts_count, <span class="symbol">user:</span> user)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">create(<span class="symbol">:user_with_posts</span>, <span class="symbol">posts_count:</span> <span class="number">15</span>)</span><br></pre></td></tr></table></figure></p><p>这里的 posts_count 不是 user 本身的属性，而属于 evaluator。<br>AttributeAssigner 创建了 user 对象，并给它赋值。<br>Evaluation 是对 Strategy 回调方法的一个封装，比如 Strategy::Create，都是直接调用的 evaluation 的方法。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Strategy::Create#result</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(evaluation)</span></span></span><br><span class="line">  evaluation.object.tap <span class="keyword">do</span> <span class="params">|instance|</span></span><br><span class="line">    evaluation.notify(<span class="symbol">:after_build</span>, instance)</span><br><span class="line">    evaluation.notify(<span class="symbol">:before_create</span>, instance)</span><br><span class="line">    evaluation.create(instance)</span><br><span class="line">    evaluation.notify(<span class="symbol">:after_create</span>, instance)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>顺带说下，compiled_constructor、compiled_to_create 在经过千辛万苦的查找后，是两个非常简单的 block。compiled_constructor 为 <code>{ new }</code>，而 compiled_to_create 为 <code>{ |instance| instance.save! }</code>，来自 configuration.rb 19、20 行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于水平精力有限，只简单地分析了最基础的 define 和 create 方法。<br>define 使用了 method_missing 来实现属性的赋值。由于 FactoryGirl create 对象时能通过很灵活的方式，比如 trait，使得其代码在创建对象时要考虑各方面的配置。这里只抽出了最主要的流程进行说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FactoryGirl 是我个人十分喜欢的 Gem，它能很方便地模拟测试数据。使用技巧可见 &lt;a href=&quot;http://www.jianshu.com/p/cca80f341d77&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FactoryGirl 技巧&lt;/a&gt;。出于兴趣我研究了下它的源代码，说实话比想象得要复杂。由于 FactoryGirl 配置的灵活性以及 Ruby 本身的语言特点，使得它代码整体上比较飘逸。&lt;br&gt;这里我会对它最基础的方法进行分析，版本为 4.8.0。&lt;/p&gt;
&lt;h3 id=&quot;FactoryGirl-define&quot;&gt;&lt;a href=&quot;#FactoryGirl-define&quot; class=&quot;headerlink&quot; title=&quot;FactoryGirl.define&quot;&gt;&lt;/a&gt;FactoryGirl.define&lt;/h3&gt;&lt;p&gt;先从定义 Factory 开始。下面的代码定义了名为 user 的 Factory，它有一个名为 name 的属性，值为 Kay。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FactoryGirl.define &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name &lt;span class=&quot;string&quot;&gt;&#39;Kay&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://kaywu.xyz/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://kaywu.xyz/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式必知必会</title>
    <link href="http://kaywu.xyz/2017/05/30/regex/"/>
    <id>http://kaywu.xyz/2017/05/30/regex/</id>
    <published>2017-05-30T09:37:21.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h2><h3 id="匹配纯文本"><a href="#匹配纯文本" class="headerlink" title="匹配纯文本"></a>匹配纯文本</h3><p>正则：<code>Ben</code></p><blockquote></blockquote><p>Hello, my name is <code>Ben</code>. Please visit my website at <a href="http://www.forta.com/" target="_blank" rel="noopener">http://www.forta.com/</a>.</p><h3 id="匹配任意字符"><a href="#匹配任意字符" class="headerlink" title="匹配任意字符"></a>匹配任意字符</h3><p>. 匹配任意单个字符。在绝大多数的正则表达式实现里，. 只能匹配除换行符以外的任何单个字符。<br>正则：<code>sales.</code></p><blockquote></blockquote><p><code>sales1</code>.xls<br>orders3.xls<br><code>sales2</code>.xls<br><code>sales3</code>.xls<br>apac1.xls<br>europe2.xls<br>na1.xls<br>na2.xls<br>sa1.xls</p><a id="more"></a><h3 id="匹配特殊字符"><a href="#匹配特殊字符" class="headerlink" title="匹配特殊字符"></a>匹配特殊字符</h3><p>元字符是一些在正则表达式里有着特殊含义的字符。如英语句号（.）是一个元字符，它可以用来匹配任何一个单个字符。因为元字符在正则表达式里有着特殊的含义，所以这些字符就无法用来代表它们本身。比如你不能使用 . 类匹配 . 本身。<br>在元字符的前面加上一个反斜杠就可以对它进行转移，转义序列 . 将匹配 . 本身。<br>正则：<code>.a.\.xls</code></p><blockquote></blockquote><p>sales1.xls<br>orders3.xls<br>sales2.xls<br>sales3.xls<br>apac1.xls<br>europe2.xls<br><code>na1.xls</code><br><code>na2.xls</code><br><code>sa1.xls</code></p><h2 id="匹配一组字符"><a href="#匹配一组字符" class="headerlink" title="匹配一组字符"></a>匹配一组字符</h2><h3 id="匹配多个字符中的某一个"><a href="#匹配多个字符中的某一个" class="headerlink" title="匹配多个字符中的某一个"></a>匹配多个字符中的某一个</h3><p>可以使用元字符 [  和 ] 来定义一个字符集合，在使用 [ 和 ] 定义的字符集合里，这两个元字符之间的所有字符都是该集合的组成部分，字符集合的匹配结果是能够与该集合里的任意一个成员想匹配的文本。<br>正则：<code>[ns]a.\.xls</code></p><blockquote></blockquote><p>sales1.xls<br>orders3.xls<br>sales2.xls<br>sales3.xls<br>apac1.xls<br>europe2.xls<br><code>na1.xls</code><br><code>na2.xls</code><br><code>sa1.xls</code><br>ca1.xls</p><h3 id="利用字符集合区间"><a href="#利用字符集合区间" class="headerlink" title="利用字符集合区间"></a>利用字符集合区间</h3><p>模式 [0-9] 的功能与 [0123456789] 完全等价。</p><p>正则：<code>[ns]a[0-9]\.xls</code></p><blockquote></blockquote><p>sales1.xls<br>orders3.xls<br>sales2.xls<br>sales3.xls<br>apac1.xls<br>europe2.xls<br><code>na1.xls</code><br><code>na2.xls</code><br><code>sa1.xls</code><br>ca1.xls</p><p>其他常用的字符区间：<br>A-Z：匹配从 A 到 Z 的所有大写字母。<br>a-z：匹配从 a 到 z 的所有小写字母。</p><h3 id="取非匹配"><a href="#取非匹配" class="headerlink" title="取非匹配"></a>取非匹配</h3><p>用元字符 ^ 来表明你相对一个字符集合进行取非匹配，也就是除了那个字符集里的字符，其他字符都可以匹配。<br>正则：<code>[ns]a[^0-9]\.xls</code></p><blockquote></blockquote><p>sales1.xls<br>orders3.xls<br>sales2.xls<br>sales3.xls<br>apac1.xls<br>europe2.xls<br><code>sam.xls</code><br>na1.xls<br>na2.xls<br>sa1.xls<br>ca1.xls</p><h3 id="匹配特定的字符类型"><a href="#匹配特定的字符类型" class="headerlink" title="匹配特定的字符类型"></a>匹配特定的字符类型</h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>任何一个数字字符（等价于[0-9]）</td></tr><tr><td>\D</td><td>任何一个非数字字符（等价于[^0-9]）</td></tr><tr><td>\w</td><td>任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）</td></tr><tr><td>\W</td><td>任何一个非字母数字或非下划线字符（等价于[^a-zA-Z0-9_]）</td></tr></tbody></table><p>正则：<code>myArray\[\d\]</code></p><blockquote></blockquote><p>var myArray = new Array();<br>…<br>if (<code>myArray[0]</code> == 0) {<br>…<br>}</p><p>正则：<code>\w\d\w\d\w\d</code></p><blockquote></blockquote><p>11213<br><code>A1C2E3</code><br>48075<br>48237<br><code>M1B4F2</code><br>90046<br><code>H1H2H2</code></p><h3 id="匹配空白字符"><a href="#匹配空白字符" class="headerlink" title="匹配空白字符"></a>匹配空白字符</h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>[\b]</td><td>回退（并删除）一个字符（Backspace键）</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\s</td><td>任何一个空白字符（等价于[\f\n\r\t\v]）</td></tr><tr><td>\S</td><td>任何一个非空白字符（等价于[^\f\n\r\t\v]）</td></tr></tbody></table><h2 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h2><h3 id="匹配一个或多个字符"><a href="#匹配一个或多个字符" class="headerlink" title="匹配一个或多个字符"></a>匹配一个或多个字符</h3><ul><li>匹配一个或多个字符（至少一个；不匹配零个字符的情况）。<br>正则：<code>\w+@\w+\.\w+</code><blockquote></blockquote>Send personal email to <a href="mailto:`ben@forta.com" target="_blank" rel="noopener">`ben@forta.com</a><code>. For questions about a book use</code><a href="mailto:support@forta.com" target="_blank" rel="noopener">support@forta.com</a><code>. Feel free to send unsolicited email to</code><a href="mailto:spam@forta.com" target="_blank" rel="noopener">spam@forta.com</a>` (wouldn’t it be nice if it were that simple, huh?).</li></ul><h3 id="匹配零个或多个字符"><a href="#匹配零个或多个字符" class="headerlink" title="匹配零个或多个字符"></a>匹配零个或多个字符</h3><ul><li>元字符匹配零个或多个字符。<br>正则：<code>\w+[\w.]*@[\w.]+\.\w+</code><blockquote></blockquote>Hello, <a href="mailto:`.ben@forta.com" target="_blank" rel="noopener">`.ben@forta.com</a>` is my email address.</li></ul><h3 id="匹配零个或一个字符"><a href="#匹配零个或一个字符" class="headerlink" title="匹配零个或一个字符"></a>匹配零个或一个字符</h3><p>? 只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。<br>正则：<code>https?://[\w./]+</code></p><blockquote></blockquote><p>The URL is <code>http://www.forta.com/</code>, to connect securely use <code>https://www.forta.com/</code> instead.</p><h3 id="匹配的重复次数"><a href="#匹配的重复次数" class="headerlink" title="匹配的重复次数"></a>匹配的重复次数</h3><p>{3}意味着模式里的前一个字符（或字符集合）必须在原始文本里连续重复出现 3 次才算是一个匹配。<br>{2, 4} 的含义是最少重复 2 次、最多重复 4 次。<br>{3，} 表示至少重复 3 次。</p><h3 id="懒惰型元字符"><a href="#懒惰型元字符" class="headerlink" title="懒惰型元字符"></a>懒惰型元字符</h3><p>正则：<code>&lt;[Bb]&gt;.*&lt;/[Bb]&gt;</code></p><blockquote></blockquote><p>This offer is not available to customers living in <code>&lt;B&gt;AK&lt;/B&gt; and &lt;B&gt;HI&lt;/B&gt;</code>.</p><p>因为 * 和 + 都是所谓的“贪婪型”元字符，它们在进行匹配时的行为模式是多多益善而不是适可而止的，会尽可能地从一段文本的开头一直匹配到这段文本的末尾。<br>在不需要这种“贪婪行为”的时候该怎么办？答案是使用这些元字符的“懒惰型”版本。懒惰型元字符只要给贪婪性元字符加上一个 ? 后缀即可。</p><table><thead><tr><th>贪婪型元字符</th><th>懒惰型元字符</th></tr></thead><tbody><tr><td>*</td><td>*?</td></tr><tr><td>+</td><td>+?</td></tr><tr><td>{n, }</td><td>{n, }?</td></tr></tbody></table><p>正则：<code>&lt;[Bb]&gt;.*?&lt;/[Bb]&gt;</code></p><blockquote></blockquote><p>This offer is not available to customers living in <code>&lt;B&gt;AK&lt;/B&gt;</code> and <code>&lt;B&gt;HI&lt;/B&gt;</code>.</p><h2 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h2><h3 id="单词边界"><a href="#单词边界" class="headerlink" title="单词边界"></a>单词边界</h3><p>\b 用来匹配一个单词的开始或结尾。<br>简单地说，\b 匹配的是一个这样的位置，这个位置位于一个能够用户构成单词的字符（字母、数字和下划线，也就是与 \w 相匹配的字符）和一个不能用来构成单词的字符（也就是与 \W 相匹配的字符）之间。<br>正则：<code>\bcat\b</code></p><blockquote></blockquote><p>The <code>cat</code> scattered his food all over the room.</p><h3 id="字符串边界"><a href="#字符串边界" class="headerlink" title="字符串边界"></a>字符串边界</h3><p>^ 用来定义字符串开头，\$ 用来定义字符串结尾。<br>注意：不同语言对 ^ \$ 的处理有所不同。比如 Javascript 是按照以上定义实现的，而 Ruby 中 ^ 匹配一行的开始，\$ 匹配一行的结束。具体可参考 <a href="http://www.regular-expressions.info/anchors.html。" target="_blank" rel="noopener">http://www.regular-expressions.info/anchors.html。</a></p><h2 id="使用子表达式"><a href="#使用子表达式" class="headerlink" title="使用子表达式"></a>使用子表达式</h2><p>子表达式是一个更大的表达式的一部分，把一个表达式划分为一系列子表达式的目的是为了把那些子表达式当做一个独立元素来使用。子表达式必须用 ( 和 ) 括起来。<br>正则：<code>(19|20)\d{2}</code></p><blockquote></blockquote><p>ID: 042<br>SEX: M<br>DOB: <code>1967</code>-08-17<br>Status: Active</p><p>| 字符表示或操作符，19|20 将匹配数字序列 19 或 20。</p><h2 id="回溯引用：前后一致匹配"><a href="#回溯引用：前后一致匹配" class="headerlink" title="回溯引用：前后一致匹配"></a>回溯引用：前后一致匹配</h2><p>正则：<code>[ ]+(\w+)[ ]+\1</code></p><blockquote></blockquote><p>This is a block <code>of of</code> text, several words here <code>are are</code> repeated, <code>and and</code> they should not be.</p><p>\1 不是一个回溯引用，而它引用的正是前面划分出来的那个子表达式。当 (\w+) 匹配到单词 of 的时候，\1 也匹配单词 of；当 (\w+) 匹配到单词 and 的时候，\1 也匹配单词 and。<br>为了方便理解，可以把回溯引用想象成变量。</p><h2 id="前后查找"><a href="#前后查找" class="headerlink" title="前后查找"></a>前后查找</h2><p>前后查找包含的匹配本身并不返回，而是用于确定正确的匹配位置，它并不是匹配结果的一部分。</p><h3 id="向前查找"><a href="#向前查找" class="headerlink" title="向前查找"></a>向前查找</h3><p>从语法上看，一个向前查找模式其实就是一个以 ?= 开头的子表达式，需要匹配的文本跟在 = 后面。</p><p>正则：<code>.+(?=:)</code></p><blockquote></blockquote><p><code>http</code>://<a href="http://www.forta.com/" target="_blank" rel="noopener">www.forta.com/</a><br><code>https</code>://mail.forta.com/<br><code>ftp</code>://ftp.forta.com/</p><p>与子表达的对比。<br>正则：<code>.+(:)</code></p><blockquote></blockquote><p><code>http:</code>//<a href="http://www.forta.com/" target="_blank" rel="noopener">www.forta.com/</a><br><code>https:</code>//mail.forta.com/<br><code>ftp:</code>//ftp.forta.com/</p><h3 id="向后查找"><a href="#向后查找" class="headerlink" title="向后查找"></a>向后查找</h3><p>向后查找，以 ?&lt;= 开头的子表达式。<br>正则： <code>(?=\$)[0-9.]+</code></p><blockquote></blockquote><p>ABC01: $<code>23.45</code><br>Total items found: 4</p><h3 id="对前后查找取非"><a href="#对前后查找取非" class="headerlink" title="对前后查找取非"></a>对前后查找取非</h3><p>负向前查找讲向前查找不与给定模式相匹配的文本，负向后查找将向后查找不与给定模式相匹配的文本。</p><table><thead><tr><th>操作符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>(?=)</td><td>正向前查找</td><td>\d+(?= dollars) matches 100 in “100 dollars”</td></tr><tr><td>(?!)</td><td>负向前查找</td><td>d+(?! dollars) matches 100 if it is NOT followed by the word “dollars”</td></tr><tr><td>(?&lt;=)</td><td>正向后查找</td><td>(?&lt;=lucky )\d matches 7 in “lucky 7”</td></tr><tr><td>(?&lt;!)</td><td>负向后查找</td><td>(?&lt;!furious )\d matches 7 in “lucky 7”</td></tr></tbody></table><h2 id="嵌入条件"><a href="#嵌入条件" class="headerlink" title="嵌入条件"></a>嵌入条件</h2><p>(?(backreference)true-regex)：? 表示这是一个条件，括号里的 backreference 是一个回溯引用， backreference 存在时会执行true-regex。<br>(?(backreference)true-regex|false-regex)： backreference 不存在时会执行 false-regex。</p><h3 id="回溯引用条件"><a href="#回溯引用条件" class="headerlink" title="回溯引用条件"></a>回溯引用条件</h3><p>正则：<code>(\()?\d{3}(?(1)\)|-)\d{3}-\d{4}</code></p><blockquote></blockquote><p><code>123-456-7890</code><br><code>(123)456-7890</code><br>(123)-456-7890<br>(123-456-7890<br>1234567890<br>123 456 7890</p><p>(()? 匹配一个可选的左括号,(?(1))|-) 将根据条件是否满足而去匹配 ) 或者 -。如果 (1) 存在，) 必须被匹配，否则 - 必须被匹配。</p><h3 id="前后查找条件"><a href="#前后查找条件" class="headerlink" title="前后查找条件"></a>前后查找条件</h3><p>前后查找条件的语法与回溯引用条件的语法大同小异，只需把回溯引用替换为一个完整的前后查找表达式就行了。<br>正则：<code>\d{5}(?(?=-)-\d{4})</code></p><blockquote></blockquote><p>11111<br>22222<br>33333-<br>44444-4444</p><p>(?(?=-)-\d{4}) 使用了 ?=- 来匹配（但不消费）一个连字符，如果条件得到满足（那个连字符存在），-\d{4} 将匹配那个连字符和随后的 4 位数字。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;匹配单个字符&quot;&gt;&lt;a href=&quot;#匹配单个字符&quot; class=&quot;headerlink&quot; title=&quot;匹配单个字符&quot;&gt;&lt;/a&gt;匹配单个字符&lt;/h2&gt;&lt;h3 id=&quot;匹配纯文本&quot;&gt;&lt;a href=&quot;#匹配纯文本&quot; class=&quot;headerlink&quot; title=&quot;匹配纯文本&quot;&gt;&lt;/a&gt;匹配纯文本&lt;/h3&gt;&lt;p&gt;正则：&lt;code&gt;Ben&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hello, my name is &lt;code&gt;Ben&lt;/code&gt;. Please visit my website at &lt;a href=&quot;http://www.forta.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.forta.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;匹配任意字符&quot;&gt;&lt;a href=&quot;#匹配任意字符&quot; class=&quot;headerlink&quot; title=&quot;匹配任意字符&quot;&gt;&lt;/a&gt;匹配任意字符&lt;/h3&gt;&lt;p&gt;. 匹配任意单个字符。在绝大多数的正则表达式实现里，. 只能匹配除换行符以外的任何单个字符。&lt;br&gt;正则：&lt;code&gt;sales.&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;sales1&lt;/code&gt;.xls&lt;br&gt;orders3.xls&lt;br&gt;&lt;code&gt;sales2&lt;/code&gt;.xls&lt;br&gt;&lt;code&gt;sales3&lt;/code&gt;.xls&lt;br&gt;apac1.xls&lt;br&gt;europe2.xls&lt;br&gt;na1.xls&lt;br&gt;na2.xls&lt;br&gt;sa1.xls&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://kaywu.xyz/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://kaywu.xyz/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Rails 多台服务器上 js 不一致的问题</title>
    <link href="http://kaywu.xyz/2017/05/14/rails-js-compress/"/>
    <id>http://kaywu.xyz/2017/05/14/rails-js-compress/</id>
    <published>2017-05-14T10:00:27.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><p>周二发布正式的时候，发生了匪夷所思的事情。<br>打开发布的网页，有一定的几率操作会没有反应。但在测试的时候却从没有这个问题发生。通过调试工具查看网页，发现一半的网页会加载 application-b1a 开头的文件，而另一半会加载 application-745 开头的文件。加载 applicaton-745 时会报 404，使得操作没有反应。</p><p>这里简单地说下发布的情况。该服务会发布到 A、B 两台服务器上，nginx 接收请求并转发到 A、B 上的实例。<br>查看正式服务器上的文件发现，A 上存在 application-b1a 文件，B 上存在 application-745 文件。看来 nginx 会查找 服务器 A 上的文件，由于找不到 application-745 而返回 404。先把 B 上的 applicaiton-b1a 复制到 A，临时修复这个问题。</p><h3 id="排查原因"><a href="#排查原因" class="headerlink" title="排查原因"></a>排查原因</h3><p>为什么两个服务器上生成的 js 文件名会不一致？我们先简单地回顾下 Asset Pipeline 生成 js 的过程。正式环境上， Asset Pipeline 会预编译文件，生成类似于 <code>application-908e25f4bf641868d8683022a5b62f54.js</code> 的文件。其中 908e 这串表示摘要，是根据文件的内容生成的 MD5，当 js 文件发生改变时生成的摘要也会发生变化。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="regexp">/ 引用 js</span></span><br><span class="line"><span class="regexp">&lt;%= javascript_include_tag "application" %&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 生成的 html</span></span><br><span class="line"><span class="regexp">&lt;script src="/assets</span><span class="regexp">/application-908e25f4bf641868d8683022a5b62f54.js"&gt;&lt;/script</span>&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>换句话说，若 js 内容一样，生成的摘要也应该是一样的。不应该啊！两个服务器部署的代码应该是一致的。为了保险起见，我还特定查看了相关文件的 MD5 值，完全相同。</p><p>输入是相同的，而产生的结果却不一样，问题应该出在处理步骤上。于是我查看了正式环境的配置，发现了以下这条。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.assets.js_compressor = <span class="symbol">:uglifier</span></span><br></pre></td></tr></table></figure></p><p>uglifier 是用 ruby 封装 UglifyJS 的 gem，而 UglifyJS 是依赖 node.js 对 js 进行压缩的。查看了下两台服务器的 node 版本，A 是 0.10，B 是 6.10。问题的原因终于找到了。node 的版本不一致，导致其压缩的结果不一样，使得生成的最终文件也不相同。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>先在 A 上升级了 node 版本，使得 A、B 两台服务器的 node 版本一致。然后删除 <code>tmp/cache/assets/sprockets</code> 下的缓存，再执行 <code>RAILS_ENV=production bin/rake assets:precompile</code>，最后重新发布，使最新生成的结果能被实例加载。<br>注意这里必须先删除缓存，不然执行 precompile 时不会生成最新的结果。</p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>为什么这个问题会突然出现呢？原来是 B 上的 node 版本由于其他应用的需求进行了升级，使得 A、B 两台版本不一致了。<br>这种一个馒头引发的血案防不胜防，可见应用之间依赖的隔离是多么重要。联想到近几年类似 docker 的解决方案大受欢迎也就不足为怪了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://guides.rubyonrails.org/asset_pipeline.html" target="_blank" rel="noopener">Asset Pipeline</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;发现问题&quot;&gt;&lt;a href=&quot;#发现问题&quot; class=&quot;headerlink&quot; title=&quot;发现问题&quot;&gt;&lt;/a&gt;发现问题&lt;/h3&gt;&lt;p&gt;周二发布正式的时候，发生了匪夷所思的事情。&lt;br&gt;打开发布的网页，有一定的几率操作会没有反应。但在测试的时候却从没有这个问题发生。通过调试工具查看网页，发现一半的网页会加载 application-b1a 开头的文件，而另一半会加载 application-745 开头的文件。加载 applicaton-745 时会报 404，使得操作没有反应。&lt;/p&gt;
&lt;p&gt;这里简单地说下发布的情况。该服务会发布到 A、B 两台服务器上，nginx 接收请求并转发到 A、B 上的实例。&lt;br&gt;查看正式服务器上的文件发现，A 上存在 application-b1a 文件，B 上存在 application-745 文件。看来 nginx 会查找 服务器 A 上的文件，由于找不到 application-745 而返回 404。先把 B 上的 applicaiton-b1a 复制到 A，临时修复这个问题。&lt;/p&gt;
&lt;h3 id=&quot;排查原因&quot;&gt;&lt;a href=&quot;#排查原因&quot; class=&quot;headerlink&quot; title=&quot;排查原因&quot;&gt;&lt;/a&gt;排查原因&lt;/h3&gt;&lt;p&gt;为什么两个服务器上生成的 js 文件名会不一致？我们先简单地回顾下 Asset Pipeline 生成 js 的过程。正式环境上， Asset Pipeline 会预编译文件，生成类似于 &lt;code&gt;application-908e25f4bf641868d8683022a5b62f54.js&lt;/code&gt; 的文件。其中 908e 这串表示摘要，是根据文件的内容生成的 MD5，当 js 文件发生改变时生成的摘要也会发生变化。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;regexp&quot;&gt;/ 引用 js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;%= javascript_include_tag &quot;application&quot; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/ 生成的 html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;script src=&quot;/assets&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/application-908e25f4bf641868d8683022a5b62f54.js&quot;&amp;gt;&amp;lt;/script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://kaywu.xyz/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>Rails 如何在开发模式下重新加载源代码</title>
    <link href="http://kaywu.xyz/2017/05/01/rails-dev-reload/"/>
    <id>http://kaywu.xyz/2017/05/01/rails-dev-reload/</id>
    <published>2017-05-01T10:04:50.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Rails development 环境下，若更改了部分代码，只需要重新发起请求，就能看到最新代码的结果，不需要重启服务器。<br>下文简述 Rails 是如何做到这点的。</p><p>在 <code>config/development.rb</code>，也就是 development 的环境配置文件，我们可以看到不同于其他环境的一行：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In the development environment your application's code is reloaded on</span></span><br><span class="line"><span class="comment"># every request.  This slows down response time but is perfect for development</span></span><br><span class="line"><span class="comment"># since you don't have to restart the webserver when you make code changes.</span></span><br><span class="line">config.cache_classes = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>正如注释所说的，它会使得 Rails 在每次接收请求时都重新加载源代码。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>我们先从 Rails 的初始化说起，以 Rails 4.2.6 为例。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rails/application/default_middleware_stack.rb</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_stack</span></span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">unless</span> config.cache_classes</span><br><span class="line">        middleware.use <span class="symbol">:</span><span class="symbol">:ActionDispatch</span><span class="symbol">:</span><span class="symbol">:Reloader</span>, lambda &#123; reload_dependencies? &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ...</span><br><span class="line">    private</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reload_dependencies?</span></span></span><br><span class="line">      config.reload_classes_only_on_change != <span class="literal">true</span> <span class="params">||</span> app.reloaders.map(&amp;<span class="symbol">:updated?</span>).any?</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>当 config.cache_classses 为 true 时，middleware 会增加 <code>ActionDispatch::Reloader</code>，而这正是重新加载源代码的关键。<br>ps： middleware 可以通过 <code>rake middleware</code> 来查看。</p><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>当服务器接收到请求时，中间件 <code>ActionDispatch::Reloader</code> 使用回调 prepare、cleanup 来实现重载源代码。其中 prepare 在处理请求前被调用，cleanup 在处理请求后被调用。</p><a id="more"></a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionDispatch::Reloader</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(app, condition=<span class="literal">nil</span>)</span></span></span><br><span class="line">    @app = app</span><br><span class="line">    @condition = condition <span class="params">||</span> lambda &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    @validated = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></span><br><span class="line">    @validated = @condition.call</span><br><span class="line">    prepare!</span><br><span class="line"></span><br><span class="line">    response = @app.call(env)</span><br><span class="line">    response[<span class="number">2</span>] = <span class="symbol">:</span><span class="symbol">:Rack</span><span class="symbol">:</span><span class="symbol">:BodyProxy</span>.new(response[<span class="number">2</span>]) &#123; cleanup! &#125;</span><br><span class="line"></span><br><span class="line">    response</span><br><span class="line">  <span class="keyword">rescue</span> Exception</span><br><span class="line">    cleanup!</span><br><span class="line">    raise</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">prepare!</span> <span class="comment">#:nodoc:</span></span></span><br><span class="line">    run_callbacks <span class="symbol">:prepare</span> <span class="keyword">if</span> validated?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cleanup!</span> <span class="comment">#:nodoc:</span></span></span><br><span class="line">    run_callbacks <span class="symbol">:cleanup</span> <span class="keyword">if</span> validated?</span><br><span class="line">  <span class="keyword">ensure</span></span><br><span class="line">    @validated = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">validated?</span></span></span><br><span class="line">    @validated</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>当 @validated 为 true 时会执行 prepare、cleanup 等回调。那么 @validated 的值是怎么得到的？<br>结合初始化的代码我们发现，@condition 其实就是创建 <code>ActionDispatch::Reloader</code> 时的参数 <code>lambda { reload_dependencies? }</code>。而 reload_dependencies? 具体代码如下。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reload_dependencies?</span></span></span><br><span class="line">      config.reload_classes_only_on_change != <span class="literal">true</span> <span class="params">||</span> app.reloaders.map(&amp;<span class="symbol">:updated?</span>).any?</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>可以通过以下几种情况来分析<br>若 config.reload_clases_only_on_change 为 false，会执行回调。<br>若 config.reload_clases_only_on_change 为 true 且代码发生了变动（任一 reloader 调用 updated? 返回 true），会执行回调。<br>若 config.reload_clases_only_on_change 为 true 且代码未发生变动，不会执行回调。</p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>弄清楚了回调调用的时机，我们来继续研究回调的内容是什么。</p><p><code>Rails::Application::Finisher</code> 负责结束 Rails 的初始化，它会给 <code>ActionDispatch::Reloader</code> 增加回调。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rails/application/finisher.rb</span></span><br><span class="line">initializer <span class="symbol">:set_clear_dependencies_hook</span>, <span class="symbol">group:</span> <span class="symbol">:all</span> <span class="keyword">do</span></span><br><span class="line">  callback = lambda <span class="keyword">do</span></span><br><span class="line">    ActiveSupport::DescendantsTracker.clear</span><br><span class="line">    ActiveSupport::Dependencies.clear</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> config.reload_classes_only_on_change</span><br><span class="line">    reloader = config.file_watcher.new(*watchable_args, &amp;callback)</span><br><span class="line">    <span class="keyword">self</span>.reloaders &lt;&lt; reloader</span><br><span class="line">    <span class="comment"># Prepend this callback to have autoloaded constants cleared before</span></span><br><span class="line">    <span class="comment"># any other possible reloading, in case they need to autoload fresh</span></span><br><span class="line">    <span class="comment"># constants.</span></span><br><span class="line">    ActionDispatch::Reloader.to_prepare(<span class="symbol">prepend:</span> <span class="literal">true</span>) <span class="keyword">do</span></span><br><span class="line">      <span class="comment"># In addition to changes detected by the file watcher, if routes</span></span><br><span class="line">      <span class="comment"># or i18n have been updated we also need to clear constants,</span></span><br><span class="line">      <span class="comment"># that's why we run #execute rather than #execute_if_updated, this</span></span><br><span class="line">      <span class="comment"># callback has to clear autoloaded constants after any update.</span></span><br><span class="line">      reloader.execute</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    ActionDispatch::Reloader.to_cleanup(&amp;callback)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>当 config.reload_clases_only_on_change 为 true，会向 <code>ActionDispatch::Reloader</code> 的 prepare 添加回调，而 false 时会向 cleanup 添加回调。<br>该回调会清理所有的依赖，更确切地说，使用内置的 remove_const 清除所有加载的常量。<br>由于所有常量都被移除，<code>ActiveSupport::Dependencies</code> 使用 const_missing 并再次加载相关类，从而使得修改后的代码被加载。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当 config.cache_class 为 false 时 middleware 会增加中间件 <code>ActionDispatch::Reloader</code>。</p><p>当 config.reload_clases_only_on_change 为 true 时，<code>Rails::Application::Finisher</code> 会在 <code>ActionDispatch::Reloader</code> 增加 <code>prepare</code> 的回调。<br>请求处理前 Reloader 会根据代码是否更新来执行 <code>prepare</code> 回调，执行回调后会清理所有的依赖，<code>ActiveSupport::Dependencies</code> 使用 const_missing 并再次加载相关类，从而使得修改后的代码被加载。</p><p>当 config.reload_clases_only_on_change 为 false 时， <code>Rails::Application::Finisher</code> 会在 <code>ActionDispatch::Reloader</code> 增加 <code>cleanup</code> 的回调。Reloader 会在每次请求处理后执行回调清理所有的依赖。其他步骤类似。</p><p>关于更详细的步骤说明可以参考 <a href="http://crypt.codemancers.com/posts/2013-10-03-rails-reloading-in-dev-mode/" target="_blank" rel="noopener">How rails reloads your source code in development mode?</a>，关于 Rails 的 autoload 机制可以参考 <a href="http://guides.rubyonrails.org/autoloading_and_reloading_constants.html" target="_blank" rel="noopener">Autoloading and Reloading Constants</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://crypt.codemancers.com/posts/2013-10-03-rails-reloading-in-dev-mode/" target="_blank" rel="noopener">How rails reloads your source code in development mode?</a></li><li><a href="http://guides.rubyonrails.org/autoloading_and_reloading_constants.html" target="_blank" rel="noopener">Autoloading and Reloading Constants</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Rails development 环境下，若更改了部分代码，只需要重新发起请求，就能看到最新代码的结果，不需要重启服务器。&lt;br&gt;下文简述 Rails 是如何做到这点的。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;config/development.rb&lt;/code&gt;，也就是 development 的环境配置文件，我们可以看到不同于其他环境的一行：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# In the development environment your application&#39;s code is reloaded on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# every request.  This slows down response time but is perfect for development&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# since you don&#39;t have to restart the webserver when you make code changes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.cache_classes = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正如注释所说的，它会使得 Rails 在每次接收请求时都重新加载源代码。&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;p&gt;我们先从 Rails 的初始化说起，以 Rails 4.2.6 为例。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rails/application/default_middleware_stack.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;build_stack&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; config.cache_classes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        middleware.use &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:ActionDispatch&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Reloader&lt;/span&gt;, lambda &amp;#123; reload_dependencies? &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reload_dependencies?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      config.reload_classes_only_on_change != &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;||&lt;/span&gt; app.reloaders.map(&amp;amp;&lt;span class=&quot;symbol&quot;&gt;:updated?&lt;/span&gt;).any?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 config.cache_classses 为 true 时，middleware 会增加 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt;，而这正是重新加载源代码的关键。&lt;br&gt;ps： middleware 可以通过 &lt;code&gt;rake middleware&lt;/code&gt; 来查看。&lt;/p&gt;
&lt;h3 id=&quot;处理请求&quot;&gt;&lt;a href=&quot;#处理请求&quot; class=&quot;headerlink&quot; title=&quot;处理请求&quot;&gt;&lt;/a&gt;处理请求&lt;/h3&gt;&lt;p&gt;当服务器接收到请求时，中间件 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt; 使用回调 prepare、cleanup 来实现重载源代码。其中 prepare 在处理请求前被调用，cleanup 在处理请求后被调用。&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://kaywu.xyz/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>MySQL EXPLAIN 解读</title>
    <link href="http://kaywu.xyz/2017/03/26/mysql-explain/"/>
    <id>http://kaywu.xyz/2017/03/26/mysql-explain/</id>
    <published>2017-03-26T09:55:35.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>EXPLAIN 解释了 MySQL 是如何执行 SQL 语句的。使用的方法很简单，在 SQL 语句前加上 <code>EXPLAIN</code> 关键字就可以。<br>下面是一个简单的例子，测试数据在文章末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 例 1</span><br><span class="line">mysql&gt; EXPLAIN SELECT name FROM users WHERE id = 1\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: users</span><br><span class="line">         type: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 4</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>EXPLAIN 列的解释：</p><ul><li>id：SELECT 标识符，下面具体分析</li><li>select_type: SELECT 类型，下面会具体分析</li><li>table: 查询所使用的表</li><li>type: JOIN 的类型，下面会具体分析</li><li>possible_keys: 可能使用的索引，但不一定会真正使用</li><li>key: 真正使用的索引</li><li>key_len: 所使用的索引长度</li><li>ref: 与索引比较的列</li><li>rows: 预估需要扫描的行数</li><li>Extra: 额外信息</li></ul><a id="more"></a><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>个人理解表示了 SELECT 的执行顺序。id 大的优先执行，id 相同的从上往下执行。</p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>select_type 表示查询的类型，具体种类见官方图表。<br><img src="/img/select_type.png" alt="select_type.png-来自官方文档"><br>SIMPLE 是最常见的种类，表示它未使用 UNION 及子查询。例 1 的查询就属于 SIMPLE。</p><p>当使用了关键字 UNION，查询的类型就会发生变化。<br><img src="/img/select_union.png" alt="select_union.png-41.3kB"></p><p>在这个查询中，我们可以看到 3 种类型的查询。 PRIMARY 表示最外层的查询，也就是 UNION 之前的 <code>SELECT name FROM users WHERE id = 1</code>。UNION 之后的 <code>SELECT name FROM users WHERE id = 2</code> 归为 UNION 类型。最后 UNION RESULT 将两次查询的结果归总。</p><p>下面是其他查询类型的例子。</p><h4 id="PRIMARY-amp-SUBQUERY"><a href="#PRIMARY-amp-SUBQUERY" class="headerlink" title="PRIMARY &amp; SUBQUERY"></a>PRIMARY &amp; SUBQUERY</h4><p>PRIMARY 为最外层的查询，而 SUBQUERY 则指子查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM users WHERE id = (SELECT user_id FROM orders WHERE id = 3);</span><br></pre></td></tr></table></figure></p><h4 id="PRIMARY-amp-DEPENDENT-SUBQUERY"><a href="#PRIMARY-amp-DEPENDENT-SUBQUERY" class="headerlink" title="PRIMARY &amp; DEPENDENT SUBQUERY"></a>PRIMARY &amp; DEPENDENT SUBQUERY</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM users WHERE EXISTS (SELECT user_id FROM orders WHERE orders.id = 3 and orders.user_id = users.id);</span><br></pre></td></tr></table></figure><h4 id="MATERIALIZED"><a href="#MATERIALIZED" class="headerlink" title="MATERIALIZED"></a>MATERIALIZED</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT DISTINCT user_id FROM orders WHERE id IN (SELECT DISTINCT order_id FROM order_items WHERE product_name = &apos;p1&apos;);</span><br></pre></td></tr></table></figure><h4 id="DERIVED"><a href="#DERIVED" class="headerlink" title="DERIVED"></a>DERIVED</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM (SELECT * FROM orders WHERE id = 3) o;</span><br></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>type 表示 JOIN 的类型，是查询是否高效的重要依据。<br>效率从高到低排列为 system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all。</p><ul><li>system: 表中只有一条数据，const 连接的特殊类型。</li><li><p>const: 主键或唯一索引的等值比较，由于表中至多有一条符合的数据，所以速度很快。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM users WHERE id = 2\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: users</span><br><span class="line">         type: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 4</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>eq_ref: 上表的每一个行至多会匹配到该表的一行，是除 system 和 const 之外最高效的 join type。当索引为 PRIMARY KEY 或 UNIQUE NOT NULL 且被全部使用时会用到。常见于索引列的等值比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM users, orders WHERE orders.user_id = users.id\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: orders</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: index_orders_on_user_id_and_price</span><br><span class="line">          key: index_orders_on_user_id_and_price</span><br><span class="line">      key_len: 8</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 4</span><br><span class="line">        Extra: Using index</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: users</span><br><span class="line">         type: eq_ref</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 4</span><br><span class="line">          ref: explain_test.orders.user_id</span><br><span class="line">         rows: 1</span><br><span class="line">        Extra: NULL</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>ref: 如果 join 不能根据键值只匹配一行时则会使用该 join type。常见于不是 UNIQUE 或 PRIMARY KEY的索引等值比较，或者是最左前缀规则的索引查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT orders.id FROM orders JOIN users ON orders.user_id = users.id WHERE users.name = &apos;Amy&apos;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: users</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: PRIMARY,index_users_on_names</span><br><span class="line">          key: index_users_on_names</span><br><span class="line">      key_len: 152</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">        Extra: Using where; Using index</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: orders</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: index_orders_on_user_id_and_price</span><br><span class="line">          key: index_orders_on_user_id_and_price</span><br><span class="line">      key_len: 4</span><br><span class="line">          ref: explain_test.users.id</span><br><span class="line">         rows: 1</span><br><span class="line">        Extra: Using index</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>range: 使用索引进行范围查询，输出的 key 字段表示使用哪个索引，key_len 表示所使用索引中最长的索引长度。注意此类型下 ref 字段为 NULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM users WHERE users.id IN (2, 3)\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: users</span><br><span class="line">         type: range</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 4</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 2</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>index: 全索引扫描, index 类型仅仅扫描所有的索引, 而不扫描数据。一般两种情况会出现。<br>一种是出现在所要查询的数据直接在索引树中就可以获取, 此时 Extra 字段会显示 Using index。另一种是全表扫描时按索引的顺序查找数据，此时 Extra 字段不会显示 Using index。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT users.name FROM users\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: users</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: index_users_on_names</span><br><span class="line">      key_len: 152</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 10</span><br><span class="line">        Extra: Using index</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>ALL: 全表扫描。</p></li></ul><h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>Extra 字段提供了关于查询的额外信息，种类很多，具体可以看<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain-extra-information" target="_blank" rel="noopener">官方文档</a>。<br>除了上文提到的 Using index，这里再额外说两种。<br>Using filesort 表示 MySQL 需要遍历所有符合条件的行然后按照排序的 key 来使得最终的查询结果是有序的。<br>Using temporary 表示 MySQL 需要创建一个临时表来存储结果，通常发生在查询包含不同列的 GROUP BY 和 ORDER BY 子句。<br>看到这两者时，可以考虑对查询进行优化。</p><h3 id="使用的测试数据"><a href="#使用的测试数据" class="headerlink" title="使用的测试数据"></a>使用的测试数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `users` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(50) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `index_users_on_names` (`name`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Amy&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Bob&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Cindy&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Duke&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Kay&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Lucy&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Mike&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Nancy&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Ted&apos;);</span><br><span class="line">INSERT INTO users(name) VALUES (&apos;Van&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `orders` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) NOT NULL,</span><br><span class="line">  `price` decimal(8,2) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `index_orders_on_user_id_and_price` (`user_id`,`price`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">INSERT INTO orders(user_id, price) VALUES (1, 80);</span><br><span class="line">INSERT INTO orders(user_id, price) VALUES (1, 100);</span><br><span class="line">INSERT INTO orders(user_id, price) VALUES (2, 90);</span><br><span class="line">INSERT INTO orders(user_id, price) VALUES (2, 120);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `order_items` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `order_id` int(11) NOT NULL,</span><br><span class="line">  `product_name` varchar(50) NOT NULL,</span><br><span class="line">  `quantity` int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `index_order_items_on_order_id` (`order_id`),</span><br><span class="line">  KEY `index_order_items_on_product_name` (`product_name`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">INSERT INTO order_items(order_id, product_name, quantity) VALUES (1, &apos;p1&apos;, 1);</span><br><span class="line">INSERT INTO order_items(order_id, product_name, quantity) VALUES (1, &apos;p2&apos;, 2);</span><br><span class="line">INSERT INTO order_items(order_id, product_name, quantity) VALUES (2, &apos;p3&apos;, 1);</span><br><span class="line">INSERT INTO order_items(order_id, product_name, quantity) VALUES (2, &apos;p4&apos;, 1);</span><br><span class="line">INSERT INTO order_items(order_id, product_name, quantity) VALUES (3, &apos;p5&apos;, 3);</span><br><span class="line">INSERT INTO order_items(order_id, product_name, quantity) VALUES (4, &apos;p6&apos;, 2);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html" target="_blank" rel="noopener">EXPLAIN Output Format</a></li><li><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">MySQL 性能优化神器 Explain 使用分析</a></li><li><a href="http://www.cnitblog.com/aliyiyi08/archive/2008/09/09/48878.html" target="_blank" rel="noopener">Mysql Explain 详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EXPLAIN 解释了 MySQL 是如何执行 SQL 语句的。使用的方法很简单，在 SQL 语句前加上 &lt;code&gt;EXPLAIN&lt;/code&gt; 关键字就可以。&lt;br&gt;下面是一个简单的例子，测试数据在文章末尾。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 例 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; EXPLAIN SELECT name FROM users WHERE id = 1\G&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*************************** 1. row ***************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           id: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  select_type: SIMPLE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        table: users&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         type: const&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;possible_keys: PRIMARY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          key: PRIMARY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      key_len: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ref: const&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         rows: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Extra: NULL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 row in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;EXPLAIN 列的解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id：SELECT 标识符，下面具体分析&lt;/li&gt;
&lt;li&gt;select_type: SELECT 类型，下面会具体分析&lt;/li&gt;
&lt;li&gt;table: 查询所使用的表&lt;/li&gt;
&lt;li&gt;type: JOIN 的类型，下面会具体分析&lt;/li&gt;
&lt;li&gt;possible_keys: 可能使用的索引，但不一定会真正使用&lt;/li&gt;
&lt;li&gt;key: 真正使用的索引&lt;/li&gt;
&lt;li&gt;key_len: 所使用的索引长度&lt;/li&gt;
&lt;li&gt;ref: 与索引比较的列&lt;/li&gt;
&lt;li&gt;rows: 预估需要扫描的行数&lt;/li&gt;
&lt;li&gt;Extra: 额外信息&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://kaywu.xyz/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://kaywu.xyz/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Rails Concern 源码研究</title>
    <link href="http://kaywu.xyz/2017/03/19/rails-concern/"/>
    <id>http://kaywu.xyz/2017/03/19/rails-concern/</id>
    <published>2017-03-19T10:07:19.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>ActiveSupport::Concern 是为了更方便地 include 模块而推出的工具类。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>首先来看下它的使用方法。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统的 Module 引入</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">M</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span></span><br><span class="line">    base.extend ClassMethods</span><br><span class="line">    base.class_eval <span class="keyword">do</span></span><br><span class="line">      scope <span class="symbol">:disabled</span>, -&gt; &#123; where(<span class="symbol">disabled:</span> <span class="literal">true</span>) &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ClassMethods</span></span></span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Concern</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">M</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">    scope <span class="symbol">:disabled</span>, -&gt; &#123; where(<span class="symbol">disabled:</span> <span class="literal">true</span>) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  class_methods <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>可见，通过 included 和 class_method 两个类方法使得 Module 的写法更加清晰。<br>你可能有些疑问，对比传统的引入，使用 Concern 虽然更加清晰了，但没什么巨大的优点。而传统的引入也可以通过将方法分成两个 module，如 InstanceMethods、ClassMethods，来达到同样的效果。<br>在这个简单的例子上，确实如此。但在一些嵌套的 include 上 Concern 的优势就体现出来了。</p><a id="more"></a><h3 id="嵌套的-include"><a href="#嵌套的-include" class="headerlink" title="嵌套的 include"></a>嵌套的 include</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Foo</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span></span><br><span class="line">    base.class_eval <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">method_injected_by_foo</span></span></span><br><span class="line">        ...</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Bar</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span></span><br><span class="line">    base.method_injected_by_foo</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Host</span></span></span><br><span class="line">  <span class="keyword">include</span> Foo <span class="comment"># We need to include this dependency for Bar</span></span><br><span class="line">  <span class="keyword">include</span> Bar <span class="comment"># Bar is the module that Host really needs</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们需要在 Host 中引入 Bar，但由于 Bar 又需要 Foo，导致必须在 Host 中引入 Foo。也就是说，当我们 include module 时也必须把它的依赖同时 include 进来。这将随着依赖关系的复杂而变得艰难。<br>为什么不让 Bar 来负责自己的依赖呢？如以下的代码。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Bar</span></span></span><br><span class="line">  <span class="keyword">include</span> Foo</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span></span><br><span class="line">    base.method_injected_by_foo</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Host</span></span></span><br><span class="line">  <span class="keyword">include</span> Bar</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>然而愿望很美好，实际运行时会报错，让我们来分析下流程。<br>当 Bar include Foo 时， Foo::included 方法被回调，而此时的 base 为 Bar。也就是说，method_injected_by_foo 会被添加到 Bar 上而不是 Host。当 Host include Bar 时，Bar::included 会调用 Host::method_injected_by_foo，而 Host 上没有相关方法，导致报错。</p><p>但是使用 Concern 就可以完美地解决这个问题。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'active_support/concern'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Foo</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">method_injected_by_foo</span></span></span><br><span class="line">      ...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Bar</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line">  <span class="keyword">include</span> Foo</span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">self</span>.method_injected_by_foo</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Host</span></span></span><br><span class="line">  <span class="keyword">include</span> Bar <span class="comment"># It works, now Bar takes care of its dependencies</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>Concern 的源码很短，不过 40 多行，但涉及到不少元编程的知识，要看明白得花点功夫。<br>复习下基本的知识，A extend B，B 的 extended 会被回调，参数 base 为 B。A include B，B 的 included、append_features 都会被回调，参数 base 为 B。</p><p>接下来，以上文 Concern 代码为例子来说明下实现原理。<br>我们先从 <code>module Foo extend ActiveSupport::Concern</code> 开始，此时 Concern::extended 会被回调，初始化 Foo 实例变量 @_dependencies。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">extended</span><span class="params">(base)</span></span> <span class="comment">#:nodoc:</span></span><br><span class="line">  base.instance_variable_set(<span class="symbol">:</span>@_dependencies, [])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>之后第 5 行调用 included 时，会将 @_included_block 设置为传入的 block。<br>注意这里的 included 是显式调用的，而不是被回调的，参数 base 为 nil。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">included</span><span class="params">(base = <span class="literal">nil</span>, &amp;block)</span></span></span><br><span class="line">  <span class="keyword">if</span> base.<span class="literal">nil</span>?</span><br><span class="line">    raise MultipleIncludedBlocks <span class="keyword">if</span> instance_variable_defined?(<span class="symbol">:</span>@_included_block)</span><br><span class="line"></span><br><span class="line">    @_included_block = block</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>第 13 行 <code>module Bar extend ActiveSupport::Concern</code> 与 Foo extend Concern 同理。<br>第 14 行 <code>include Foo</code>，使得 Foo 的 append_features 和 included 被调用。included 由于 base 不为空只是简单地调用 super。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_features</span><span class="params">(base)</span></span></span><br><span class="line">  <span class="keyword">if</span> base.instance_variable_defined?(<span class="symbol">:</span>@_dependencies)</span><br><span class="line">    base.instance_variable_get(<span class="symbol">:</span>@_dependencies) &lt;&lt; <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> base &lt; <span class="keyword">self</span></span><br><span class="line">    @_dependencies.each &#123; <span class="params">|dep|</span> base.send(<span class="symbol">:include</span>, dep) &#125;</span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">    base.extend const_get(<span class="symbol">:ClassMethods</span>) <span class="keyword">if</span> const_defined?(<span class="symbol">:ClassMethods</span>)</span><br><span class="line">    base.class_eval(&amp;@_included_block) <span class="keyword">if</span> instance_variable_defined?(<span class="symbol">:</span>@_included_block)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><code>append_features</code> 是 Concern 实现其 magic 最重要的部分。<br>由于 Bar 初始化了 @_dependencies，<code>base.instance_variable_get(:@_dependencies) &lt;&lt; self</code> 会被运行，所以 Bar.@_dependencies 就变为了 [Foo]。<br>Bar 调用 included 和 Foo 同理。</p><p>第 22 行，<code>Host include Bar</code> 使得 Bar 的 append_features 被回调。注意注意，重头戏来了。<br><code>@_dependencies.each { |dep| base.send(:include, dep) }</code> 会被执行，通过之前的分析 Bar.@_dependencies 为 [Foo]，所以也就是 <code>base.send(:include, Foo)</code>，这里的 base 为 Host。Host include Foo 会回调 Foo 的 append_features，此时 Host 会 extend Foo::ClassMethods 和 class_eval(&amp;@_included_block)，从而实现了 Host 在 include Bar 时自动 include Foo。</p><p>最后附上 Concern 的源码。</p><h4 id="Concern-源码"><a href="#Concern-源码" class="headerlink" title="Concern 源码"></a>Concern 源码</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">ActiveSupport</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Concern</span></span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MultipleIncludedBlocks</span> &lt; StandardError <span class="comment">#:nodoc:</span></span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">        <span class="keyword">super</span> <span class="string">"Cannot define multiple 'included' blocks for a Concern"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">extended</span><span class="params">(base)</span></span> <span class="comment">#:nodoc:</span></span><br><span class="line">      base.instance_variable_set(<span class="symbol">:</span>@_dependencies, [])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_features</span><span class="params">(base)</span></span></span><br><span class="line">      <span class="keyword">if</span> base.instance_variable_defined?(<span class="symbol">:</span>@_dependencies)</span><br><span class="line">        base.instance_variable_get(<span class="symbol">:</span>@_dependencies) &lt;&lt; <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> base &lt; <span class="keyword">self</span></span><br><span class="line">        @_dependencies.each &#123; <span class="params">|dep|</span> base.send(<span class="symbol">:include</span>, dep) &#125;</span><br><span class="line">        <span class="keyword">super</span></span><br><span class="line">        base.extend const_get(<span class="symbol">:ClassMethods</span>) <span class="keyword">if</span> const_defined?(<span class="symbol">:ClassMethods</span>)</span><br><span class="line">        base.class_eval(&amp;@_included_block) <span class="keyword">if</span> instance_variable_defined?(<span class="symbol">:</span>@_included_block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">included</span><span class="params">(base = <span class="literal">nil</span>, &amp;block)</span></span></span><br><span class="line">      <span class="keyword">if</span> base.<span class="literal">nil</span>?</span><br><span class="line">        raise MultipleIncludedBlocks <span class="keyword">if</span> instance_variable_defined?(<span class="symbol">:</span>@_included_block)</span><br><span class="line"></span><br><span class="line">        @_included_block = block</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">super</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_methods</span><span class="params">(&amp;class_methods_module_definition)</span></span></span><br><span class="line">      mod = const_defined?(<span class="symbol">:ClassMethods</span>, <span class="literal">false</span>) ?</span><br><span class="line">        const_get(<span class="symbol">:ClassMethods</span>) <span class="symbol">:</span></span><br><span class="line">        const_set(<span class="symbol">:ClassMethods</span>, Module.new)</span><br><span class="line"></span><br><span class="line">      mod.module_eval(&amp;class_methods_module_definition)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html" target="_blank" rel="noopener">ActiveSupport::Concern 源码</a></li><li><a href="http://elfxp.com/intro-of-concerns-in-rails/" target="_blank" rel="noopener">Rails 源码赏析之 Concern</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ActiveSupport::Concern 是为了更方便地 include 模块而推出的工具类。&lt;/p&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;首先来看下它的使用方法。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 传统的 Module 引入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.extend ClassMethods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.class_eval &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scope &lt;span class=&quot;symbol&quot;&gt;:disabled&lt;/span&gt;, -&amp;gt; &amp;#123; where(&lt;span class=&quot;symbol&quot;&gt;disabled:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassMethods&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 Concern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend ActiveSupport::Concern&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  included &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scope &lt;span class=&quot;symbol&quot;&gt;:disabled&lt;/span&gt;, -&amp;gt; &amp;#123; where(&lt;span class=&quot;symbol&quot;&gt;disabled:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class_methods &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见，通过 included 和 class_method 两个类方法使得 Module 的写法更加清晰。&lt;br&gt;你可能有些疑问，对比传统的引入，使用 Concern 虽然更加清晰了，但没什么巨大的优点。而传统的引入也可以通过将方法分成两个 module，如 InstanceMethods、ClassMethods，来达到同样的效果。&lt;br&gt;在这个简单的例子上，确实如此。但在一些嵌套的 include 上 Concern 的优势就体现出来了。&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://kaywu.xyz/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 常量查找</title>
    <link href="http://kaywu.xyz/2017/02/19/ruby-constant/"/>
    <id>http://kaywu.xyz/2017/02/19/ruby-constant/</id>
    <published>2017-02-19T09:08:10.000Z</published>
    <updated>2017-10-10T15:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>对 Ruby 中常量查找只有基础的认识，使用上还是有不少疑问，比如 “::A” 的含义、为什么有时使用 “A::B” 而有时直接用 “B”。<br>花时间查了资料来加深对此的理解。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Record</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">method</span></span></span><br><span class="line">    puts <span class="string">'outer'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Music</span></span></span><br><span class="line"></span><br><span class="line">    Record.method <span class="comment"># outer</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">module</span> <span class="title">Record</span></span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">method</span></span></span><br><span class="line">        puts <span class="string">'inner'</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    Record.method <span class="comment"># inner</span></span><br><span class="line">    <span class="symbol">:</span><span class="symbol">:Record</span>.method <span class="comment"># outer</span></span><br><span class="line">    Music::Record.method <span class="comment"># inner</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们从简单的例子出发。在上文的代码中，共存在着两个名为 Record 的 module。一个是在最外层，一个是在 Music 内部。<br>当第 9 行调用 Record.method 时，由于 Music 内的 Record 还未被定义，因此调用的只能是最外层的 Record module。<br>而在第 17 行，当我们重新调用时，却发现调用的已经是内部的 Record 了。<br>可见常量的调用时是有一个先后顺序的，简单的说就是从近及远，先使用近的。虽然我们从直观上很容易理解近的含义，但严格上的顺序是通过 <code>Module.nesting</code> 得到的。在 Music 内部调用得到 [Record::Music, Record]，可见 Record::Music 确实比 Record 有更高的优先级。</p><a id="more"></a><p>我们再来看看 <code>::Record.method</code>，在使用 <code>::</code> 之后，调用的就变成了外层的 Record 。<code>::</code>的作用是从 top level 来查找相关常量，也就是调用最外层的 Record。</p><p><code>Record.method</code> 和 <code>Music::Record.method</code> 有什么区别吗？<br>若都能找到相同的对象，这两者是没有区别的，如 16、18 行。<br>但在 top level 中调用 <code>Music::Record.method</code> 时，需使用完整的路径 <code>Record::Music::Record.method</code>，不然会报 <code>uninitialized constant</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Module.nesting 只是查找常量的一部分，更完整的常量查找步骤如下：</p><ol><li>向外找，从 Module.nesting 依次查找</li><li>向上找，从打开类 的 ancestors 依次查找（打开类：Module.nesting.first，若为空则为 Object）<br><a href="https://cirw.in/blog/constant-lookup" target="_blank" rel="noopener">Everything you ever wanted to know about constant lookup in Ruby</a> 讲得非常详情，就不多述了。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cirw.in/blog/constant-lookup" target="_blank" rel="noopener">Everything you ever wanted to know about constant lookup in Ruby</a></li><li><a href="http://stackoverflow.com/questions/5032844/ruby-what-does-prefix-do" target="_blank" rel="noopener">Ruby: what does :: prefix do?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对 Ruby 中常量查找只有基础的认识，使用上还是有不少疑问，比如 “::A” 的含义、为什么有时使用 “A::B” 而有时直接用 “B”。&lt;br&gt;花时间查了资料来加深对此的理解。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Record&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts &lt;span class=&quot;string&quot;&gt;&#39;outer&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Music&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Record.method &lt;span class=&quot;comment&quot;&gt;# outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Record&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        puts &lt;span class=&quot;string&quot;&gt;&#39;inner&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Record.method &lt;span class=&quot;comment&quot;&gt;# inner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Music::Record.method &lt;span class=&quot;comment&quot;&gt;# inner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们从简单的例子出发。在上文的代码中，共存在着两个名为 Record 的 module。一个是在最外层，一个是在 Music 内部。&lt;br&gt;当第 9 行调用 Record.method 时，由于 Music 内的 Record 还未被定义，因此调用的只能是最外层的 Record module。&lt;br&gt;而在第 17 行，当我们重新调用时，却发现调用的已经是内部的 Record 了。&lt;br&gt;可见常量的调用时是有一个先后顺序的，简单的说就是从近及远，先使用近的。虽然我们从直观上很容易理解近的含义，但严格上的顺序是通过 &lt;code&gt;Module.nesting&lt;/code&gt; 得到的。在 Music 内部调用得到 [Record::Music, Record]，可见 Record::Music 确实比 Record 有更高的优先级。&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://kaywu.xyz/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://kaywu.xyz/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>mac 上 MySQL system error 32 解决方案</title>
    <link href="http://kaywu.xyz/2017/01/21/mysql-system-error-32/"/>
    <id>http://kaywu.xyz/2017/01/21/mysql-system-error-32/</id>
    <published>2017-01-21T09:53:22.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知为何，在升级了 macOS 系统之后，Rails 连接 MySQL 经常性会报 <code>Mysql2::Error: Lost connection to MySQL server at &#39;sending authentication information&#39;, system error: 32</code> 的错误。重启 MySQL 就好了，过段时间又会报错，烦不胜烦。下定决心解决下。</p><p>参考了<a href="http://bugs.mysql.com/bug.php?id=71960" target="_blank" rel="noopener">这个帖子</a>后，大致看到有两种解决方法。一种是调大系统 <code>ulimit -n</code> 的值，另一种是调小 <code>table_open_cache</code> 的值。<br>从帖子的回复以及 <code>ulimit -n</code> 表示系统的文件句柄限制来看，个人认为调节 <code>ulimit -n</code> 的值是一个治标不治本的方法。本机的值已经 4k+，应该足够了。</p><p>正巧有次出现问题时，MySQL 还连接着。查了下当时的 status，发现 <code>open_tables</code> 不过几十，而 <code>open_files</code> 却几千。<br>执行 <code>flush tables</code> 清除缓存后就可以重新连接了。确实和 <code>table_open_cache</code> 有一定的关系。</p><p>查看了下 <code>table_open_cache</code> 的值，默认值是 2000。通过在 <code>my.cnf</code> 中添加 <code>table_open_cache = 500</code>，MySQL 这几天就没有闹别扭，希望能一直安稳下去。</p><h4 id="MySQL-相关命令"><a href="#MySQL-相关命令" class="headerlink" title="MySQL 相关命令"></a>MySQL 相关命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show status like &apos;%open_files%&apos;; # 查看 open_files 的值，open_tables 同理</span><br><span class="line">show variables like &apos;%table_open_cache%&apos;; # 查看 table_open_cache 的值</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://bugs.mysql.com/bug.php?id=71960" target="_blank" rel="noopener">http://bugs.mysql.com/bug.php?id=71960</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知为何，在升级了 macOS 系统之后，Rails 连接 MySQL 经常性会报 &lt;code&gt;Mysql2::Error: Lost connection to MySQL server at &amp;#39;sending authentication information
      
    
    </summary>
    
      <category term="MySQL" scheme="http://kaywu.xyz/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://kaywu.xyz/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>ActiveRecord select vs pluck</title>
    <link href="http://kaywu.xyz/2017/01/15/rails-select-vs-pluck/"/>
    <id>http://kaywu.xyz/2017/01/15/rails-select-vs-pluck/</id>
    <published>2017-01-15T10:09:31.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>select</code>、<code>pluck</code> 都可以从数据库读取指定的字段，但两者存在不小的差别。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Product.select(<span class="symbol">:id</span>).to_a</span><br><span class="line"><span class="comment"># Product Load (0.5ms)  SELECT `products`.`id` FROM `products`</span></span><br><span class="line"><span class="comment"># [#&lt;Product id: 2&gt;, #&lt;Product id: 1&gt;]</span></span><br><span class="line"></span><br><span class="line">Product.pluck(<span class="symbol">:id</span>)</span><br><span class="line"><span class="comment"># Product Load (0.4ms)  SELECT `products`.`id` FROM `products`</span></span><br><span class="line"><span class="comment"># [2, 1]</span></span><br></pre></td></tr></table></figure><p><code>select</code> 返回的是仅含有 id 的 Product Model 数组，而 <code>pluck</code> 返回的是 id 的数组。<br>两者相比较，<code>pluck</code> 省却了构造 ActiveRecord 的过程，效率更优。我们可以通过 Benchmark.measure 来验证下。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">puts Benchmark.measure &#123;Product.select(<span class="symbol">:id</span>).to_a&#125;</span><br><span class="line">puts Benchmark.measure &#123;Product.pluck(<span class="symbol">:id</span>)&#125;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>-</th><th>user CPU time</th><th>system CPU time</th><th>sum CPU time</th><th>elapsed real time</th></tr></thead><tbody><tr><td>select</td><td>0.050000</td><td>0.020000</td><td>0.070000</td><td>0.095440</td></tr><tr><td>pluck</td><td>0.000000</td><td>0.000000</td><td>0.000000</td><td>0.001845</td></tr></tbody></table><p>除此之外，两者还有一个区别，即查询时机的不同。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ProductOrder.where.<span class="keyword">not</span>(<span class="symbol">id:</span> SubOrder.where(<span class="symbol">sub_order_no:</span> <span class="string">'001'</span>).pluck(<span class="symbol">:order_id</span>))</span><br><span class="line"> <span class="comment"># SELECT `orders`.* FROM `orders` WHERE `orders`.`type` IN ('ProductOrder') AND (`orders`.`id` NOT IN (SELECT `sub_orders`.`order_id` FROM `sub_orders` WHERE `sub_orders`.`sub_order_no` = '001'))</span></span><br><span class="line"></span><br><span class="line">ProductOrder.where.<span class="keyword">not</span>(<span class="symbol">id:</span> SubOrder.where(<span class="symbol">sub_order_no:</span> <span class="string">'001'</span>).pluck(<span class="symbol">:order_id</span>))</span><br><span class="line"><span class="comment"># SELECT `sub_orders`.`order_id` FROM `sub_orders` WHERE `sub_orders`.`sub_order_no` = '001'</span></span><br><span class="line"><span class="comment"># SELECT `orders`.* FROM `orders` WHERE `orders`.`type` IN ('ProductOrder') AND (`orders`.`id` != 3)</span></span><br></pre></td></tr></table></figure></p><p>在上面这个例子中，通过 <code>pluck</code> 的调用进行了两次查询，而 <code>select</code> 只进行了一次查询。可见调用 <code>pluck</code> 会立即进行数据库查询。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://gavinmiller.io/2013/getting-to-know-pluck-and-select/" target="_blank" rel="noopener">Getting to Know Pluck and Select</a></li><li><a href="http://findnerd.com/list/view/Select-Vs-Pluck-in-Rails/19258/" target="_blank" rel="noopener">Select Vs Pluck in Rails</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;select&lt;/code&gt;、&lt;code&gt;pluck&lt;/code&gt; 都可以从数据库读取指定的字段，但两者存在不小的差别。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://kaywu.xyz/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>Rails ETag 应用</title>
    <link href="http://kaywu.xyz/2017/01/08/rails-etag/"/>
    <id>http://kaywu.xyz/2017/01/08/rails-etag/</id>
    <published>2017-01-08T10:13:24.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-ETag-验证缓存"><a href="#使用-ETag-验证缓存" class="headerlink" title="使用 ETag 验证缓存"></a>使用 ETag 验证缓存</h2><p><img src="/img/etag.png" alt="etag.png-27.9kB"><br>来源：<a href="http://mohanraj-nagasamy.github.io/blog/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4/" target="_blank" rel="noopener">Browser Cache: How ETags Works in Rails 3 and Rails 4</a><br>可以把 ETag 看成是响应的 token，客户端在下一个同样的请求中将其发送给服务器。服务器通过 token 来判断资源是否进行修改。若未修改，则返回 <code>304 Not Modified</code>，使客户端不需再去下载与缓存中已有的完全相同的字节。</p><h2 id="fresh-when"><a href="#fresh-when" class="headerlink" title="fresh_when"></a>fresh_when</h2><p>在 Rails 中，我们可以通过 <code>stale</code> 或 <code>fresh_when</code> 方法来显式地使用 ETag。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsController</span> &lt; ApplicationController</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># This will automatically send back a :not_modified if the request is fresh,</span></span><br><span class="line">  <span class="comment"># and will render the default template (product.*) if it's stale.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">    @product = Product.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    fresh_when <span class="symbol">last_modified:</span> @product.published_at.utc, <span class="symbol">etag:</span> @product</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>上例中通过 <a href="mailto:`@product.publishe" target="_blank" rel="noopener">`@product.publishe</a>d_at.utc` 来判断资源是否过期。</p><h2 id="默认开启的-ETag"><a href="#默认开启的-ETag" class="headerlink" title="默认开启的 ETag"></a>默认开启的 ETag</h2><p>最近才发现不用 fresh_when 返回的请求也会自带 ETag，查了下原来 Rails 框架默认使用 Rack::ETag middleware，会自动给无 ETag 的 response 根据其 body 添加上 ETag。</p><a id="more"></a><p>相关代码如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File 'lib/rack/etag.rb', line 24</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></span><br><span class="line">  status, headers, body = @app.call(env)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> etag_status?(status) &amp;&amp; etag_body?(body) &amp;&amp; !skip_caching?(headers)</span><br><span class="line">    original_body = body</span><br><span class="line">    digest, new_body = digest_body(body)</span><br><span class="line">    body = Rack::BodyProxy.new(new_body) <span class="keyword">do</span></span><br><span class="line">      original_body.close <span class="keyword">if</span> original_body.respond_to?(<span class="symbol">:close</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    headers[ETAG_STRING] = <span class="string">%(W/"<span class="subst">#&#123;digest&#125;</span>")</span> <span class="keyword">if</span> digest</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">unless</span> headers[CACHE_CONTROL]</span><br><span class="line">    <span class="keyword">if</span> digest</span><br><span class="line">      headers[CACHE_CONTROL] = @cache_control <span class="keyword">if</span> @cache_control</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      headers[CACHE_CONTROL] = @no_cache_control <span class="keyword">if</span> @no_cache_control</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  [status, headers, body]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>那这种默认的 ETag 和 fresh_when 有什么区别呢？<br>主要区别是判定缓存命中的时机。fresh_when 通过指定的 last_modified 来判定是否命中，若命中则不需要进行渲染。而 默认的 ETag 是根据 response body 生成的，必须先进行模板文件的渲染。也就是说，fresh_when 的效率更高。但同样的，使用 fresh_when 必须准确地指定 last_modified 来判定缓存是否失效。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://mohanraj-nagasamy.github.io/blog/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4/" target="_blank" rel="noopener">Browser Cache: How ETags Works in Rails 3 and Rails 4</a></li><li><a href="http://guides.rubyonrails.org/caching_with_rails.html" target="_blank" rel="noopener">Caching with Rails: An Overview</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" target="_blank" rel="noopener">HTTP Caching</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用-ETag-验证缓存&quot;&gt;&lt;a href=&quot;#使用-ETag-验证缓存&quot; class=&quot;headerlink&quot; title=&quot;使用 ETag 验证缓存&quot;&gt;&lt;/a&gt;使用 ETag 验证缓存&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/etag.png&quot; alt=&quot;etag.png-27.9kB&quot;&gt;&lt;br&gt;来源：&lt;a href=&quot;http://mohanraj-nagasamy.github.io/blog/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Browser Cache: How ETags Works in Rails 3 and Rails 4&lt;/a&gt;&lt;br&gt;可以把 ETag 看成是响应的 token，客户端在下一个同样的请求中将其发送给服务器。服务器通过 token 来判断资源是否进行修改。若未修改，则返回 &lt;code&gt;304 Not Modified&lt;/code&gt;，使客户端不需再去下载与缓存中已有的完全相同的字节。&lt;/p&gt;
&lt;h2 id=&quot;fresh-when&quot;&gt;&lt;a href=&quot;#fresh-when&quot; class=&quot;headerlink&quot; title=&quot;fresh_when&quot;&gt;&lt;/a&gt;fresh_when&lt;/h2&gt;&lt;p&gt;在 Rails 中，我们可以通过 &lt;code&gt;stale&lt;/code&gt; 或 &lt;code&gt;fresh_when&lt;/code&gt; 方法来显式地使用 ETag。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsController&lt;/span&gt; &amp;lt; ApplicationController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# This will automatically send back a :not_modified if the request is fresh,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# and will render the default template (product.*) if it&#39;s stale.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;show&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @product = Product.find(params[&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fresh_when &lt;span class=&quot;symbol&quot;&gt;last_modified:&lt;/span&gt; @product.published_at.utc, &lt;span class=&quot;symbol&quot;&gt;etag:&lt;/span&gt; @product&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上例中通过 &lt;a href=&quot;mailto:`@product.publishe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;`@product.publishe&lt;/a&gt;d_at.utc` 来判断资源是否过期。&lt;/p&gt;
&lt;h2 id=&quot;默认开启的-ETag&quot;&gt;&lt;a href=&quot;#默认开启的-ETag&quot; class=&quot;headerlink&quot; title=&quot;默认开启的 ETag&quot;&gt;&lt;/a&gt;默认开启的 ETag&lt;/h2&gt;&lt;p&gt;最近才发现不用 fresh_when 返回的请求也会自带 ETag，查了下原来 Rails 框架默认使用 Rack::ETag middleware，会自动给无 ETag 的 response 根据其 body 添加上 ETag。&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://kaywu.xyz/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>DOM 事件流</title>
    <link href="http://kaywu.xyz/2016/12/25/dom/"/>
    <id>http://kaywu.xyz/2016/12/25/dom/</id>
    <published>2016-12-25T09:45:15.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>“DOM2级事件”规定的事件流包括三个阶段：</p><ol><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ol><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。<br>事件冒泡指事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点。</p><p><img src="/img/event_flow.png" alt="event_flow.png-69.4kB"><br>来源：<a href="https://www.w3.org/TR/DOM-Level-3-Events/#event-flow" target="_blank" rel="noopener">W3C</a><br>以上图的 HTML 页面为例，单击 <code>&lt;td&gt;</code> 会按照上图所示顺序触发事件。</p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;TODO 1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;TODO 2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;TODO 3&lt;/li&gt;</span><br><span class="line">&lt;/ui&gt;</span><br></pre></td></tr></table></figure></p><p>以上面的 HTML 代码为例，按照传统的做法，若要使每个列表项单击后执行相关操作，则需要分别为它们各自添加 click 事件，共 3 个事件。若后续增加了更多的列表项，还需额外为它们添加相应的事件。<br>而使用事件委托，则只需在 <code>&lt;ul&gt;</code> 上添加 click 事件即可。由于所有列表项都是这个元素的子节点，而且它们的事件会冒泡，所以单击事件最终会被 <code>&lt;ul&gt;</code> 的事件处理。与前面的传统做法相比，事件委托占用的内存更小且更为便捷。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>JavaScript 高级程序设计 第 13 章</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事件流&quot;&gt;&lt;a href=&quot;#事件流&quot; class=&quot;headerlink&quot; title=&quot;事件流&quot;&gt;&lt;/a&gt;事件流&lt;/h3&gt;&lt;p&gt;“DOM2级事件”规定的事件流包括三个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件捕获阶段&lt;/li&gt;
&lt;li&gt;处于目标阶段&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Front-End" scheme="http://kaywu.xyz/categories/Front-End/"/>
    
    
      <category term="Front-End" scheme="http://kaywu.xyz/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>FactoryGirl 技巧</title>
    <link href="http://kaywu.xyz/2016/12/18/factory-girl/"/>
    <id>http://kaywu.xyz/2016/12/18/factory-girl/</id>
    <published>2016-12-18T09:18:19.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简洁地设置-Association"><a href="#简洁地设置-Association" class="headerlink" title="简洁地设置 Association"></a>简洁地设置 Association</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:post</span> <span class="keyword">do</span></span><br><span class="line">    association <span class="symbol">:author</span>, <span class="symbol">factory:</span> <span class="symbol">:author</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们可以通过以上来设置相关的 association，但如果 association 的名字与它 factory 的名称是相同的，我们就可以省略其 factory 的设置。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:post</span> <span class="keyword">do</span></span><br><span class="line">    auther</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:post</span> <span class="keyword">do</span></span><br><span class="line">  title <span class="string">"A title"</span></span><br><span class="line"></span><br><span class="line">  factory <span class="symbol">:approved_post</span> <span class="keyword">do</span></span><br><span class="line">    approved <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">approved_post = create(<span class="symbol">:approved_post</span>)</span><br><span class="line">approved_post.title    <span class="comment"># =&gt; "A title"</span></span><br><span class="line">approved_post.approved <span class="comment"># =&gt; true</span></span><br></pre></td></tr></table></figure><p>也能明确指定 parent。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:post</span> <span class="keyword">do</span></span><br><span class="line">  title <span class="string">"A title"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">factory <span class="symbol">:approved_post</span>, <span class="symbol">parent:</span> <span class="symbol">:post</span> <span class="keyword">do</span></span><br><span class="line">  approved <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="使用-Trait"><a href="#使用-Trait" class="headerlink" title="使用 Trait"></a>使用 Trait</h3><p>以 Order 为例，它有多个状态。为了设置不同状态的 Order，我们可以通过写多个 Order 的 factory 来完成。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:order_paid</span> <span class="keyword">do</span></span><br><span class="line">    customer</span><br><span class="line">    state <span class="symbol">:paid</span></span><br><span class="line">    note <span class="string">'This is a paid order'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">factory <span class="symbol">:order_unpaid</span> <span class="keyword">do</span></span><br><span class="line">    customer</span><br><span class="line">    state <span class="symbol">:unpaid</span></span><br><span class="line">    note <span class="string">'This is an unpaid order'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>但如果 Order 的属性很多，这两个 factory 大部分都是重复的。可以使用 trait 来简化类似的 factory。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:order</span> od</span><br><span class="line">    customer</span><br><span class="line">    note <span class="string">'This is a order'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">trait <span class="symbol">:paid</span> <span class="keyword">do</span></span><br><span class="line">    state <span class="symbol">:paid</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">trait <span class="symbol">:unpaid</span> <span class="keyword">do</span></span><br><span class="line">    state <span class="symbol">:unpaid</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>要创建不同状态的 Order 时，使用 <code>create :order, :paid</code> 和 <code>create :order, :unpaid</code>。</p><h3 id="使用-Callback"><a href="#使用-Callback" class="headerlink" title="使用 Callback"></a>使用 Callback</h3><p>当 Model 有多个 association 时，而且多个 association 还存在一定的关系时，我们就不能简单地设置 association，这会使 association 的关系遭到破坏。<br>例如一个订单有多个子订单，而每个子订单都有一个物流信息。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span></span><br><span class="line">    has_many <span class="symbol">:shipments</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubOrder</span></span></span><br><span class="line">    has_one <span class="symbol">:shipment</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shipment</span></span></span><br><span class="line">    belongs_to <span class="symbol">:order</span></span><br><span class="line">    belongs_to <span class="symbol">:sub_order</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>若要创建 Shipment 的 factory，需注意到 order、sub_order 是有一定的关系的。<br>可以通过 FactoryGirl 的 before(:create) 回调来实现。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:shipment</span> <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line">    before <span class="symbol">:create</span> <span class="keyword">do</span> <span class="params">|shipment|</span></span><br><span class="line">        order = create <span class="symbol">:order</span></span><br><span class="line">        sub_order = create <span class="symbol">:sub_order</span>, <span class="symbol">order:</span> order</span><br><span class="line">        shipment.order = order</span><br><span class="line">        shipment.sub_order = sub_order</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>除 before(:create) 外，还有 after(:build)、after(:create)、after(:stub)。</p><h3 id="设置-Transient-Attributes"><a href="#设置-Transient-Attributes" class="headerlink" title="设置 Transient Attributes"></a>设置 Transient Attributes</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FactoryGirl.define <span class="keyword">do</span></span><br><span class="line">  factory <span class="symbol">:comment</span> <span class="keyword">do</span></span><br><span class="line">    author</span><br><span class="line">    body <span class="string">'Post body'</span></span><br><span class="line">    approved_at Date.new(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">18</span>)</span><br><span class="line">    post</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  factory <span class="symbol">:post</span> <span class="keyword">do</span></span><br><span class="line">    title <span class="string">'New post'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  trait <span class="symbol">:with_comments</span> <span class="keyword">do</span></span><br><span class="line">    after <span class="symbol">:create</span> <span class="keyword">do</span> <span class="params">|post|</span></span><br><span class="line">      create_list <span class="symbol">:comment</span>, <span class="number">3</span>, <span class="symbol">:post</span> =&gt; post</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>create :post, :with_comments</code> 会创建带有 3 条 comment 的 post。但若我们只想要有 2 条 comment 呢？通过 transient attributes 可以在 create 时动态地更改 comment 的数量。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FactoryGirl.define <span class="keyword">do</span></span><br><span class="line">  factory <span class="symbol">:comment</span> <span class="keyword">do</span></span><br><span class="line">    author</span><br><span class="line">    body <span class="string">'Post body'</span></span><br><span class="line">    approved_at Date.new(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">18</span>)</span><br><span class="line">    post</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  factory <span class="symbol">:post</span> <span class="keyword">do</span></span><br><span class="line">    title <span class="string">'New post'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  trait <span class="symbol">:with_comments</span> <span class="keyword">do</span></span><br><span class="line">    transient <span class="keyword">do</span></span><br><span class="line">        comments_count <span class="number">3</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    after <span class="symbol">:create</span> <span class="keyword">do</span> <span class="params">|post, evaluator|</span></span><br><span class="line">      create_list <span class="symbol">:comment</span>, evaluator.comments_count, <span class="symbol">:post</span> =&gt; post</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>调用 <code>create :post, :with_comments, comments_count: 2</code> 即可。</p><h3 id="Lazy-Attributes"><a href="#Lazy-Attributes" class="headerlink" title="Lazy Attributes"></a>Lazy Attributes</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:product</span> <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line">    name Faker::Name.name</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里使用 Faker 来动态生成名字。但是调用 <code>create :product</code> 多次后你会发现它们的名字都是相同的。若想在每次创建实例时重新执行 <code>Faker::Name.name</code>，<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">factory <span class="symbol">:product</span> <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line">    name &#123; Faker::Name.name &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>这样生成实例时都会调用 <code>Faker::Name.name</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://arjanvandergaag.nl/blog/factory_girl_tips.html" target="_blank" rel="noopener">FactoryGirl Tips and Tricks</a></li><li><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md" target="_blank" rel="noopener">FactoryGirl - Getting Started</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简洁地设置-Association&quot;&gt;&lt;a href=&quot;#简洁地设置-Association&quot; class=&quot;headerlink&quot; title=&quot;简洁地设置 Association&quot;&gt;&lt;/a&gt;简洁地设置 Association&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    association &lt;span class=&quot;symbol&quot;&gt;:author&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;factory:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:author&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过以上来设置相关的 association，但如果 association 的名字与它 factory 的名称是相同的，我们就可以省略其 factory 的设置。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    auther&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title &lt;span class=&quot;string&quot;&gt;&quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    approved &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post = create(&lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post.title    &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post.approved &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也能明确指定 parent。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title &lt;span class=&quot;string&quot;&gt;&quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;parent:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  approved &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://kaywu.xyz/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://kaywu.xyz/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Javascript == 和 === 区别</title>
    <link href="http://kaywu.xyz/2016/12/16/js-equal/"/>
    <id>http://kaywu.xyz/2016/12/16/js-equal/</id>
    <published>2016-12-16T09:48:31.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>最主要的区别，== 会在比较前进行转化，而 === 比较前不进行转化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var result1 = (&apos;55&apos; == 55) // true，因为转换后相等</span><br><span class="line">var result2 = (&apos;55&apos; === 55) // false，因为不同的数据类型不相等</span><br></pre></td></tr></table></figure></p><h2 id="相等"><a href="#相等" class="headerlink" title="相等 =="></a>相等 ==</h2><p>相等操作符会先转换操作数（通常称为强制转型），然后再比较它们的相等性。</p><p>在转换时：<br>如果有一个操作数是布尔值，则在比较相等性之前将其转换为数值—— false 为 0，true 为 1。<br>如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值。<br>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类型值按照前面的规则进行比较。</p><p>在比较时：<br>null 和 undefined 是相等的。<br>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值。<br>如果有一个操作数是 NaN（两个 NaN也是），则相等操作符返回 false。<br>如果两个操作数都是对象，则比较它们是不是同一个对象。如果指向同一个对象则返回 true。</p><h2 id="全等"><a href="#全等" class="headerlink" title="全等 ==="></a>全等 ===</h2><p>除了在比较之前不转换操作数之外，全等和不全等操作符与相等和不相等操作符没有什么区别。它只在两个操作数未经转换就相等的情况下返回 true。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>JavaScript 高级程序设计 P52</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;比较&quot;&gt;&lt;a href=&quot;#比较&quot; class=&quot;headerlink&quot; title=&quot;比较&quot;&gt;&lt;/a&gt;比较&lt;/h2&gt;&lt;p&gt;最主要的区别，== 会在比较前进行转化，而 === 比较前不进行转化。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://kaywu.xyz/categories/Front-End/"/>
    
    
      <category term="Front-End" scheme="http://kaywu.xyz/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>Rails &amp; MySQL 使用 emoji 时 Incorrect string value 解决方法</title>
    <link href="http://kaywu.xyz/2016/12/04/mysql-emoji/"/>
    <id>http://kaywu.xyz/2016/12/04/mysql-emoji/</id>
    <published>2016-12-04T09:50:50.000Z</published>
    <updated>2017-09-10T08:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>当在 charset 为 utf-8 的 MySQL 中插入 emoji 时，数据库会报错 <code>Incorrect string value</code>。<br>仔细一想，这很奇怪。因为 emoji 本身可以通过 utf-8 来表示，作为 utf-8 的 MySQL 表来说报错实在是太不应该了。<br>查了之后，才发现原来 MySQL 的 utf-8 是不完全的，只支持 1-3 个字节，而 emoji 的 utf-8 编码大多为 4 个字节。为了支持更多的字符集，MySQL 5.5 推出了编码 utf8mb4，使其可以兼容 4 字节的 emoji。<br>因此，若要让数据库支持 emoji，可以将编码从 utf-8 改为 utf8mb4。</p><p>对于新创建的表这样没有问题，但对于旧有的表来说更改字符集代价很大。有没有一个更简单的方法来实现呢？<br>对 Rails 来说是有的。可以通过 <code>serialize</code> 来实现。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ActiveRecord::Base</span></span><br><span class="line">    serialize <span class="symbol">:content</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>这时存储 emoji 时，就会先进行 serialize 再存入数据库。由于不是直接以 emoji 的 utf-8 编码存储，MySQL 也就不会报错了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dev.firmafon.dk/blog/quick-no-hack-emoji-support-with-mysql-rails/" target="_blank" rel="noopener">Quick, no-hack emoji support with MySQL &amp; Rails</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当在 charset 为 utf-8 的 MySQL 中插入 emoji 时，数据库会报错 &lt;code&gt;Incorrect string value&lt;/code&gt;。&lt;br&gt;仔细一想，这很奇怪。因为 emoji 本身可以通过 utf-8 来表示，作为 utf-8 的 MySQ
      
    
    </summary>
    
      <category term="MySQL" scheme="http://kaywu.xyz/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://kaywu.xyz/tags/MySQL/"/>
    
  </entry>
  
</feed>
