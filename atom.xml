<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kay Wu&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kaywu.xyz/"/>
  <updated>2017-07-24T12:11:55.000Z</updated>
  <id>http://kaywu.xyz/</id>
  
  <author>
    <name>Kay Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>互联网创业核心技术：构建可伸缩的 Web 应用</title>
    <link href="http://kaywu.xyz/2017/07/13/core-tech/"/>
    <id>http://kaywu.xyz/2017/07/13/core-tech/</id>
    <published>2017-07-13T09:23:30.000Z</published>
    <updated>2017-07-24T12:11:55.000Z</updated>
    
    <content type="html">&lt;p&gt;《互联网创业核心技术：构建可伸缩的 Web 应用》整本书围绕“可伸缩”三个字，对 Web 应用的每一层展开了全面细致的解说。&lt;br&gt;如果你和我一样，对负载均衡、水平伸缩之类的概念不是很了解，或者不清楚它在整个架构中的使用，那么你应该来读下这本书。&lt;br&gt;读完之后你会发现架构这东西是有迹可循的，是围绕一系列基本的原则建立起来的。&lt;/p&gt;
&lt;p&gt;一图胜千言，这本书不仅有着易懂的语言，而且有大量简洁的示意图。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/img/core_tech.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;上图大致说明了本书涉及的内容，从前后端设计、存储设计，再到消息队列和缓存等的使用场景。&lt;/p&gt;
&lt;p&gt;我读到这本书时颇有意外之喜，毕竟这是凑单的书，可见这书挺冷门的。在这里推荐一下，希望能有更多的人读到。&lt;br&gt;可以搭配 &lt;a href=&quot;https://www.youtube.com/watch?v=-W9F__D3oY4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scalability Harvard Web Development (需翻墙)&lt;/a&gt; 一起使用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;《互联网创业核心技术：构建可伸缩的 Web 应用》整本书围绕“可伸缩”三个字，对 Web 应用的每一层展开了全面细致的解说。&lt;br&gt;如果你和我一样，对负载均衡、水平伸缩之类的概念不是很了解，或者不清楚它在整个架构中的使用，那么你应该来读下这本书。&lt;br&gt;读完之后你会发现架构这东西是有迹可循的，是围绕一系列基本的原则建立起来的。&lt;/p&gt;
&lt;p&gt;一图胜千言，这本书不仅有着易懂的语言，而且有大量简洁的示意图。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://kaywu.xyz/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>FactoryGirl 源码浅析</title>
    <link href="http://kaywu.xyz/2017/06/28/factory-girl-analysis/"/>
    <id>http://kaywu.xyz/2017/06/28/factory-girl-analysis/</id>
    <published>2017-06-28T09:21:20.000Z</published>
    <updated>2017-07-18T14:35:19.000Z</updated>
    
    <content type="html">&lt;p&gt;FactoryGirl 是我个人十分喜欢的 Gem，它能很方便地模拟测试数据。使用技巧可见 &lt;a href=&quot;http://www.jianshu.com/p/cca80f341d77&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FactoryGirl 技巧&lt;/a&gt;。出于兴趣我研究了下它的源代码，说实话比想象得要复杂。由于 FactoryGirl 配置的灵活性以及 Ruby 本身的语言特点，使得它代码整体上比较飘逸。&lt;br&gt;这里我会对它最基础的方法进行分析，版本为 4.8.0。&lt;/p&gt;
&lt;h3 id=&quot;FactoryGirl-define&quot;&gt;&lt;a href=&quot;#FactoryGirl-define&quot; class=&quot;headerlink&quot; title=&quot;FactoryGirl.define&quot;&gt;&lt;/a&gt;FactoryGirl.define&lt;/h3&gt;&lt;p&gt;先从定义 Factory 开始。下面的代码定义了名为 user 的 Factory，它有一个名为 name 的属性，值为 Kay。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name &lt;span class=&quot;string&quot;&gt;&#39;Kay&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们先找到 FactoryGirl.define 的入口，在 syntax/default.rb 里。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# syntax/default.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FactoryGirl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Default&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;constant&quot;&gt;DSL&lt;/span&gt;.run(block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DSL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, options = &amp;#123;&amp;#125;, &amp;amp;block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          factory = &lt;span class=&quot;constant&quot;&gt;Factory&lt;/span&gt;.new(name, options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          proxy = &lt;span class=&quot;constant&quot;&gt;FactoryGirl::DefinitionProxy&lt;/span&gt;.new(factory.definition)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          proxy.instance_eval(&amp;amp;block) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; block_given?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;constant&quot;&gt;FactoryGirl&lt;/span&gt;.register_factory(factory)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          proxy.child_factories.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |(child_name, child_options, child_block)|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            parent_factory = child_options.delete(&lt;span class=&quot;symbol&quot;&gt;:parent&lt;/span&gt;) || name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            factory(child_name, child_options.merge(&lt;span class=&quot;symbol&quot;&gt;parent:&lt;/span&gt; parent_factory), &amp;amp;child_block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          new.instance_eval(&amp;amp;block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend &lt;span class=&quot;constant&quot;&gt;Syntax::Default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码分析可得，define 会调用 DSL.run，之后调用了 DSL#factory 方法，传入的参数 name 为 &lt;code&gt;:user&lt;/code&gt;，block 为 &lt;code&gt;{ name &amp;#39;Kay&amp;#39; }&lt;/code&gt;。我们重点看 factory 方法其中 4 行：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# DSL#factory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factory = &lt;span class=&quot;constant&quot;&gt;Factory&lt;/span&gt;.new(name, options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy = &lt;span class=&quot;constant&quot;&gt;FactoryGirl::DefinitionProxy&lt;/span&gt;.new(factory.definition)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy.instance_eval(&amp;amp;block) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; block_given?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;FactoryGirl&lt;/span&gt;.register_factory(factory)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先，会创建一个新的 Factory 对象，然后通过代理类 FactoryGirl::DefinitionProxy 对其进行封装，并执行其中的 block，最后注册这个 factory。其中 &lt;code&gt;proxy.instance_eval(&amp;amp;block) if block_given?&lt;/code&gt; 是属性赋值的关键。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{ name &amp;#39;Kay&amp;#39; }&lt;/code&gt; 会调用 FactoryGirl::DefinitionProxy 的 name 方法，但由于代理类没有该方法，最终会执行 method_missing，而该方法实现了赋值的逻辑。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, *args, &amp;amp;block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; args.empty? &amp;amp;&amp;amp; block.&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@definition&lt;/span&gt;.declare_attribute(&lt;span class=&quot;constant&quot;&gt;Declaration::Implicit&lt;/span&gt;.new(name, &lt;span class=&quot;variable&quot;&gt;@definition&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;@ignore&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;elsif&lt;/span&gt; args.first.respond_to?(&lt;span class=&quot;symbol&quot;&gt;:has_key?&lt;/span&gt;) &amp;amp;&amp;amp; args.first.has_key?(&lt;span class=&quot;symbol&quot;&gt;:factory&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    association(name, *args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    add_attribute(name, *args, &amp;amp;block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于赋值除了固定值，还可能是 block 或者 association，这里对几种情况分别进行了处理。&lt;/p&gt;
&lt;p&gt;FactoryGirl.define 的分析差不多结束了，method_missing 这一元编程的魔法在这里又发挥了巨大的作用。&lt;/p&gt;
&lt;h3 id=&quot;FactoryGirl-create&quot;&gt;&lt;a href=&quot;#FactoryGirl-create&quot; class=&quot;headerlink&quot; title=&quot;FactoryGirl.create&quot;&gt;&lt;/a&gt;FactoryGirl.create&lt;/h3&gt;&lt;p&gt;讲完了 Factory 是如何定义的，我们来研究下如何创建一个 Factory。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user = &lt;span class=&quot;constant&quot;&gt;FactoryGirl&lt;/span&gt;.create(&lt;span class=&quot;symbol&quot;&gt;:user&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Link&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们首先得找到 create 的入口。当搜寻了一遍之后会发现，并没有显式定义 create 的地方。看来该方法是动态定义的了。从官方文档上来看，create 定义在 FactoryGirl::Syntax::Methods。搜索之后发现 StrategySyntaxMethodRegistrar 里出现了给它动态添加方法的代码。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# strategy_syntax_method_registrar.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FactoryGirl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;define_singular_strategy_method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      strategy_name = &lt;span class=&quot;variable&quot;&gt;@strategy_name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      define_syntax_method(strategy_name) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |name, *traits_and_overrides, &amp;amp;block|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;constant&quot;&gt;FactoryRunner&lt;/span&gt;.new(name, strategy_name, traits_and_overrides).run(&amp;amp;block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;define_syntax_method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, &amp;amp;block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;constant&quot;&gt;FactoryGirl::Syntax::Methods&lt;/span&gt;.module_exec &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; method_defined?(name) || private_method_defined?(name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          undef_method(name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        define_method(name, &amp;amp;block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用 create 替换 strategy_name，FactoryGirl.create 实质调用了 &lt;code&gt;FactoryRunner.new(name, :create, : traits_and_overrides).run(&amp;amp;block)&lt;/code&gt;。而 FactoryRunner#run 在进行了一些准备后，最终调用了 &lt;code&gt;factory.run(runner_strategy, @overrides, &amp;amp;block)&lt;/code&gt; 来创建对象。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Factory#run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(build_strategy, overrides, &amp;amp;block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  block ||= -&amp;gt;(result) &amp;#123; result &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  strategy = &lt;span class=&quot;constant&quot;&gt;StrategyCalculator&lt;/span&gt;.new(build_strategy).strategy.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  evaluator = evaluator_class.new(strategy, overrides.symbolize_keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  attribute_assigner = &lt;span class=&quot;constant&quot;&gt;AttributeAssigner&lt;/span&gt;.new(evaluator, build_class, &amp;amp;compiled_constructor)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  evaluation = &lt;span class=&quot;constant&quot;&gt;Evaluation&lt;/span&gt;.new(attribute_assigner, compiled_to_create)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  evaluation.add_observer(&lt;span class=&quot;constant&quot;&gt;CallbacksObserver&lt;/span&gt;.new(callbacks, evaluator))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  strategy.result(evaluation).tap(&amp;amp;block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一行 &lt;code&gt;strategy.result(evaluation).tap(&amp;amp;block)&lt;/code&gt; 最终返回的是 evaluation.object，而 evaluation 把 object 委托给 attribute_assigner。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# AttributeAssigner#object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;variable&quot;&gt;@evaluator&lt;/span&gt;.instance = build_class_instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build_class_instance.tap &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |instance|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    attributes_to_set_on_instance.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |attribute|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      instance.public_send(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;attribute&amp;#125;&lt;/span&gt;=&quot;&lt;/span&gt;, get(attribute))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable&quot;&gt;@attribute_names_assigned&lt;/span&gt; &amp;lt;&amp;lt; attribute&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;build_class_instance 实质上调用了 User.new 方法，创建了 User 对象。&lt;code&gt;instance.public_send&lt;/code&gt; 对该对象的属性进行赋值。&lt;/p&gt;
&lt;p&gt;至此最关键的创建步骤说完了，我们简单地说下其他几行的作用。&lt;br&gt;&lt;code&gt;compile&lt;/code&gt; 主要处理 Factory 之间的继承关系。&lt;br&gt;&lt;code&gt;StrategyCalculator.new(build_strategy).strategy.new&lt;/code&gt; 为简单工厂，可以根据 Strategy 的名字找到对应的类。&lt;br&gt;evaluator 保存了属性的赋值。为什么不直接进行赋值，而要使用一个中间类？我觉得原因是，FactoryGirl 创建 user 时不仅可以给 user 的属性赋值，还可以给 evaluator 赋值。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name &lt;span class=&quot;string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    factory &lt;span class=&quot;symbol&quot;&gt;:user_with_posts&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      transient &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        posts_count &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      after(&lt;span class=&quot;symbol&quot;&gt;:create&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |user, evaluator|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        create_list(&lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt;, evaluator.posts_count, &lt;span class=&quot;symbol&quot;&gt;user:&lt;/span&gt; user)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create(&lt;span class=&quot;symbol&quot;&gt;:user_with_posts&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;posts_count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里的 posts_count 不是 user 本身的属性，而属于 evaluator。&lt;br&gt;AttributeAssigner 创建了 user 对象，并给它赋值。&lt;br&gt;Evaluation 是对 Strategy 回调方法的一个封装，比如 Strategy::Create，都是直接调用的 evaluation 的方法。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Strategy::Create#result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(evaluation)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  evaluation.object.tap &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |instance|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    evaluation.notify(&lt;span class=&quot;symbol&quot;&gt;:after_build&lt;/span&gt;, instance)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    evaluation.notify(&lt;span class=&quot;symbol&quot;&gt;:before_create&lt;/span&gt;, instance)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    evaluation.create(instance)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    evaluation.notify(&lt;span class=&quot;symbol&quot;&gt;:after_create&lt;/span&gt;, instance)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;顺带说下，compiled_constructor、compiled_to_create 在经过千辛万苦的查找后，是两个非常简单的 block。compiled_constructor 为 &lt;code&gt;{ new }&lt;/code&gt;，而 compiled_to_create 为 &lt;code&gt;{ |instance| instance.save! }&lt;/code&gt;，来自 configuration.rb 19、20 行。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;由于水平精力有限，只简单地分析了最基础的 define 和 create 方法。&lt;br&gt;define 使用了 method_missing 来实现属性的赋值。由于 FactoryGirl create 对象时能通过很灵活的方式，比如 trait，使得其代码在创建对象时要考虑各方面的配置。这里只抽出了最主要的流程进行说明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;FactoryGirl 是我个人十分喜欢的 Gem，它能很方便地模拟测试数据。使用技巧可见 &lt;a href=&quot;http://www.jianshu.com/p/cca80f341d77&quot;&gt;FactoryGirl 技巧&lt;/a&gt;。出于兴趣我研究了下它的源代码，说实话比想象得要复杂。由于 FactoryGirl 配置的灵活性以及 Ruby 本身的语言特点，使得它代码整体上比较飘逸。&lt;br&gt;这里我会对它最基础的方法进行分析，版本为 4.8.0。&lt;/p&gt;
&lt;h3 id=&quot;FactoryGirl-define&quot;&gt;&lt;a href=&quot;#FactoryGirl-define&quot; class=&quot;headerlink&quot; title=&quot;FactoryGirl.define&quot;&gt;&lt;/a&gt;FactoryGirl.define&lt;/h3&gt;&lt;p&gt;先从定义 Factory 开始。下面的代码定义了名为 user 的 Factory，它有一个名为 name 的属性，值为 Kay。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name &lt;span class=&quot;string&quot;&gt;&#39;Kay&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://kaywu.xyz/categories/Ruby/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式必知必会</title>
    <link href="http://kaywu.xyz/2017/05/30/regex/"/>
    <id>http://kaywu.xyz/2017/05/30/regex/</id>
    <published>2017-05-30T09:37:21.000Z</published>
    <updated>2017-07-18T14:36:04.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;匹配单个字符&quot;&gt;&lt;a href=&quot;#匹配单个字符&quot; class=&quot;headerlink&quot; title=&quot;匹配单个字符&quot;&gt;&lt;/a&gt;匹配单个字符&lt;/h2&gt;&lt;h3 id=&quot;匹配纯文本&quot;&gt;&lt;a href=&quot;#匹配纯文本&quot; class=&quot;headerlink&quot; title=&quot;匹配纯文本&quot;&gt;&lt;/a&gt;匹配纯文本&lt;/h3&gt;&lt;p&gt;正则：&lt;code&gt;Ben&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;Hello, my name is &lt;code&gt;Ben&lt;/code&gt;. Please visit my website at &lt;a href=&quot;http://www.forta.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.forta.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;匹配任意字符&quot;&gt;&lt;a href=&quot;#匹配任意字符&quot; class=&quot;headerlink&quot; title=&quot;匹配任意字符&quot;&gt;&lt;/a&gt;匹配任意字符&lt;/h3&gt;&lt;p&gt;. 匹配任意单个字符。在绝大多数的正则表达式实现里，. 只能匹配除换行符以外的任何单个字符。&lt;br&gt;正则：&lt;code&gt;sales.&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;&lt;code&gt;sales1&lt;/code&gt;.xls&lt;br&gt;orders3.xls&lt;br&gt;&lt;code&gt;sales2&lt;/code&gt;.xls&lt;br&gt;&lt;code&gt;sales3&lt;/code&gt;.xls&lt;br&gt;apac1.xls&lt;br&gt;europe2.xls&lt;br&gt;na1.xls&lt;br&gt;na2.xls&lt;br&gt;sa1.xls&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;匹配特殊字符&quot;&gt;&lt;a href=&quot;#匹配特殊字符&quot; class=&quot;headerlink&quot; title=&quot;匹配特殊字符&quot;&gt;&lt;/a&gt;匹配特殊字符&lt;/h3&gt;&lt;p&gt;元字符是一些在正则表达式里有着特殊含义的字符。如英语句号（.）是一个元字符，它可以用来匹配任何一个单个字符。因为元字符在正则表达式里有着特殊的含义，所以这些字符就无法用来代表它们本身。比如你不能使用 . 类匹配 . 本身。&lt;br&gt;在元字符的前面加上一个反斜杠就可以对它进行转移，转义序列 . 将匹配 . 本身。&lt;br&gt;正则：&lt;code&gt;.a.\.xls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt;&lt;br&gt;sales1.xls&lt;br&gt;orders3.xls&lt;br&gt;sales2.xls&lt;br&gt;sales3.xls&lt;br&gt;apac1.xls&lt;br&gt;europe2.xls&lt;br&gt;&lt;code&gt;na1.xls&lt;/code&gt;&lt;br&gt;&lt;code&gt;na2.xls&lt;/code&gt;&lt;br&gt;&lt;code&gt;sa1.xls&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;匹配一组字符&quot;&gt;&lt;a href=&quot;#匹配一组字符&quot; class=&quot;headerlink&quot; title=&quot;匹配一组字符&quot;&gt;&lt;/a&gt;匹配一组字符&lt;/h2&gt;&lt;h3 id=&quot;匹配多个字符中的某一个&quot;&gt;&lt;a href=&quot;#匹配多个字符中的某一个&quot; class=&quot;headerlink&quot; title=&quot;匹配多个字符中的某一个&quot;&gt;&lt;/a&gt;匹配多个字符中的某一个&lt;/h3&gt;&lt;p&gt;可以使用元字符 [  和 ] 来定义一个字符集合，在使用 [ 和 ] 定义的字符集合里，这两个元字符之间的所有字符都是该集合的组成部分，字符集合的匹配结果是能够与该集合里的任意一个成员想匹配的文本。&lt;br&gt;正则：&lt;code&gt;[ns]a.\.xls&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;sales1.xls&lt;br&gt;orders3.xls&lt;br&gt;sales2.xls&lt;br&gt;sales3.xls&lt;br&gt;apac1.xls&lt;br&gt;europe2.xls&lt;br&gt;&lt;code&gt;na1.xls&lt;/code&gt;&lt;br&gt;&lt;code&gt;na2.xls&lt;/code&gt;&lt;br&gt;&lt;code&gt;sa1.xls&lt;/code&gt;&lt;br&gt;ca1.xls&lt;/p&gt;
&lt;h3 id=&quot;利用字符集合区间&quot;&gt;&lt;a href=&quot;#利用字符集合区间&quot; class=&quot;headerlink&quot; title=&quot;利用字符集合区间&quot;&gt;&lt;/a&gt;利用字符集合区间&lt;/h3&gt;&lt;p&gt;模式 [0-9] 的功能与 [0123456789] 完全等价。&lt;/p&gt;
&lt;p&gt;正则：&lt;code&gt;[ns]a[0-9]\.xls&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;sales1.xls&lt;br&gt;orders3.xls&lt;br&gt;sales2.xls&lt;br&gt;sales3.xls&lt;br&gt;apac1.xls&lt;br&gt;europe2.xls&lt;br&gt;&lt;code&gt;na1.xls&lt;/code&gt;&lt;br&gt;&lt;code&gt;na2.xls&lt;/code&gt;&lt;br&gt;&lt;code&gt;sa1.xls&lt;/code&gt;&lt;br&gt;ca1.xls&lt;/p&gt;
&lt;p&gt;其他常用的字符区间：&lt;br&gt;A-Z：匹配从 A 到 Z 的所有大写字母。&lt;br&gt;a-z：匹配从 a 到 z 的所有小写字母。&lt;/p&gt;
&lt;h3 id=&quot;取非匹配&quot;&gt;&lt;a href=&quot;#取非匹配&quot; class=&quot;headerlink&quot; title=&quot;取非匹配&quot;&gt;&lt;/a&gt;取非匹配&lt;/h3&gt;&lt;p&gt;用元字符 ^ 来表明你相对一个字符集合进行取非匹配，也就是除了那个字符集里的字符，其他字符都可以匹配。&lt;br&gt;正则：&lt;code&gt;[ns]a[^0-9]\.xls&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;sales1.xls&lt;br&gt;orders3.xls&lt;br&gt;sales2.xls&lt;br&gt;sales3.xls&lt;br&gt;apac1.xls&lt;br&gt;europe2.xls&lt;br&gt;&lt;code&gt;sam.xls&lt;/code&gt;&lt;br&gt;na1.xls&lt;br&gt;na2.xls&lt;br&gt;sa1.xls&lt;br&gt;ca1.xls&lt;/p&gt;
&lt;h3 id=&quot;匹配特定的字符类型&quot;&gt;&lt;a href=&quot;#匹配特定的字符类型&quot; class=&quot;headerlink&quot; title=&quot;匹配特定的字符类型&quot;&gt;&lt;/a&gt;匹配特定的字符类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;元字符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;任何一个数字字符（等价于[0-9]）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;任何一个非数字字符（等价于[^0-9]）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;任何一个非字母数字或非下划线字符（等价于[^a-zA-Z0-9_]）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;正则：&lt;code&gt;myArray\[\d\]&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;var myArray = new Array();&lt;br&gt;…&lt;br&gt;if (&lt;code&gt;myArray[0]&lt;/code&gt; == 0) {&lt;br&gt;…&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;正则：&lt;code&gt;\w\d\w\d\w\d&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;11213&lt;br&gt;&lt;code&gt;A1C2E3&lt;/code&gt;&lt;br&gt;48075&lt;br&gt;48237&lt;br&gt;&lt;code&gt;M1B4F2&lt;/code&gt;&lt;br&gt;90046&lt;br&gt;&lt;code&gt;H1H2H2&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;匹配空白字符&quot;&gt;&lt;a href=&quot;#匹配空白字符&quot; class=&quot;headerlink&quot; title=&quot;匹配空白字符&quot;&gt;&lt;/a&gt;匹配空白字符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;元字符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[\b]&lt;/td&gt;
&lt;td&gt;回退（并删除）一个字符（Backspace键）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;换页符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;回车符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;制表符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;垂直制表符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;任何一个空白字符（等价于[\f\n\r\t\v]）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;任何一个非空白字符（等价于[^\f\n\r\t\v]）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;重复匹配&quot;&gt;&lt;a href=&quot;#重复匹配&quot; class=&quot;headerlink&quot; title=&quot;重复匹配&quot;&gt;&lt;/a&gt;重复匹配&lt;/h2&gt;&lt;h3 id=&quot;匹配一个或多个字符&quot;&gt;&lt;a href=&quot;#匹配一个或多个字符&quot; class=&quot;headerlink&quot; title=&quot;匹配一个或多个字符&quot;&gt;&lt;/a&gt;匹配一个或多个字符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;匹配一个或多个字符（至少一个；不匹配零个字符的情况）。&lt;br&gt;正则：&lt;code&gt;\w+@\w+\.\w+&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;Send personal email to &lt;code&gt;ben@forta.com&lt;/code&gt;. For questions about a book use &lt;code&gt;support@forta.com&lt;/code&gt;. Feel free to send unsolicited email to &lt;code&gt;spam@forta.com&lt;/code&gt; (wouldn’t it be nice if it were that simple, huh?).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;匹配零个或多个字符&quot;&gt;&lt;a href=&quot;#匹配零个或多个字符&quot; class=&quot;headerlink&quot; title=&quot;匹配零个或多个字符&quot;&gt;&lt;/a&gt;匹配零个或多个字符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;元字符匹配零个或多个字符。&lt;br&gt;正则：&lt;code&gt;\w+[\w.]*@[\w.]+\.\w+&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;Hello, &lt;code&gt;.ben@forta.com&lt;/code&gt; is my email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;匹配零个或一个字符&quot;&gt;&lt;a href=&quot;#匹配零个或一个字符&quot; class=&quot;headerlink&quot; title=&quot;匹配零个或一个字符&quot;&gt;&lt;/a&gt;匹配零个或一个字符&lt;/h3&gt;&lt;p&gt;? 只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。&lt;br&gt;正则：&lt;code&gt;https?://[\w./]+&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;The URL is &lt;code&gt;http://www.forta.com/&lt;/code&gt;, to connect securely use &lt;code&gt;https://www.forta.com/&lt;/code&gt; instead.&lt;/p&gt;
&lt;h3 id=&quot;匹配的重复次数&quot;&gt;&lt;a href=&quot;#匹配的重复次数&quot; class=&quot;headerlink&quot; title=&quot;匹配的重复次数&quot;&gt;&lt;/a&gt;匹配的重复次数&lt;/h3&gt;&lt;p&gt;{3}意味着模式里的前一个字符（或字符集合）必须在原始文本里连续重复出现 3 次才算是一个匹配。&lt;br&gt;{2, 4} 的含义是最少重复 2 次、最多重复 4 次。&lt;br&gt;{3，} 表示至少重复 3 次。&lt;/p&gt;
&lt;h3 id=&quot;懒惰型元字符&quot;&gt;&lt;a href=&quot;#懒惰型元字符&quot; class=&quot;headerlink&quot; title=&quot;懒惰型元字符&quot;&gt;&lt;/a&gt;懒惰型元字符&lt;/h3&gt;&lt;p&gt;正则：&lt;code&gt;&amp;lt;[Bb]&amp;gt;.*&amp;lt;/[Bb]&amp;gt;&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;This offer is not available to customers living in &lt;code&gt;&amp;lt;B&amp;gt;AK&amp;lt;/B&amp;gt; and &amp;lt;B&amp;gt;HI&amp;lt;/B&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;因为 * 和 + 都是所谓的“贪婪型”元字符，它们在进行匹配时的行为模式是多多益善而不是适可而止的，会尽可能地从一段文本的开头一直匹配到这段文本的末尾。&lt;br&gt;在不需要这种“贪婪行为”的时候该怎么办？答案是使用这些元字符的“懒惰型”版本。懒惰型元字符只要给贪婪性元字符加上一个 ? 后缀即可。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;贪婪型元字符&lt;/th&gt;
&lt;th&gt;懒惰型元字符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n, }&lt;/td&gt;
&lt;td&gt;{n, }?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;正则：&lt;code&gt;&amp;lt;[Bb]&amp;gt;.*?&amp;lt;/[Bb]&amp;gt;&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;This offer is not available to customers living in &lt;code&gt;&amp;lt;B&amp;gt;AK&amp;lt;/B&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;B&amp;gt;HI&amp;lt;/B&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;位置匹配&quot;&gt;&lt;a href=&quot;#位置匹配&quot; class=&quot;headerlink&quot; title=&quot;位置匹配&quot;&gt;&lt;/a&gt;位置匹配&lt;/h2&gt;&lt;h3 id=&quot;单词边界&quot;&gt;&lt;a href=&quot;#单词边界&quot; class=&quot;headerlink&quot; title=&quot;单词边界&quot;&gt;&lt;/a&gt;单词边界&lt;/h3&gt;&lt;p&gt;\b 用来匹配一个单词的开始或结尾。&lt;br&gt;简单地说，\b 匹配的是一个这样的位置，这个位置位于一个能够用户构成单词的字符（字母、数字和下划线，也就是与 \w 相匹配的字符）和一个不能用来构成单词的字符（也就是与 \W 相匹配的字符）之间。&lt;br&gt;正则：&lt;code&gt;\bcat\b&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;The &lt;code&gt;cat&lt;/code&gt; scattered his food all over the room.&lt;/p&gt;
&lt;h3 id=&quot;字符串边界&quot;&gt;&lt;a href=&quot;#字符串边界&quot; class=&quot;headerlink&quot; title=&quot;字符串边界&quot;&gt;&lt;/a&gt;字符串边界&lt;/h3&gt;&lt;p&gt;^ 用来定义字符串开头，\$ 用来定义字符串结尾。&lt;br&gt;注意：不同语言对 ^ \$ 的处理有所不同。比如 Javascript 是按照以上定义实现的，而 Ruby 中 ^ 匹配一行的开始，\$ 匹配一行的结束。具体可参考 &lt;a href=&quot;http://www.regular-expressions.info/anchors.html。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.regular-expressions.info/anchors.html。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用子表达式&quot;&gt;&lt;a href=&quot;#使用子表达式&quot; class=&quot;headerlink&quot; title=&quot;使用子表达式&quot;&gt;&lt;/a&gt;使用子表达式&lt;/h2&gt;&lt;p&gt;子表达式是一个更大的表达式的一部分，把一个表达式划分为一系列子表达式的目的是为了把那些子表达式当做一个独立元素来使用。子表达式必须用 ( 和 ) 括起来。&lt;br&gt;正则：&lt;code&gt;(19|20)\d{2}&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;ID: 042&lt;br&gt;SEX: M&lt;br&gt;DOB: &lt;code&gt;1967&lt;/code&gt;-08-17&lt;br&gt;Status: Active&lt;/p&gt;
&lt;p&gt;| 字符表示或操作符，19|20 将匹配数字序列 19 或 20。&lt;/p&gt;
&lt;h2 id=&quot;回溯引用：前后一致匹配&quot;&gt;&lt;a href=&quot;#回溯引用：前后一致匹配&quot; class=&quot;headerlink&quot; title=&quot;回溯引用：前后一致匹配&quot;&gt;&lt;/a&gt;回溯引用：前后一致匹配&lt;/h2&gt;&lt;p&gt;正则：&lt;code&gt;[ ]+(\w+)[ ]+\1&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;This is a block &lt;code&gt;of of&lt;/code&gt; text, several words here &lt;code&gt;are are&lt;/code&gt; repeated, &lt;code&gt;and and&lt;/code&gt; they should not be.&lt;/p&gt;
&lt;p&gt;\1 不是一个回溯引用，而它引用的正是前面划分出来的那个子表达式。当 (\w+) 匹配到单词 of 的时候，\1 也匹配单词 of；当 (\w+) 匹配到单词 and 的时候，\1 也匹配单词 and。&lt;br&gt;为了方便理解，可以把回溯引用想象成变量。&lt;/p&gt;
&lt;h2 id=&quot;前后查找&quot;&gt;&lt;a href=&quot;#前后查找&quot; class=&quot;headerlink&quot; title=&quot;前后查找&quot;&gt;&lt;/a&gt;前后查找&lt;/h2&gt;&lt;p&gt;前后查找包含的匹配本身并不返回，而是用于确定正确的匹配位置，它并不是匹配结果的一部分。&lt;/p&gt;
&lt;h3 id=&quot;向前查找&quot;&gt;&lt;a href=&quot;#向前查找&quot; class=&quot;headerlink&quot; title=&quot;向前查找&quot;&gt;&lt;/a&gt;向前查找&lt;/h3&gt;&lt;p&gt;从语法上看，一个向前查找模式其实就是一个以 ?= 开头的子表达式，需要匹配的文本跟在 = 后面。&lt;/p&gt;
&lt;p&gt;正则：&lt;code&gt;.+(?=:)&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;&lt;code&gt;http&lt;/code&gt;://www.forta.com/&lt;br&gt;&lt;code&gt;https&lt;/code&gt;://mail.forta.com/&lt;br&gt;&lt;code&gt;ftp&lt;/code&gt;://ftp.forta.com/&lt;/p&gt;
&lt;p&gt;与子表达的对比。&lt;br&gt;正则：&lt;code&gt;.+(:)&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;&lt;code&gt;http:&lt;/code&gt;//www.forta.com/&lt;br&gt;&lt;code&gt;https:&lt;/code&gt;//mail.forta.com/&lt;br&gt;&lt;code&gt;ftp:&lt;/code&gt;//ftp.forta.com/&lt;/p&gt;
&lt;h3 id=&quot;向后查找&quot;&gt;&lt;a href=&quot;#向后查找&quot; class=&quot;headerlink&quot; title=&quot;向后查找&quot;&gt;&lt;/a&gt;向后查找&lt;/h3&gt;&lt;p&gt;向后查找，以 ?&amp;lt;= 开头的子表达式。&lt;br&gt;正则： &lt;code&gt;(?=\$)[0-9.]+&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;ABC01: $&lt;code&gt;23.45&lt;/code&gt;&lt;br&gt;Total items found: 4&lt;/p&gt;
&lt;h3 id=&quot;对前后查找取非&quot;&gt;&lt;a href=&quot;#对前后查找取非&quot; class=&quot;headerlink&quot; title=&quot;对前后查找取非&quot;&gt;&lt;/a&gt;对前后查找取非&lt;/h3&gt;&lt;p&gt;负向前查找讲向前查找不与给定模式相匹配的文本，负向后查找将向后查找不与给定模式相匹配的文本。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(?=)&lt;/td&gt;
&lt;td&gt;正向前查找&lt;/td&gt;
&lt;td&gt;\d+(?= dollars) matches 100 in “100 dollars”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?!)&lt;/td&gt;
&lt;td&gt;负向前查找&lt;/td&gt;
&lt;td&gt;d+(?! dollars) matches 100 if it is NOT followed by the word “dollars”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?&amp;lt;=)&lt;/td&gt;
&lt;td&gt;正向后查找&lt;/td&gt;
&lt;td&gt;(?&amp;lt;=lucky )\d matches 7 in “lucky 7”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?&amp;lt;!)&lt;/td&gt;
&lt;td&gt;负向后查找&lt;/td&gt;
&lt;td&gt;(?&amp;lt;!furious )\d matches 7 in “lucky 7”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;嵌入条件&quot;&gt;&lt;a href=&quot;#嵌入条件&quot; class=&quot;headerlink&quot; title=&quot;嵌入条件&quot;&gt;&lt;/a&gt;嵌入条件&lt;/h2&gt;&lt;p&gt;(?(backreference)true-regex)：? 表示这是一个条件，括号里的 backreference 是一个回溯引用， backreference 存在时会执行true-regex。&lt;br&gt;(?(backreference)true-regex|false-regex)： backreference 不存在时会执行 false-regex。&lt;/p&gt;
&lt;h3 id=&quot;回溯引用条件&quot;&gt;&lt;a href=&quot;#回溯引用条件&quot; class=&quot;headerlink&quot; title=&quot;回溯引用条件&quot;&gt;&lt;/a&gt;回溯引用条件&lt;/h3&gt;&lt;p&gt;正则：&lt;code&gt;(\()?\d{3}(?(1)\)|-)\d{3}-\d{4}&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;&lt;code&gt;123-456-7890&lt;/code&gt;&lt;br&gt;&lt;code&gt;(123)456-7890&lt;/code&gt;&lt;br&gt;(123)-456-7890&lt;br&gt;(123-456-7890&lt;br&gt;1234567890&lt;br&gt;123 456 7890&lt;/p&gt;
&lt;p&gt;(()? 匹配一个可选的左括号,(?(1))|-) 将根据条件是否满足而去匹配 ) 或者 -。如果 (1) 存在，) 必须被匹配，否则 - 必须被匹配。&lt;/p&gt;
&lt;h3 id=&quot;前后查找条件&quot;&gt;&lt;a href=&quot;#前后查找条件&quot; class=&quot;headerlink&quot; title=&quot;前后查找条件&quot;&gt;&lt;/a&gt;前后查找条件&lt;/h3&gt;&lt;p&gt;前后查找条件的语法与回溯引用条件的语法大同小异，只需把回溯引用替换为一个完整的前后查找表达式就行了。&lt;br&gt;正则：&lt;code&gt;\d{5}(?(?=-)-\d{4})&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;11111&lt;br&gt;22222&lt;br&gt;33333-&lt;br&gt;44444-4444&lt;/p&gt;
&lt;p&gt;(?(?=-)-\d{4}) 使用了 ?=- 来匹配（但不消费）一个连字符，如果条件得到满足（那个连字符存在），-\d{4} 将匹配那个连字符和随后的 4 位数字。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;匹配单个字符&quot;&gt;&lt;a href=&quot;#匹配单个字符&quot; class=&quot;headerlink&quot; title=&quot;匹配单个字符&quot;&gt;&lt;/a&gt;匹配单个字符&lt;/h2&gt;&lt;h3 id=&quot;匹配纯文本&quot;&gt;&lt;a href=&quot;#匹配纯文本&quot; class=&quot;headerlink&quot; title=&quot;匹配纯文本&quot;&gt;&lt;/a&gt;匹配纯文本&lt;/h3&gt;&lt;p&gt;正则：&lt;code&gt;Ben&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;Hello, my name is &lt;code&gt;Ben&lt;/code&gt;. Please visit my website at &lt;a href=&quot;http://www.forta.com/&quot;&gt;http://www.forta.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;匹配任意字符&quot;&gt;&lt;a href=&quot;#匹配任意字符&quot; class=&quot;headerlink&quot; title=&quot;匹配任意字符&quot;&gt;&lt;/a&gt;匹配任意字符&lt;/h3&gt;&lt;p&gt;. 匹配任意单个字符。在绝大多数的正则表达式实现里，. 只能匹配除换行符以外的任何单个字符。&lt;br&gt;正则：&lt;code&gt;sales.&lt;/code&gt;&lt;br&gt;&amp;gt;&lt;br&gt;&lt;code&gt;sales1&lt;/code&gt;.xls&lt;br&gt;orders3.xls&lt;br&gt;&lt;code&gt;sales2&lt;/code&gt;.xls&lt;br&gt;&lt;code&gt;sales3&lt;/code&gt;.xls&lt;br&gt;apac1.xls&lt;br&gt;europe2.xls&lt;br&gt;na1.xls&lt;br&gt;na2.xls&lt;br&gt;sa1.xls&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://kaywu.xyz/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Rails 多台服务器上 js 不一致的问题</title>
    <link href="http://kaywu.xyz/2017/05/14/rails-js-compress/"/>
    <id>http://kaywu.xyz/2017/05/14/rails-js-compress/</id>
    <published>2017-05-14T10:00:27.000Z</published>
    <updated>2017-07-18T14:36:36.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;发现问题&quot;&gt;&lt;a href=&quot;#发现问题&quot; class=&quot;headerlink&quot; title=&quot;发现问题&quot;&gt;&lt;/a&gt;发现问题&lt;/h3&gt;&lt;p&gt;周二发布正式的时候，发生了匪夷所思的事情。&lt;br&gt;打开发布的网页，有一定的几率操作会没有反应。但在测试的时候却从没有这个问题发生。通过调试工具查看网页，发现一半的网页会加载 application-b1a 开头的文件，而另一半会加载 application-745 开头的文件。加载 applicaton-745 时会报 404，使得操作没有反应。&lt;/p&gt;
&lt;p&gt;这里简单地说下发布的情况。该服务会发布到 A、B 两台服务器上，nginx 接收请求并转发到 A、B 上的实例。&lt;br&gt;查看正式服务器上的文件发现，A 上存在 application-b1a 文件，B 上存在 application-745 文件。看来 nginx 会查找 服务器 A 上的文件，由于找不到 application-745 而返回 404。先把 B 上的 applicaiton-b1a 复制到 A，临时修复这个问题。&lt;/p&gt;
&lt;h3 id=&quot;排查原因&quot;&gt;&lt;a href=&quot;#排查原因&quot; class=&quot;headerlink&quot; title=&quot;排查原因&quot;&gt;&lt;/a&gt;排查原因&lt;/h3&gt;&lt;p&gt;为什么两个服务器上生成的 js 文件名会不一致？我们先简单地回顾下 Asset Pipeline 生成 js 的过程。正式环境上， Asset Pipeline 会预编译文件，生成类似于 &lt;code&gt;application-908e25f4bf641868d8683022a5b62f54.js&lt;/code&gt; 的文件。其中 908e 这串表示摘要，是根据文件的内容生成的 MD5，当 js 文件发生改变时生成的摘要也会发生变化。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 引用 js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%= javascript_include_tag &quot;application&quot; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 生成的 html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&quot;/assets/application-908e25f4bf641868d8683022a5b62f54.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;换句话说，若 js 内容一样，生成的摘要也应该是一样的。不应该啊！两个服务器部署的代码应该是一致的。为了保险起见，我还特定查看了相关文件的 MD5 值，完全相同。&lt;/p&gt;
&lt;p&gt;输入是相同的，而产生的结果却不一样，问题应该出在处理步骤上。于是我查看了正式环境的配置，发现了以下这条。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;config.assets.js_compressor = &lt;span class=&quot;symbol&quot;&gt;:uglifier&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;uglifier 是用 ruby 封装 UglifyJS 的 gem，而 UglifyJS 是依赖 node.js 对 js 进行压缩的。查看了下两台服务器的 node 版本，A 是 0.10，B 是 6.10。问题的原因终于找到了。node 的版本不一致，导致其压缩的结果不一样，使得生成的最终文件也不相同。&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;先在 A 上升级了 node 版本，使得 A、B 两台服务器的 node 版本一致。然后删除 &lt;code&gt;tmp/cache/assets/sprockets&lt;/code&gt; 下的缓存，再执行 &lt;code&gt;RAILS_ENV=production bin/rake assets:precompile&lt;/code&gt;，最后重新发布，使最新生成的结果能被实例加载。&lt;br&gt;注意这里必须先删除缓存，不然执行 precompile 时不会生成最新的结果。&lt;/p&gt;
&lt;h3 id=&quot;反思&quot;&gt;&lt;a href=&quot;#反思&quot; class=&quot;headerlink&quot; title=&quot;反思&quot;&gt;&lt;/a&gt;反思&lt;/h3&gt;&lt;p&gt;为什么这个问题会突然出现呢？原来是 B 上的 node 版本由于其他应用的需求进行了升级，使得 A、B 两台版本不一致了。&lt;br&gt;这种一个馒头引发的血案防不胜防，可见应用之间依赖的隔离是多么重要。联想到近几年类似 docker 的解决方案大受欢迎也就不足为怪了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Asset Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;发现问题&quot;&gt;&lt;a href=&quot;#发现问题&quot; class=&quot;headerlink&quot; title=&quot;发现问题&quot;&gt;&lt;/a&gt;发现问题&lt;/h3&gt;&lt;p&gt;周二发布正式的时候，发生了匪夷所思的事情。&lt;br&gt;打开发布的网页，有一定的几率操作会没有反应。但在测试的时候却从没有这个问题发生。通过调试工具查看网页，发现一半的网页会加载 application-b1a 开头的文件，而另一半会加载 application-745 开头的文件。加载 applicaton-745 时会报 404，使得操作没有反应。&lt;/p&gt;
&lt;p&gt;这里简单地说下发布的情况。该服务会发布到 A、B 两台服务器上，nginx 接收请求并转发到 A、B 上的实例。&lt;br&gt;查看正式服务器上的文件发现，A 上存在 application-b1a 文件，B 上存在 application-745 文件。看来 nginx 会查找 服务器 A 上的文件，由于找不到 application-745 而返回 404。先把 B 上的 applicaiton-b1a 复制到 A，临时修复这个问题。&lt;/p&gt;
&lt;h3 id=&quot;排查原因&quot;&gt;&lt;a href=&quot;#排查原因&quot; class=&quot;headerlink&quot; title=&quot;排查原因&quot;&gt;&lt;/a&gt;排查原因&lt;/h3&gt;&lt;p&gt;为什么两个服务器上生成的 js 文件名会不一致？我们先简单地回顾下 Asset Pipeline 生成 js 的过程。正式环境上， Asset Pipeline 会预编译文件，生成类似于 &lt;code&gt;application-908e25f4bf641868d8683022a5b62f54.js&lt;/code&gt; 的文件。其中 908e 这串表示摘要，是根据文件的内容生成的 MD5，当 js 文件发生改变时生成的摘要也会发生变化。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 引用 js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%= javascript_include_tag &quot;application&quot; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 生成的 html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&quot;/assets/application-908e25f4bf641868d8683022a5b62f54.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>Rails 如何在开发模式下重新加载源代码</title>
    <link href="http://kaywu.xyz/2017/05/01/rails-dev-reload/"/>
    <id>http://kaywu.xyz/2017/05/01/rails-dev-reload/</id>
    <published>2017-05-01T10:04:50.000Z</published>
    <updated>2017-07-18T14:34:25.000Z</updated>
    
    <content type="html">&lt;p&gt;在 Rails development 环境下，若更改了部分代码，只需要重新发起请求，就能看到最新代码的结果，不需要重启服务器。&lt;br&gt;下文简述 Rails 是如何做到这点的。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;config/development.rb&lt;/code&gt;，也就是 development 的环境配置文件，我们可以看到不同于其他环境的一行：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# In the development environment your application&#39;s code is reloaded on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# every request.  This slows down response time but is perfect for development&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# since you don&#39;t have to restart the webserver when you make code changes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.cache_classes = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正如注释所说的，它会使得 Rails 在每次接收请求时都重新加载源代码。&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;p&gt;我们先从 Rails 的初始化说起，以 Rails 4.2.6 为例。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rails/application/default_middleware_stack.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;build_stack&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; config.cache_classes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        middleware.use &lt;span class=&quot;constant&quot;&gt;::ActionDispatch::Reloader&lt;/span&gt;, lambda &amp;#123; reload_dependencies? &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reload_dependencies?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      config.reload_classes_only_on_change != &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; || app.reloaders.map(&amp;amp;&lt;span class=&quot;symbol&quot;&gt;:updated?&lt;/span&gt;).any?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 config.cache_classses 为 true 时，middleware 会增加 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt;，而这正是重新加载源代码的关键。&lt;br&gt;ps： middleware 可以通过 &lt;code&gt;rake middleware&lt;/code&gt; 来查看。&lt;/p&gt;
&lt;h3 id=&quot;处理请求&quot;&gt;&lt;a href=&quot;#处理请求&quot; class=&quot;headerlink&quot; title=&quot;处理请求&quot;&gt;&lt;/a&gt;处理请求&lt;/h3&gt;&lt;p&gt;当服务器接收到请求时，中间件 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt; 使用回调 prepare、cleanup 来实现重载源代码。其中 prepare 在处理请求前被调用，cleanup 在处理请求后被调用。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ActionDispatch::Reloader&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(app, condition=&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@app&lt;/span&gt; = app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@condition&lt;/span&gt; = condition || lambda &amp;#123; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@validated&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(env)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@validated&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;@condition&lt;/span&gt;.call&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prepare!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response = &lt;span class=&quot;variable&quot;&gt;@app&lt;/span&gt;.call(env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;constant&quot;&gt;::Rack::BodyProxy&lt;/span&gt;.new(response[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]) &amp;#123; cleanup! &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cleanup!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepare!&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#:nodoc:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run_callbacks &lt;span class=&quot;symbol&quot;&gt;:prepare&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; validated?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanup!&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#:nodoc:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run_callbacks &lt;span class=&quot;symbol&quot;&gt;:cleanup&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; validated?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;ensure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@validated&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;validated?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@validated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当 @validated 为 true 时会执行 prepare、cleanup 等回调。那么 @validated 的值是怎么得到的？&lt;br&gt;结合初始化的代码我们发现，@condition 其实就是创建 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt; 时的参数 &lt;code&gt;lambda { reload_dependencies? }&lt;/code&gt;。而 reload_dependencies? 具体代码如下。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reload_dependencies?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      config.reload_classes_only_on_change != &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; || app.reloaders.map(&amp;amp;&lt;span class=&quot;symbol&quot;&gt;:updated?&lt;/span&gt;).any?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过以下几种情况来分析&lt;br&gt;若 config.reload_clases_only_on_change 为 false，会执行回调。&lt;br&gt;若 config.reload_clases_only_on_change 为 true 且代码发生了变动（任一 reloader 调用 updated? 返回 true），会执行回调。&lt;br&gt;若 config.reload_clases_only_on_change 为 true 且代码未发生变动，不会执行回调。&lt;/p&gt;
&lt;h3 id=&quot;回调&quot;&gt;&lt;a href=&quot;#回调&quot; class=&quot;headerlink&quot; title=&quot;回调&quot;&gt;&lt;/a&gt;回调&lt;/h3&gt;&lt;p&gt;弄清楚了回调调用的时机，我们来继续研究回调的内容是什么。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rails::Application::Finisher&lt;/code&gt; 负责结束 Rails 的初始化，它会给 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt; 增加回调。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rails/application/finisher.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initializer &lt;span class=&quot;symbol&quot;&gt;:set_clear_dependencies_hook&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:all&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  callback = lambda &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;ActiveSupport::DescendantsTracker&lt;/span&gt;.clear&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;ActiveSupport::Dependencies&lt;/span&gt;.clear&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; config.reload_classes_only_on_change&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reloader = config.file_watcher.new(*watchable_args, &amp;amp;callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.reloaders &amp;lt;&amp;lt; reloader&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Prepend this callback to have autoloaded constants cleared before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# any other possible reloading, in case they need to autoload fresh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# constants.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;ActionDispatch::Reloader&lt;/span&gt;.to_prepare(&lt;span class=&quot;symbol&quot;&gt;prepend:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# In addition to changes detected by the file watcher, if routes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# or i18n have been updated we also need to clear constants,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# that&#39;s why we run #execute rather than #execute_if_updated, this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# callback has to clear autoloaded constants after any update.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      reloader.execute&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;ActionDispatch::Reloader&lt;/span&gt;.to_cleanup(&amp;amp;callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 config.reload_clases_only_on_change 为 true，会向 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt; 的 prepare 添加回调，而 false 时会向 cleanup 添加回调。&lt;br&gt;该回调会清理所有的依赖，更确切地说，使用内置的 remove_const 清除所有加载的常量。&lt;br&gt;由于所有常量都被移除，&lt;code&gt;ActiveSupport::Dependencies&lt;/code&gt; 使用 const_missing 并再次加载相关类，从而使得修改后的代码被加载。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;当 config.cache_class 为 false 时 middleware 会增加中间件 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当 config.reload_clases_only_on_change 为 true 时，&lt;code&gt;Rails::Application::Finisher&lt;/code&gt; 会在 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt; 增加 &lt;code&gt;prepare&lt;/code&gt; 的回调。&lt;br&gt;请求处理前 Reloader 会根据代码是否更新来执行 &lt;code&gt;prepare&lt;/code&gt; 回调，执行回调后会清理所有的依赖，&lt;code&gt;ActiveSupport::Dependencies&lt;/code&gt; 使用 const_missing 并再次加载相关类，从而使得修改后的代码被加载。&lt;/p&gt;
&lt;p&gt;当 config.reload_clases_only_on_change 为 false 时， &lt;code&gt;Rails::Application::Finisher&lt;/code&gt; 会在 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt; 增加 &lt;code&gt;cleanup&lt;/code&gt; 的回调。Reloader 会在每次请求处理后执行回调清理所有的依赖。其他步骤类似。&lt;/p&gt;
&lt;p&gt;关于更详细的步骤说明可以参考 &lt;a href=&quot;http://crypt.codemancers.com/posts/2013-10-03-rails-reloading-in-dev-mode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How rails reloads your source code in development mode?
&lt;/a&gt;，关于 Rails 的 autoload 机制可以参考 &lt;a href=&quot;http://guides.rubyonrails.org/autoloading_and_reloading_constants.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Autoloading and Reloading Constants&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://crypt.codemancers.com/posts/2013-10-03-rails-reloading-in-dev-mode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How rails reloads your source code in development mode?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/autoloading_and_reloading_constants.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Autoloading and Reloading Constants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在 Rails development 环境下，若更改了部分代码，只需要重新发起请求，就能看到最新代码的结果，不需要重启服务器。&lt;br&gt;下文简述 Rails 是如何做到这点的。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;config/development.rb&lt;/code&gt;，也就是 development 的环境配置文件，我们可以看到不同于其他环境的一行：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# In the development environment your application&#39;s code is reloaded on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# every request.  This slows down response time but is perfect for development&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# since you don&#39;t have to restart the webserver when you make code changes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.cache_classes = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正如注释所说的，它会使得 Rails 在每次接收请求时都重新加载源代码。&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;p&gt;我们先从 Rails 的初始化说起，以 Rails 4.2.6 为例。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rails/application/default_middleware_stack.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;build_stack&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; config.cache_classes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        middleware.use &lt;span class=&quot;constant&quot;&gt;::ActionDispatch::Reloader&lt;/span&gt;, lambda &amp;#123; reload_dependencies? &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reload_dependencies?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      config.reload_classes_only_on_change != &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; || app.reloaders.map(&amp;amp;&lt;span class=&quot;symbol&quot;&gt;:updated?&lt;/span&gt;).any?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 config.cache_classses 为 true 时，middleware 会增加 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt;，而这正是重新加载源代码的关键。&lt;br&gt;ps： middleware 可以通过 &lt;code&gt;rake middleware&lt;/code&gt; 来查看。&lt;/p&gt;
&lt;h3 id=&quot;处理请求&quot;&gt;&lt;a href=&quot;#处理请求&quot; class=&quot;headerlink&quot; title=&quot;处理请求&quot;&gt;&lt;/a&gt;处理请求&lt;/h3&gt;&lt;p&gt;当服务器接收到请求时，中间件 &lt;code&gt;ActionDispatch::Reloader&lt;/code&gt; 使用回调 prepare、cleanup 来实现重载源代码。其中 prepare 在处理请求前被调用，cleanup 在处理请求后被调用。&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL EXPLAIN 解读</title>
    <link href="http://kaywu.xyz/2017/03/26/mysql-explain/"/>
    <id>http://kaywu.xyz/2017/03/26/mysql-explain/</id>
    <published>2017-03-26T09:55:35.000Z</published>
    <updated>2017-07-18T14:31:55.000Z</updated>
    
    <content type="html">&lt;p&gt;EXPLAIN 解释了 MySQL 是如何执行 SQL 语句的。使用的方法很简单，在 SQL 语句前加上 &lt;code&gt;EXPLAIN&lt;/code&gt; 关键字就可以。&lt;br&gt;下面是一个简单的例子，测试数据在文章末尾。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &amp;#20363; 1&amp;#10;mysql&amp;#62; EXPLAIN SELECT name FROM users WHERE id = 1\G&amp;#10;*************************** 1. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: users&amp;#10;         type: const&amp;#10;possible_keys: PRIMARY&amp;#10;          key: PRIMARY&amp;#10;      key_len: 4&amp;#10;          ref: const&amp;#10;         rows: 1&amp;#10;        Extra: NULL&amp;#10;1 row in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;EXPLAIN 列的解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id：SELECT 标识符，下面具体分析&lt;/li&gt;
&lt;li&gt;select_type: SELECT 类型，下面会具体分析&lt;/li&gt;
&lt;li&gt;table: 查询所使用的表&lt;/li&gt;
&lt;li&gt;type: JOIN 的类型，下面会具体分析&lt;/li&gt;
&lt;li&gt;possible_keys: 可能使用的索引，但不一定会真正使用&lt;/li&gt;
&lt;li&gt;key: 真正使用的索引&lt;/li&gt;
&lt;li&gt;key_len: 所使用的索引长度&lt;/li&gt;
&lt;li&gt;ref: 与索引比较的列&lt;/li&gt;
&lt;li&gt;rows: 预估需要扫描的行数&lt;/li&gt;
&lt;li&gt;Extra: 额外信息&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;id&quot;&gt;&lt;a href=&quot;#id&quot; class=&quot;headerlink&quot; title=&quot;id&quot;&gt;&lt;/a&gt;id&lt;/h3&gt;&lt;p&gt;个人理解表示了 SELECT 的执行顺序。id 大的优先执行，id 相同的从上往下执行。&lt;/p&gt;
&lt;h3 id=&quot;select-type&quot;&gt;&lt;a href=&quot;#select-type&quot; class=&quot;headerlink&quot; title=&quot;select_type&quot;&gt;&lt;/a&gt;select_type&lt;/h3&gt;&lt;p&gt;select_type 表示查询的类型，具体种类见官方图表。&lt;br&gt;&lt;img src=&quot;/img/select_type.png&quot; alt=&quot;select_type.png-来自官方文档&quot;&gt;&lt;br&gt;SIMPLE 是最常见的种类，表示它未使用 UNION 及子查询。例 1 的查询就属于 SIMPLE。&lt;/p&gt;
&lt;p&gt;当使用了关键字 UNION，查询的类型就会发生变化。&lt;br&gt;&lt;img src=&quot;/img/select_union.png&quot; alt=&quot;select_union.png-41.3kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这个查询中，我们可以看到 3 种类型的查询。 PRIMARY 表示最外层的查询，也就是 UNION 之前的 &lt;code&gt;SELECT name FROM users WHERE id = 1&lt;/code&gt;。UNION 之后的 &lt;code&gt;SELECT name FROM users WHERE id = 2&lt;/code&gt; 归为 UNION 类型。最后 UNION RESULT 将两次查询的结果归总。&lt;/p&gt;
&lt;p&gt;下面是其他查询类型的例子。&lt;/p&gt;
&lt;h4 id=&quot;PRIMARY-amp-SUBQUERY&quot;&gt;&lt;a href=&quot;#PRIMARY-amp-SUBQUERY&quot; class=&quot;headerlink&quot; title=&quot;PRIMARY &amp;amp; SUBQUERY&quot;&gt;&lt;/a&gt;PRIMARY &amp;amp; SUBQUERY&lt;/h4&gt;&lt;p&gt;PRIMARY 为最外层的查询，而 SUBQUERY 则指子查询。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXPLAIN SELECT * FROM users WHERE id = (SELECT user_id FROM orders WHERE id = 3);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;PRIMARY-amp-DEPENDENT-SUBQUERY&quot;&gt;&lt;a href=&quot;#PRIMARY-amp-DEPENDENT-SUBQUERY&quot; class=&quot;headerlink&quot; title=&quot;PRIMARY &amp;amp; DEPENDENT SUBQUERY&quot;&gt;&lt;/a&gt;PRIMARY &amp;amp; DEPENDENT SUBQUERY&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXPLAIN SELECT * FROM users WHERE EXISTS (SELECT user_id FROM orders WHERE orders.id = 3 and orders.user_id = users.id);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;MATERIALIZED&quot;&gt;&lt;a href=&quot;#MATERIALIZED&quot; class=&quot;headerlink&quot; title=&quot;MATERIALIZED&quot;&gt;&lt;/a&gt;MATERIALIZED&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXPLAIN SELECT DISTINCT user_id FROM orders WHERE id IN (SELECT DISTINCT order_id FROM order_items WHERE product_name = &amp;#39;p1&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;DERIVED&quot;&gt;&lt;a href=&quot;#DERIVED&quot; class=&quot;headerlink&quot; title=&quot;DERIVED&quot;&gt;&lt;/a&gt;DERIVED&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXPLAIN SELECT * FROM (SELECT * FROM orders WHERE id = 3) o;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;type&quot;&gt;&lt;a href=&quot;#type&quot; class=&quot;headerlink&quot; title=&quot;type&quot;&gt;&lt;/a&gt;type&lt;/h3&gt;&lt;p&gt;type 表示 JOIN 的类型，是查询是否高效的重要依据。&lt;br&gt;效率从高到低排列为 system &amp;gt; const &amp;gt; eq_ref &amp;gt; ref &amp;gt; range &amp;gt; index &amp;gt; all。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;system: 表中只有一条数据，const 连接的特殊类型。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;const: 主键或唯一索引的等值比较，由于表中至多有一条符合的数据，所以速度很快。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; EXPLAIN SELECT * FROM users WHERE id = 2\G&amp;#10;*************************** 1. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: users&amp;#10;         type: const&amp;#10;possible_keys: PRIMARY&amp;#10;          key: PRIMARY&amp;#10;      key_len: 4&amp;#10;          ref: const&amp;#10;         rows: 1&amp;#10;        Extra: NULL&amp;#10;1 row in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;eq_ref: 上表的每一个行至多会匹配到该表的一行，是除 system 和 const 之外最高效的 join type。当索引为 PRIMARY KEY 或 UNIQUE NOT NULL 且被全部使用时会用到。常见于索引列的等值比较。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; EXPLAIN SELECT * FROM users, orders WHERE orders.user_id = users.id\G&amp;#10;*************************** 1. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: orders&amp;#10;         type: index&amp;#10;possible_keys: index_orders_on_user_id_and_price&amp;#10;          key: index_orders_on_user_id_and_price&amp;#10;      key_len: 8&amp;#10;          ref: NULL&amp;#10;         rows: 4&amp;#10;        Extra: Using index&amp;#10;*************************** 2. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: users&amp;#10;         type: eq_ref&amp;#10;possible_keys: PRIMARY&amp;#10;          key: PRIMARY&amp;#10;      key_len: 4&amp;#10;          ref: explain_test.orders.user_id&amp;#10;         rows: 1&amp;#10;        Extra: NULL&amp;#10;2 rows in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ref: 如果 join 不能根据键值只匹配一行时则会使用该 join type。常见于不是 UNIQUE 或 PRIMARY KEY的索引等值比较，或者是最左前缀规则的索引查询。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; EXPLAIN SELECT orders.id FROM orders JOIN users ON orders.user_id = users.id WHERE users.name = &amp;#39;Amy&amp;#39;\G&amp;#10;*************************** 1. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: users&amp;#10;         type: ref&amp;#10;possible_keys: PRIMARY,index_users_on_names&amp;#10;          key: index_users_on_names&amp;#10;      key_len: 152&amp;#10;          ref: const&amp;#10;         rows: 1&amp;#10;        Extra: Using where; Using index&amp;#10;*************************** 2. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: orders&amp;#10;         type: ref&amp;#10;possible_keys: index_orders_on_user_id_and_price&amp;#10;          key: index_orders_on_user_id_and_price&amp;#10;      key_len: 4&amp;#10;          ref: explain_test.users.id&amp;#10;         rows: 1&amp;#10;        Extra: Using index&amp;#10;2 rows in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;range: 使用索引进行范围查询，输出的 key 字段表示使用哪个索引，key_len 表示所使用索引中最长的索引长度。注意此类型下 ref 字段为 NULL。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; EXPLAIN SELECT * FROM users WHERE users.id IN (2, 3)\G&amp;#10;*************************** 1. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: users&amp;#10;         type: range&amp;#10;possible_keys: PRIMARY&amp;#10;          key: PRIMARY&amp;#10;      key_len: 4&amp;#10;          ref: NULL&amp;#10;         rows: 2&amp;#10;        Extra: Using where&amp;#10;1 row in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;index: 全索引扫描, index 类型仅仅扫描所有的索引, 而不扫描数据。一般两种情况会出现。&lt;br&gt;一种是出现在所要查询的数据直接在索引树中就可以获取, 此时 Extra 字段会显示 Using index。另一种是全表扫描时按索引的顺序查找数据，此时 Extra 字段不会显示 Using index。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; EXPLAIN SELECT users.name FROM users\G&amp;#10;*************************** 1. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: users&amp;#10;         type: index&amp;#10;possible_keys: NULL&amp;#10;          key: index_users_on_names&amp;#10;      key_len: 152&amp;#10;          ref: NULL&amp;#10;         rows: 10&amp;#10;        Extra: Using index&amp;#10;1 row in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ALL: 全表扫描。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Extra&quot;&gt;&lt;a href=&quot;#Extra&quot; class=&quot;headerlink&quot; title=&quot;Extra&quot;&gt;&lt;/a&gt;Extra&lt;/h3&gt;&lt;p&gt;Extra 字段提供了关于查询的额外信息，种类很多，具体可以看&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain-extra-information&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;。&lt;br&gt;除了上文提到的 Using index，这里再额外说两种。&lt;br&gt;Using filesort 表示 MySQL 需要遍历所有符合条件的行然后按照排序的 key 来使得最终的查询结果是有序的。&lt;br&gt;Using temporary 表示 MySQL 需要创建一个临时表来存储结果，通常发生在查询包含不同列的 GROUP BY 和 ORDER BY 子句。&lt;br&gt;看到这两者时，可以考虑对查询进行优化。&lt;/p&gt;
&lt;h3 id=&quot;使用的测试数据&quot;&gt;&lt;a href=&quot;#使用的测试数据&quot; class=&quot;headerlink&quot; title=&quot;使用的测试数据&quot;&gt;&lt;/a&gt;使用的测试数据&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE `users` (&amp;#10;  `id` int(11) NOT NULL AUTO_INCREMENT,&amp;#10;  `name` varchar(50) NOT NULL,&amp;#10;  PRIMARY KEY (`id`),&amp;#10;  KEY `index_users_on_names` (`name`)&amp;#10;) ENGINE=InnoDB DEFAULT CHARSET=utf8;&amp;#10;&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Amy&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Bob&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Cindy&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Duke&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Kay&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Lucy&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Mike&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Nancy&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Ted&amp;#39;);&amp;#10;INSERT INTO users(name) VALUES (&amp;#39;Van&amp;#39;);&amp;#10;&amp;#10;&amp;#10;CREATE TABLE `orders` (&amp;#10;  `id` int(11) NOT NULL AUTO_INCREMENT,&amp;#10;  `user_id` int(11) NOT NULL,&amp;#10;  `price` decimal(8,2) NOT NULL,&amp;#10;  PRIMARY KEY (`id`),&amp;#10;  KEY `index_orders_on_user_id_and_price` (`user_id`,`price`)&amp;#10;) ENGINE=InnoDB DEFAULT CHARSET=utf8;&amp;#10;INSERT INTO orders(user_id, price) VALUES (1, 80);&amp;#10;INSERT INTO orders(user_id, price) VALUES (1, 100);&amp;#10;INSERT INTO orders(user_id, price) VALUES (2, 90);&amp;#10;INSERT INTO orders(user_id, price) VALUES (2, 120);&amp;#10;&amp;#10;&amp;#10;CREATE TABLE `order_items` (&amp;#10;  `id` int(11) NOT NULL AUTO_INCREMENT,&amp;#10;  `order_id` int(11) NOT NULL,&amp;#10;  `product_name` varchar(50) NOT NULL,&amp;#10;  `quantity` int(11) NOT NULL,&amp;#10;  PRIMARY KEY (`id`),&amp;#10;  KEY `index_order_items_on_order_id` (`order_id`),&amp;#10;  KEY `index_order_items_on_product_name` (`product_name`)&amp;#10;) ENGINE=InnoDB DEFAULT CHARSET=utf8;&amp;#10;INSERT INTO order_items(order_id, product_name, quantity) VALUES (1, &amp;#39;p1&amp;#39;, 1);&amp;#10;INSERT INTO order_items(order_id, product_name, quantity) VALUES (1, &amp;#39;p2&amp;#39;, 2);&amp;#10;INSERT INTO order_items(order_id, product_name, quantity) VALUES (2, &amp;#39;p3&amp;#39;, 1);&amp;#10;INSERT INTO order_items(order_id, product_name, quantity) VALUES (2, &amp;#39;p4&amp;#39;, 1);&amp;#10;INSERT INTO order_items(order_id, product_name, quantity) VALUES (3, &amp;#39;p5&amp;#39;, 3);&amp;#10;INSERT INTO order_items(order_id, product_name, quantity) VALUES (4, &amp;#39;p6&amp;#39;, 2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EXPLAIN Output Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000008131735&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL 性能优化神器 Explain 使用分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnitblog.com/aliyiyi08/archive/2008/09/09/48878.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mysql Explain 详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;EXPLAIN 解释了 MySQL 是如何执行 SQL 语句的。使用的方法很简单，在 SQL 语句前加上 &lt;code&gt;EXPLAIN&lt;/code&gt; 关键字就可以。&lt;br&gt;下面是一个简单的例子，测试数据在文章末尾。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &amp;#20363; 1&amp;#10;mysql&amp;#62; EXPLAIN SELECT name FROM users WHERE id = 1\G&amp;#10;*************************** 1. row ***************************&amp;#10;           id: 1&amp;#10;  select_type: SIMPLE&amp;#10;        table: users&amp;#10;         type: const&amp;#10;possible_keys: PRIMARY&amp;#10;          key: PRIMARY&amp;#10;      key_len: 4&amp;#10;          ref: const&amp;#10;         rows: 1&amp;#10;        Extra: NULL&amp;#10;1 row in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;EXPLAIN 列的解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id：SELECT 标识符，下面具体分析&lt;/li&gt;
&lt;li&gt;select_type: SELECT 类型，下面会具体分析&lt;/li&gt;
&lt;li&gt;table: 查询所使用的表&lt;/li&gt;
&lt;li&gt;type: JOIN 的类型，下面会具体分析&lt;/li&gt;
&lt;li&gt;possible_keys: 可能使用的索引，但不一定会真正使用&lt;/li&gt;
&lt;li&gt;key: 真正使用的索引&lt;/li&gt;
&lt;li&gt;key_len: 所使用的索引长度&lt;/li&gt;
&lt;li&gt;ref: 与索引比较的列&lt;/li&gt;
&lt;li&gt;rows: 预估需要扫描的行数&lt;/li&gt;
&lt;li&gt;Extra: 额外信息&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://kaywu.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Rails Concern 源码研究</title>
    <link href="http://kaywu.xyz/2017/03/19/rails-concern/"/>
    <id>http://kaywu.xyz/2017/03/19/rails-concern/</id>
    <published>2017-03-19T10:07:19.000Z</published>
    <updated>2017-07-18T14:34:46.000Z</updated>
    
    <content type="html">&lt;p&gt;ActiveSupport::Concern 是为了更方便地 include 模块而推出的工具类。&lt;/p&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;首先来看下它的使用方法。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 传统的 Module 引入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.extend &lt;span class=&quot;constant&quot;&gt;ClassMethods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.class_eval &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scope &lt;span class=&quot;symbol&quot;&gt;:disabled&lt;/span&gt;, -&amp;gt; &amp;#123; where(&lt;span class=&quot;symbol&quot;&gt;disabled:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassMethods&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 Concern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend &lt;span class=&quot;constant&quot;&gt;ActiveSupport::Concern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  included &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scope &lt;span class=&quot;symbol&quot;&gt;:disabled&lt;/span&gt;, -&amp;gt; &amp;#123; where(&lt;span class=&quot;symbol&quot;&gt;disabled:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class_methods &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见，通过 included 和 class_method 两个类方法使得 Module 的写法更加清晰。&lt;br&gt;你可能有些疑问，对比传统的引入，使用 Concern 虽然更加清晰了，但没什么巨大的优点。而传统的引入也可以通过将方法分成两个 module，如 InstanceMethods、ClassMethods，来达到同样的效果。&lt;br&gt;在这个简单的例子上，确实如此。但在一些嵌套的 include 上 Concern 的优势就体现出来了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;嵌套的-include&quot;&gt;&lt;a href=&quot;#嵌套的-include&quot; class=&quot;headerlink&quot; title=&quot;嵌套的 include&quot;&gt;&lt;/a&gt;嵌套的 include&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.class_eval &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;method_injected_by_foo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.method_injected_by_foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Host&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# We need to include this dependency for Bar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Bar is the module that Host really needs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要在 Host 中引入 Bar，但由于 Bar 又需要 Foo，导致必须在 Host 中引入 Foo。也就是说，当我们 include module 时也必须把它的依赖同时 include 进来。这将随着依赖关系的复杂而变得艰难。&lt;br&gt;为什么不让 Bar 来负责自己的依赖呢？如以下的代码。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.method_injected_by_foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Host&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Bar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而愿望很美好，实际运行时会报错，让我们来分析下流程。&lt;br&gt;当 Bar include Foo 时， Foo::included 方法被回调，而此时的 base 为 Bar。也就是说，method_injected_by_foo 会被添加到 Bar 上而不是 Host。当 Host include Bar 时，Bar::included 会调用 Host::method_injected_by_foo，而 Host 上没有相关方法，导致报错。&lt;/p&gt;
&lt;p&gt;但是使用 Concern 就可以完美地解决这个问题。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;active_support/concern&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend &lt;span class=&quot;constant&quot;&gt;ActiveSupport::Concern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  included &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;method_injected_by_foo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend &lt;span class=&quot;constant&quot;&gt;ActiveSupport::Concern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  included &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.method_injected_by_foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Host&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# It works, now Bar takes care of its dependencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h3&gt;&lt;p&gt;Concern 的源码很短，不过 40 多行，但涉及到不少元编程的知识，要看明白得花点功夫。&lt;br&gt;复习下基本的知识，A extend B，B 的 extended 会被回调，参数 base 为 B。A include B，B 的 included、append_features 都会被回调，参数 base 为 B。&lt;/p&gt;
&lt;p&gt;接下来，以上文 Concern 代码为例子来说明下实现原理。&lt;br&gt;我们先从 &lt;code&gt;module Foo extend ActiveSupport::Concern&lt;/code&gt; 开始，此时 Concern::extended 会被回调，初始化 Foo 实例变量 @_dependencies。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#:nodoc:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  base.instance_variable_set(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_dependencies&lt;/span&gt;, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后第 5 行调用 included 时，会将 @_included_block 设置为传入的 block。&lt;br&gt;注意这里的 included 是显式调用的，而不是被回调的，参数 base 为 nil。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base = &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;, &amp;amp;block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; base.&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise &lt;span class=&quot;constant&quot;&gt;MultipleIncludedBlocks&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; instance_variable_defined?(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_included_block&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@_included_block&lt;/span&gt; = block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第 13 行 &lt;code&gt;module Bar extend ActiveSupport::Concern&lt;/code&gt; 与 Foo extend Concern 同理。&lt;br&gt;第 14 行 &lt;code&gt;include Foo&lt;/code&gt;，使得 Foo 的 append_features 和 included 被调用。included 由于 base 不为空只是简单地调用 super。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;append_features&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; base.instance_variable_defined?(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_dependencies&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.instance_variable_get(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_dependencies&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; base &amp;lt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@_dependencies&lt;/span&gt;.each &amp;#123; |dep| base.send(&lt;span class=&quot;symbol&quot;&gt;:include&lt;/span&gt;, dep) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.extend const_get(&lt;span class=&quot;symbol&quot;&gt;:ClassMethods&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; const_defined?(&lt;span class=&quot;symbol&quot;&gt;:ClassMethods&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.class_eval(&amp;amp;&lt;span class=&quot;variable&quot;&gt;@_included_block&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; instance_variable_defined?(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_included_block&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;append_features&lt;/code&gt; 是 Concern 实现其 magic 最重要的部分。&lt;br&gt;由于 Bar 初始化了 @_dependencies，&lt;code&gt;base.instance_variable_get(:@_dependencies) &amp;lt;&amp;lt; self&lt;/code&gt; 会被运行，所以 Bar.@_dependencies 就变为了 [Foo]。&lt;br&gt;Bar 调用 included 和 Foo 同理。&lt;/p&gt;
&lt;p&gt;第 22 行，&lt;code&gt;Host include Bar&lt;/code&gt; 使得 Bar 的 append_features 被回调。注意注意，重头戏来了。&lt;br&gt;&lt;code&gt;@_dependencies.each { |dep| base.send(:include, dep) }&lt;/code&gt; 会被执行，通过之前的分析 Bar.@_dependencies 为 [Foo]，所以也就是 &lt;code&gt;base.send(:include, Foo)&lt;/code&gt;，这里的 base 为 Host。Host include Foo 会回调 Foo 的 append_features，此时 Host 会 extend Foo::ClassMethods 和 class_eval(&amp;amp;@_included_block)，从而实现了 Host 在 include Bar 时自动 include Foo。&lt;/p&gt;
&lt;p&gt;最后附上 Concern 的源码。&lt;/p&gt;
&lt;h4 id=&quot;Concern-源码&quot;&gt;&lt;a href=&quot;#Concern-源码&quot; class=&quot;headerlink&quot; title=&quot;Concern 源码&quot;&gt;&lt;/a&gt;Concern 源码&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ActiveSupport&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Concern&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MultipleIncludedBlocks&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;StandardError&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#:nodoc:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Cannot define multiple &#39;included&#39; blocks for a Concern&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#:nodoc:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      base.instance_variable_set(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_dependencies&lt;/span&gt;, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;append_features&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; base.instance_variable_defined?(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_dependencies&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        base.instance_variable_get(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_dependencies&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; base &amp;lt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@_dependencies&lt;/span&gt;.each &amp;#123; |dep| base.send(&lt;span class=&quot;symbol&quot;&gt;:include&lt;/span&gt;, dep) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        base.extend const_get(&lt;span class=&quot;symbol&quot;&gt;:ClassMethods&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; const_defined?(&lt;span class=&quot;symbol&quot;&gt;:ClassMethods&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        base.class_eval(&amp;amp;&lt;span class=&quot;variable&quot;&gt;@_included_block&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; instance_variable_defined?(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_included_block&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base = &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;, &amp;amp;block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; base.&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        raise &lt;span class=&quot;constant&quot;&gt;MultipleIncludedBlocks&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; instance_variable_defined?(&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@_included_block&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@_included_block&lt;/span&gt; = block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;class_methods&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;class_methods_module_definition)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mod = const_defined?(&lt;span class=&quot;symbol&quot;&gt;:ClassMethods&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;) ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        const_get(&lt;span class=&quot;symbol&quot;&gt;:ClassMethods&lt;/span&gt;) &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        const_set(&lt;span class=&quot;symbol&quot;&gt;:ClassMethods&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;Module&lt;/span&gt;.new)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mod.module_eval(&amp;amp;class_methods_module_definition)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveSupport/Concern.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActiveSupport::Concern 源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://elfxp.com/intro-of-concerns-in-rails/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rails 源码赏析之 Concern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;ActiveSupport::Concern 是为了更方便地 include 模块而推出的工具类。&lt;/p&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;首先来看下它的使用方法。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 传统的 Module 引入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.extend &lt;span class=&quot;constant&quot;&gt;ClassMethods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base.class_eval &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scope &lt;span class=&quot;symbol&quot;&gt;:disabled&lt;/span&gt;, -&amp;gt; &amp;#123; where(&lt;span class=&quot;symbol&quot;&gt;disabled:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassMethods&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 Concern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend &lt;span class=&quot;constant&quot;&gt;ActiveSupport::Concern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  included &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scope &lt;span class=&quot;symbol&quot;&gt;:disabled&lt;/span&gt;, -&amp;gt; &amp;#123; where(&lt;span class=&quot;symbol&quot;&gt;disabled:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class_methods &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见，通过 included 和 class_method 两个类方法使得 Module 的写法更加清晰。&lt;br&gt;你可能有些疑问，对比传统的引入，使用 Concern 虽然更加清晰了，但没什么巨大的优点。而传统的引入也可以通过将方法分成两个 module，如 InstanceMethods、ClassMethods，来达到同样的效果。&lt;br&gt;在这个简单的例子上，确实如此。但在一些嵌套的 include 上 Concern 的优势就体现出来了。&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>Ruby 常量查找</title>
    <link href="http://kaywu.xyz/2017/02/19/ruby-constant/"/>
    <id>http://kaywu.xyz/2017/02/19/ruby-constant/</id>
    <published>2017-02-19T09:08:10.000Z</published>
    <updated>2017-07-18T14:33:35.000Z</updated>
    
    <content type="html">&lt;p&gt;对 Ruby 中常量查找只有基础的认识，使用上还是有不少疑问，比如 “::A” 的含义、为什么有时使用 “A::B” 而有时直接用 “B”。&lt;br&gt;花时间查了资料来加深对此的理解。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Record&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts &lt;span class=&quot;string&quot;&gt;&#39;outer&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Music&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Record&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        puts &lt;span class=&quot;string&quot;&gt;&#39;inner&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# inner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;::Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;Music::Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# inner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们从简单的例子出发。在上文的代码中，共存在着两个名为 Record 的 module。一个是在最外层，一个是在 Music 内部。&lt;br&gt;当第 9 行调用 Record.method 时，由于 Music 内的 Record 还未被定义，因此调用的只能是最外层的 Record module。&lt;br&gt;而在第 17 行，当我们重新调用时，却发现调用的已经是内部的 Record 了。&lt;br&gt;可见常量的调用时是有一个先后顺序的，简单的说就是从近及远，先使用近的。虽然我们从直观上很容易理解近的含义，但严格上的顺序是通过 &lt;code&gt;Module.nesting&lt;/code&gt; 得到的。在 Music 内部调用得到 [Record::Music, Record]，可见 Record::Music 确实比 Record 有更高的优先级。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们再来看看 &lt;code&gt;::Record.method&lt;/code&gt;，在使用 &lt;code&gt;::&lt;/code&gt; 之后，调用的就变成了外层的 Record 。&lt;code&gt;::&lt;/code&gt;的作用是从 top level 来查找相关常量，也就是调用最外层的 Record。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Record.method&lt;/code&gt; 和 &lt;code&gt;Music::Record.method&lt;/code&gt; 有什么区别吗？&lt;br&gt;若都能找到相同的对象，这两者是没有区别的，如 16、18 行。&lt;br&gt;但在 top level 中调用 &lt;code&gt;Music::Record.method&lt;/code&gt; 时，需使用完整的路径 &lt;code&gt;Record::Music::Record.method&lt;/code&gt;，不然会报 &lt;code&gt;uninitialized constant&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Module.nesting 只是查找常量的一部分，更完整的常量查找步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向外找，从 Module.nesting 依次查找&lt;/li&gt;
&lt;li&gt;向上找，从自身所在的 class 或 module 的 ancestors 依次查找&lt;/li&gt;
&lt;li&gt;如果 Module.nesting 为空，则从 Object.ancestors 找&lt;br&gt;&lt;a href=&quot;https://cirw.in/blog/constant-lookup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Everything you ever wanted to know about constant lookup in Ruby&lt;/a&gt; 讲得非常详情，就不多述了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cirw.in/blog/constant-lookup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Everything you ever wanted to know about constant lookup in Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5032844/ruby-what-does-prefix-do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ruby: what does :: prefix do?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对 Ruby 中常量查找只有基础的认识，使用上还是有不少疑问，比如 “::A” 的含义、为什么有时使用 “A::B” 而有时直接用 “B”。&lt;br&gt;花时间查了资料来加深对此的理解。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Record&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts &lt;span class=&quot;string&quot;&gt;&#39;outer&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Music&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Record&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        puts &lt;span class=&quot;string&quot;&gt;&#39;inner&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# inner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;::Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;Music::Record&lt;/span&gt;.method &lt;span class=&quot;comment&quot;&gt;# inner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们从简单的例子出发。在上文的代码中，共存在着两个名为 Record 的 module。一个是在最外层，一个是在 Music 内部。&lt;br&gt;当第 9 行调用 Record.method 时，由于 Music 内的 Record 还未被定义，因此调用的只能是最外层的 Record module。&lt;br&gt;而在第 17 行，当我们重新调用时，却发现调用的已经是内部的 Record 了。&lt;br&gt;可见常量的调用时是有一个先后顺序的，简单的说就是从近及远，先使用近的。虽然我们从直观上很容易理解近的含义，但严格上的顺序是通过 &lt;code&gt;Module.nesting&lt;/code&gt; 得到的。在 Music 内部调用得到 [Record::Music, Record]，可见 Record::Music 确实比 Record 有更高的优先级。&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://kaywu.xyz/categories/Ruby/"/>
    
    
  </entry>
  
  <entry>
    <title>mac 上 MySQL system error 32 解决方案</title>
    <link href="http://kaywu.xyz/2017/01/21/mysql-system-error-32/"/>
    <id>http://kaywu.xyz/2017/01/21/mysql-system-error-32/</id>
    <published>2017-01-21T09:53:22.000Z</published>
    <updated>2017-07-18T09:54:14.000Z</updated>
    
    <content type="html">&lt;p&gt;不知为何，在升级了 macOS 系统之后，Rails 连接 MySQL 经常性会报 &lt;code&gt;Mysql2::Error: Lost connection to MySQL server at &amp;#39;sending authentication information&amp;#39;, system error: 32&lt;/code&gt; 的错误。重启 MySQL 就好了，过段时间又会报错，烦不胜烦。下定决心解决下。&lt;/p&gt;
&lt;p&gt;参考了&lt;a href=&quot;http://bugs.mysql.com/bug.php?id=71960&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个帖子&lt;/a&gt;后，大致看到有两种解决方法。一种是调大系统 &lt;code&gt;ulimit -n&lt;/code&gt; 的值，另一种是调小 &lt;code&gt;table_open_cache&lt;/code&gt; 的值。&lt;br&gt;从帖子的回复以及 &lt;code&gt;ulimit -n&lt;/code&gt; 表示系统的文件句柄限制来看，个人认为调节 &lt;code&gt;ulimit -n&lt;/code&gt; 的值是一个治标不治本的方法。本机的值已经 4k+，应该足够了。&lt;/p&gt;
&lt;p&gt;正巧有次出现问题时，MySQL 还连接着。查了下当时的 status，发现 &lt;code&gt;open_tables&lt;/code&gt; 不过几十，而 &lt;code&gt;open_files&lt;/code&gt; 却几千。&lt;br&gt;执行 &lt;code&gt;flush tables&lt;/code&gt; 清除缓存后就可以重新连接了。确实和 &lt;code&gt;table_open_cache&lt;/code&gt; 有一定的关系。&lt;/p&gt;
&lt;p&gt;查看了下 &lt;code&gt;table_open_cache&lt;/code&gt; 的值，默认值是 2000。通过在 &lt;code&gt;my.cnf&lt;/code&gt; 中添加 &lt;code&gt;table_open_cache = 500&lt;/code&gt;，MySQL 这几天就没有闹别扭，希望能一直安稳下去。&lt;/p&gt;
&lt;h4 id=&quot;MySQL-相关命令&quot;&gt;&lt;a href=&quot;#MySQL-相关命令&quot; class=&quot;headerlink&quot; title=&quot;MySQL 相关命令&quot;&gt;&lt;/a&gt;MySQL 相关命令&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;show status like &amp;#39;%open_files%&amp;#39;; # &amp;#26597;&amp;#30475; open_files &amp;#30340;&amp;#20540;&amp;#65292;open_tables &amp;#21516;&amp;#29702;&amp;#10;show variables like &amp;#39;%table_open_cache%&amp;#39;; # &amp;#26597;&amp;#30475; table_open_cache &amp;#30340;&amp;#20540;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.mysql.com/bug.php?id=71960&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bugs.mysql.com/bug.php?id=71960&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;不知为何，在升级了 macOS 系统之后，Rails 连接 MySQL 经常性会报 &lt;code&gt;Mysql2::Error: Lost connection to MySQL server at &amp;#39;sending authentication information
    
    </summary>
    
      <category term="MySQL" scheme="http://kaywu.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>ActiveRecord select vs pluck</title>
    <link href="http://kaywu.xyz/2017/01/15/rails-select-vs-pluck/"/>
    <id>http://kaywu.xyz/2017/01/15/rails-select-vs-pluck/</id>
    <published>2017-01-15T10:09:31.000Z</published>
    <updated>2017-07-18T10:12:26.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;select&lt;/code&gt;、&lt;code&gt;pluck&lt;/code&gt; 都可以从数据库读取指定的字段，但两者存在不小的差别。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Product&lt;/span&gt;.select(&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;).to_a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Product Load (0.5ms)  SELECT `products`.`id` FROM `products`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# [#&amp;lt;Product id: 2&amp;gt;, #&amp;lt;Product id: 1&amp;gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Product&lt;/span&gt;.pluck(&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Product Load (0.4ms)  SELECT `products`.`id` FROM `products`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# [2, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;select&lt;/code&gt; 返回的是仅含有 id 的 Product Model 数组，而 &lt;code&gt;pluck&lt;/code&gt; 返回的是 id 的数组。&lt;br&gt;两者相比较，&lt;code&gt;pluck&lt;/code&gt; 省却了构造 ActiveRecord 的过程，效率更优。我们可以通过 Benchmark.measure 来验证下。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;puts &lt;span class=&quot;constant&quot;&gt;Benchmark&lt;/span&gt;.measure &amp;#123;&lt;span class=&quot;constant&quot;&gt;Product&lt;/span&gt;.select(&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;).to_a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;puts &lt;span class=&quot;constant&quot;&gt;Benchmark&lt;/span&gt;.measure &amp;#123;&lt;span class=&quot;constant&quot;&gt;Product&lt;/span&gt;.pluck(&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;user CPU time&lt;/th&gt;
&lt;th&gt;system CPU time&lt;/th&gt;
&lt;th&gt;sum CPU time&lt;/th&gt;
&lt;th&gt;elapsed real time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td&gt;0.050000&lt;/td&gt;
&lt;td&gt;0.020000&lt;/td&gt;
&lt;td&gt;0.070000&lt;/td&gt;
&lt;td&gt;0.095440&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pluck&lt;/td&gt;
&lt;td&gt;0.000000&lt;/td&gt;
&lt;td&gt;0.000000&lt;/td&gt;
&lt;td&gt;0.000000&lt;/td&gt;
&lt;td&gt;0.001845&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除此之外，两者还有一个区别，即查询时机的不同。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;ProductOrder&lt;/span&gt;.where.&lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt;(&lt;span class=&quot;symbol&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;SubOrder&lt;/span&gt;.where(&lt;span class=&quot;symbol&quot;&gt;sub_order_no:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;001&#39;&lt;/span&gt;).pluck(&lt;span class=&quot;symbol&quot;&gt;:order_id&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# SELECT `orders`.* FROM `orders` WHERE `orders`.`type` IN (&#39;ProductOrder&#39;) AND (`orders`.`id` NOT IN (SELECT `sub_orders`.`order_id` FROM `sub_orders` WHERE `sub_orders`.`sub_order_no` = &#39;001&#39;))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;ProductOrder&lt;/span&gt;.where.&lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt;(&lt;span class=&quot;symbol&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;SubOrder&lt;/span&gt;.where(&lt;span class=&quot;symbol&quot;&gt;sub_order_no:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;001&#39;&lt;/span&gt;).pluck(&lt;span class=&quot;symbol&quot;&gt;:order_id&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# SELECT `sub_orders`.`order_id` FROM `sub_orders` WHERE `sub_orders`.`sub_order_no` = &#39;001&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# SELECT `orders`.* FROM `orders` WHERE `orders`.`type` IN (&#39;ProductOrder&#39;) AND (`orders`.`id` != 3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面这个例子中，通过 &lt;code&gt;pluck&lt;/code&gt; 的调用进行了两次查询，而 &lt;code&gt;select&lt;/code&gt; 只进行了一次查询。可见调用 &lt;code&gt;pluck&lt;/code&gt; 会立即进行数据库查询。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gavinmiller.io/2013/getting-to-know-pluck-and-select/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting to Know Pluck and Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://findnerd.com/list/view/Select-Vs-Pluck-in-Rails/19258/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Select Vs Pluck in Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;select&lt;/code&gt;、&lt;code&gt;pluck&lt;/code&gt; 都可以从数据库读取指定的字段，但两者存在不小的差别。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>Rails ETag 应用</title>
    <link href="http://kaywu.xyz/2017/01/08/rails-etag/"/>
    <id>http://kaywu.xyz/2017/01/08/rails-etag/</id>
    <published>2017-01-08T10:13:24.000Z</published>
    <updated>2017-07-18T14:34:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;使用-ETag-验证缓存&quot;&gt;&lt;a href=&quot;#使用-ETag-验证缓存&quot; class=&quot;headerlink&quot; title=&quot;使用 ETag 验证缓存&quot;&gt;&lt;/a&gt;使用 ETag 验证缓存&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/etag.png&quot; alt=&quot;etag.png-27.9kB&quot;&gt;&lt;br&gt;来源：&lt;a href=&quot;http://mohanraj-nagasamy.github.io/blog/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browser Cache: How ETags Works in Rails 3 and Rails 4&lt;/a&gt;&lt;br&gt;可以把 ETag 看成是响应的 token，客户端在下一个同样的请求中将其发送给服务器。服务器通过 token 来判断资源是否进行修改。若未修改，则返回 &lt;code&gt;304 Not Modified&lt;/code&gt;，使客户端不需再去下载与缓存中已有的完全相同的字节。&lt;/p&gt;
&lt;h2 id=&quot;fresh-when&quot;&gt;&lt;a href=&quot;#fresh-when&quot; class=&quot;headerlink&quot; title=&quot;fresh_when&quot;&gt;&lt;/a&gt;fresh_when&lt;/h2&gt;&lt;p&gt;在 Rails 中，我们可以通过 &lt;code&gt;stale&lt;/code&gt; 或 &lt;code&gt;fresh_when&lt;/code&gt; 方法来显式地使用 ETag。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsController&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;ApplicationController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# This will automatically send back a :not_modified if the request is fresh,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# and will render the default template (product.*) if it&#39;s stale.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;show&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;constant&quot;&gt;Product&lt;/span&gt;.find(params[&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fresh_when &lt;span class=&quot;symbol&quot;&gt;last_modified:&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@product&lt;/span&gt;.published_at.utc, &lt;span class=&quot;symbol&quot;&gt;etag:&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@product&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上例中通过 &lt;code&gt;@product.published_at.utc&lt;/code&gt; 来判断资源是否过期。&lt;/p&gt;
&lt;h2 id=&quot;默认开启的-ETag&quot;&gt;&lt;a href=&quot;#默认开启的-ETag&quot; class=&quot;headerlink&quot; title=&quot;默认开启的 ETag&quot;&gt;&lt;/a&gt;默认开启的 ETag&lt;/h2&gt;&lt;p&gt;最近才发现不用 fresh_when 返回的请求也会自带 ETag，查了下原来 Rails 框架默认使用 Rack::ETag middleware，会自动给无 ETag 的 response 根据其 body 添加上 ETag。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;相关代码如下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# File &#39;lib/rack/etag.rb&#39;, line 24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(env)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  status, headers, body = &lt;span class=&quot;variable&quot;&gt;@app&lt;/span&gt;.call(env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; etag_status?(status) &amp;amp;&amp;amp; etag_body?(body) &amp;amp;&amp;amp; !skip_caching?(headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    original_body = body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    digest, new_body = digest_body(body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body = &lt;span class=&quot;constant&quot;&gt;Rack::BodyProxy&lt;/span&gt;.new(new_body) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      original_body.close &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; original_body.respond_to?(&lt;span class=&quot;symbol&quot;&gt;:close&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers[&lt;span class=&quot;constant&quot;&gt;ETAG_STRING&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;%(W/&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;digest&amp;#125;&lt;/span&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; digest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; headers[&lt;span class=&quot;constant&quot;&gt;CACHE_CONTROL&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; digest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      headers[&lt;span class=&quot;constant&quot;&gt;CACHE_CONTROL&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;@cache_control&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@cache_control&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      headers[&lt;span class=&quot;constant&quot;&gt;CACHE_CONTROL&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;@no_cache_control&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@no_cache_control&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [status, headers, body]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那这种默认的 ETag 和 fresh_when 有什么区别呢？&lt;br&gt;主要区别是判定缓存命中的时机。fresh_when 通过指定的 last_modified 来判定是否命中，若命中则不需要进行渲染。而 默认的 ETag 是根据 response body 生成的，必须先进行模板文件的渲染。也就是说，fresh_when 的效率更高。但同样的，使用 fresh_when 必须准确地指定 last_modified 来判定缓存是否失效。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mohanraj-nagasamy.github.io/blog/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browser Cache: How ETags Works in Rails 3 and Rails 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Caching with Rails: An Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP Caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用-ETag-验证缓存&quot;&gt;&lt;a href=&quot;#使用-ETag-验证缓存&quot; class=&quot;headerlink&quot; title=&quot;使用 ETag 验证缓存&quot;&gt;&lt;/a&gt;使用 ETag 验证缓存&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/etag.png&quot; alt=&quot;etag.png-27.9kB&quot;&gt;&lt;br&gt;来源：&lt;a href=&quot;http://mohanraj-nagasamy.github.io/blog/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4/&quot;&gt;Browser Cache: How ETags Works in Rails 3 and Rails 4&lt;/a&gt;&lt;br&gt;可以把 ETag 看成是响应的 token，客户端在下一个同样的请求中将其发送给服务器。服务器通过 token 来判断资源是否进行修改。若未修改，则返回 &lt;code&gt;304 Not Modified&lt;/code&gt;，使客户端不需再去下载与缓存中已有的完全相同的字节。&lt;/p&gt;
&lt;h2 id=&quot;fresh-when&quot;&gt;&lt;a href=&quot;#fresh-when&quot; class=&quot;headerlink&quot; title=&quot;fresh_when&quot;&gt;&lt;/a&gt;fresh_when&lt;/h2&gt;&lt;p&gt;在 Rails 中，我们可以通过 &lt;code&gt;stale&lt;/code&gt; 或 &lt;code&gt;fresh_when&lt;/code&gt; 方法来显式地使用 ETag。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsController&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;ApplicationController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# This will automatically send back a :not_modified if the request is fresh,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# and will render the default template (product.*) if it&#39;s stale.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;show&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@product&lt;/span&gt; = &lt;span class=&quot;constant&quot;&gt;Product&lt;/span&gt;.find(params[&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fresh_when &lt;span class=&quot;symbol&quot;&gt;last_modified:&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@product&lt;/span&gt;.published_at.utc, &lt;span class=&quot;symbol&quot;&gt;etag:&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@product&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上例中通过 &lt;code&gt;@product.published_at.utc&lt;/code&gt; 来判断资源是否过期。&lt;/p&gt;
&lt;h2 id=&quot;默认开启的-ETag&quot;&gt;&lt;a href=&quot;#默认开启的-ETag&quot; class=&quot;headerlink&quot; title=&quot;默认开启的 ETag&quot;&gt;&lt;/a&gt;默认开启的 ETag&lt;/h2&gt;&lt;p&gt;最近才发现不用 fresh_when 返回的请求也会自带 ETag，查了下原来 Rails 框架默认使用 Rack::ETag middleware，会自动给无 ETag 的 response 根据其 body 添加上 ETag。&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>DOM 事件流</title>
    <link href="http://kaywu.xyz/2016/12/25/dom/"/>
    <id>http://kaywu.xyz/2016/12/25/dom/</id>
    <published>2016-12-25T09:45:15.000Z</published>
    <updated>2017-07-18T09:47:37.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;事件流&quot;&gt;&lt;a href=&quot;#事件流&quot; class=&quot;headerlink&quot; title=&quot;事件流&quot;&gt;&lt;/a&gt;事件流&lt;/h3&gt;&lt;p&gt;“DOM2级事件”规定的事件流包括三个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件捕获阶段&lt;/li&gt;
&lt;li&gt;处于目标阶段&lt;/li&gt;
&lt;li&gt;事件冒泡阶段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。&lt;br&gt;事件冒泡指事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/event_flow.png&quot; alt=&quot;event_flow.png-69.4kB&quot;&gt;&lt;br&gt;来源：&lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/#event-flow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt;&lt;br&gt;以上图的 HTML 页面为例，单击 &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 会按照上图所示顺序触发事件。&lt;/p&gt;
&lt;h3 id=&quot;事件委托&quot;&gt;&lt;a href=&quot;#事件委托&quot; class=&quot;headerlink&quot; title=&quot;事件委托&quot;&gt;&lt;/a&gt;事件委托&lt;/h3&gt;&lt;p&gt;事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;ul&amp;#62;&amp;#10;    &amp;#60;li&amp;#62;TODO 1&amp;#60;/li&amp;#62;&amp;#10;    &amp;#60;li&amp;#62;TODO 2&amp;#60;/li&amp;#62;&amp;#10;    &amp;#60;li&amp;#62;TODO 3&amp;#60;/li&amp;#62;&amp;#10;&amp;#60;/ui&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上面的 HTML 代码为例，按照传统的做法，若要使每个列表项单击后执行相关操作，则需要分别为它们各自添加 click 事件，共 3 个事件。若后续增加了更多的列表项，还需额外为它们添加相应的事件。&lt;br&gt;而使用事件委托，则只需在 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 上添加 click 事件即可。由于所有列表项都是这个元素的子节点，而且它们的事件会冒泡，所以单击事件最终会被 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 的事件处理。与前面的传统做法相比，事件委托占用的内存更小且更为便捷。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JavaScript 高级程序设计 第 13 章&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件流&quot;&gt;&lt;a href=&quot;#事件流&quot; class=&quot;headerlink&quot; title=&quot;事件流&quot;&gt;&lt;/a&gt;事件流&lt;/h3&gt;&lt;p&gt;“DOM2级事件”规定的事件流包括三个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件捕获阶段&lt;/li&gt;
&lt;li&gt;处于目标阶段&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="Front-End" scheme="http://kaywu.xyz/categories/Front-End/"/>
    
    
  </entry>
  
  <entry>
    <title>FactoryGirl 技巧</title>
    <link href="http://kaywu.xyz/2016/12/18/factory-girl/"/>
    <id>http://kaywu.xyz/2016/12/18/factory-girl/</id>
    <published>2016-12-18T09:18:19.000Z</published>
    <updated>2017-07-18T14:35:15.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;简洁地设置-Association&quot;&gt;&lt;a href=&quot;#简洁地设置-Association&quot; class=&quot;headerlink&quot; title=&quot;简洁地设置 Association&quot;&gt;&lt;/a&gt;简洁地设置 Association&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    association &lt;span class=&quot;symbol&quot;&gt;:author&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;factory:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:author&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过以上来设置相关的 association，但如果 association 的名字与它 factory 的名称是相同的，我们就可以省略其 factory 的设置。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    auther&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title &lt;span class=&quot;string&quot;&gt;&quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    approved &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post = create(&lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post.title    &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post.approved &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也能明确指定 parent。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title &lt;span class=&quot;string&quot;&gt;&quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;parent:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  approved &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;使用-Trait&quot;&gt;&lt;a href=&quot;#使用-Trait&quot; class=&quot;headerlink&quot; title=&quot;使用 Trait&quot;&gt;&lt;/a&gt;使用 Trait&lt;/h3&gt;&lt;p&gt;以 Order 为例，它有多个状态。为了设置不同状态的 Order，我们可以通过写多个 Order 的 factory 来完成。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:order_paid&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    customer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state &lt;span class=&quot;symbol&quot;&gt;:paid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    note &lt;span class=&quot;string&quot;&gt;&#39;This is a paid order&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:order_unpaid&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    customer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state &lt;span class=&quot;symbol&quot;&gt;:unpaid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    note &lt;span class=&quot;string&quot;&gt;&#39;This is an unpaid order&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但如果 Order 的属性很多，这两个 factory 大部分都是重复的。可以使用 trait 来简化类似的 factory。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:order&lt;/span&gt; od&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    customer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    note &lt;span class=&quot;string&quot;&gt;&#39;This is a order&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trait &lt;span class=&quot;symbol&quot;&gt;:paid&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state &lt;span class=&quot;symbol&quot;&gt;:paid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trait &lt;span class=&quot;symbol&quot;&gt;:unpaid&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state &lt;span class=&quot;symbol&quot;&gt;:unpaid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要创建不同状态的 Order 时，使用 &lt;code&gt;create :order, :paid&lt;/code&gt; 和 &lt;code&gt;create :order, :unpaid&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;使用-Callback&quot;&gt;&lt;a href=&quot;#使用-Callback&quot; class=&quot;headerlink&quot; title=&quot;使用 Callback&quot;&gt;&lt;/a&gt;使用 Callback&lt;/h3&gt;&lt;p&gt;当 Model 有多个 association 时，而且多个 association 还存在一定的关系时，我们就不能简单地设置 association，这会使 association 的关系遭到破坏。&lt;br&gt;例如一个订单有多个子订单，而每个子订单都有一个物流信息。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Order&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    has_many &lt;span class=&quot;symbol&quot;&gt;:shipments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubOrder&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    has_one &lt;span class=&quot;symbol&quot;&gt;:shipment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Shipment&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    belongs_to &lt;span class=&quot;symbol&quot;&gt;:order&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    belongs_to &lt;span class=&quot;symbol&quot;&gt;:sub_order&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若要创建 Shipment 的 factory，需注意到 order、sub_order 是有一定的关系的。&lt;br&gt;可以通过 FactoryGirl 的 before(:create) 回调来实现。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:shipment&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    before &lt;span class=&quot;symbol&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |shipment|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        order = create &lt;span class=&quot;symbol&quot;&gt;:order&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sub_order = create &lt;span class=&quot;symbol&quot;&gt;:sub_order&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;order:&lt;/span&gt; order&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        shipment.order = order&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        shipment.sub_order = sub_order&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除 before(:create) 外，还有 after(:build)、after(:create)、after(:stub)。&lt;/p&gt;
&lt;h3 id=&quot;设置-Transient-Attributes&quot;&gt;&lt;a href=&quot;#设置-Transient-Attributes&quot; class=&quot;headerlink&quot; title=&quot;设置 Transient Attributes&quot;&gt;&lt;/a&gt;设置 Transient Attributes&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:comment&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    author&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body &lt;span class=&quot;string&quot;&gt;&#39;Post body&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    approved_at &lt;span class=&quot;constant&quot;&gt;Date&lt;/span&gt;.new(&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title &lt;span class=&quot;string&quot;&gt;&#39;New post&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trait &lt;span class=&quot;symbol&quot;&gt;:with_comments&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    after &lt;span class=&quot;symbol&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |post|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      create_list &lt;span class=&quot;symbol&quot;&gt;:comment&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; =&amp;gt; post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;create :post, :with_comments&lt;/code&gt; 会创建带有 3 条 comment 的 post。但若我们只想要有 2 条 comment 呢？通过 transient attributes 可以在 create 时动态地更改 comment 的数量。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;FactoryGirl&lt;/span&gt;.define &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:comment&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    author&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body &lt;span class=&quot;string&quot;&gt;&#39;Post body&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    approved_at &lt;span class=&quot;constant&quot;&gt;Date&lt;/span&gt;.new(&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title &lt;span class=&quot;string&quot;&gt;&#39;New post&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trait &lt;span class=&quot;symbol&quot;&gt;:with_comments&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transient &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        comments_count &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    after &lt;span class=&quot;symbol&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |post, evaluator|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      create_list &lt;span class=&quot;symbol&quot;&gt;:comment&lt;/span&gt;, evaluator.comments_count, &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; =&amp;gt; post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用 &lt;code&gt;create :post, :with_comments, comments_count: 2&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h3 id=&quot;Lazy-Attributes&quot;&gt;&lt;a href=&quot;#Lazy-Attributes&quot; class=&quot;headerlink&quot; title=&quot;Lazy Attributes&quot;&gt;&lt;/a&gt;Lazy Attributes&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:product&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name &lt;span class=&quot;constant&quot;&gt;Faker::Name&lt;/span&gt;.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里使用 Faker 来动态生成名字。但是调用 &lt;code&gt;create :product&lt;/code&gt; 多次后你会发现它们的名字都是相同的。若想在每次创建实例时重新执行 &lt;code&gt;Faker::Name.name&lt;/code&gt;，&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:product&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name &amp;#123; &lt;span class=&quot;constant&quot;&gt;Faker::Name&lt;/span&gt;.name &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样生成实例时都会调用 &lt;code&gt;Faker::Name.name&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://arjanvandergaag.nl/blog/factory_girl_tips.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FactoryGirl Tips and Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FactoryGirl - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简洁地设置-Association&quot;&gt;&lt;a href=&quot;#简洁地设置-Association&quot; class=&quot;headerlink&quot; title=&quot;简洁地设置 Association&quot;&gt;&lt;/a&gt;简洁地设置 Association&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    association &lt;span class=&quot;symbol&quot;&gt;:author&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;factory:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:author&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过以上来设置相关的 association，但如果 association 的名字与它 factory 的名称是相同的，我们就可以省略其 factory 的设置。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    auther&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title &lt;span class=&quot;string&quot;&gt;&quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  factory &lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    approved &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post = create(&lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post.title    &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;approved_post.approved &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也能明确指定 parent。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title &lt;span class=&quot;string&quot;&gt;&quot;A title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factory &lt;span class=&quot;symbol&quot;&gt;:approved_post&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;parent:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  approved &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://kaywu.xyz/categories/Ruby/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript == 和 === 区别</title>
    <link href="http://kaywu.xyz/2016/12/16/js-equal/"/>
    <id>http://kaywu.xyz/2016/12/16/js-equal/</id>
    <published>2016-12-16T09:48:31.000Z</published>
    <updated>2017-07-18T09:49:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;比较&quot;&gt;&lt;a href=&quot;#比较&quot; class=&quot;headerlink&quot; title=&quot;比较&quot;&gt;&lt;/a&gt;比较&lt;/h2&gt;&lt;p&gt;最主要的区别，== 会在比较前进行转化，而 === 比较前不进行转化。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var result1 = (&amp;#39;55&amp;#39; == 55) // true&amp;#65292;&amp;#22240;&amp;#20026;&amp;#36716;&amp;#25442;&amp;#21518;&amp;#30456;&amp;#31561;&amp;#10;var result2 = (&amp;#39;55&amp;#39; === 55) // false&amp;#65292;&amp;#22240;&amp;#20026;&amp;#19981;&amp;#21516;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#31867;&amp;#22411;&amp;#19981;&amp;#30456;&amp;#31561;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;相等&quot;&gt;&lt;a href=&quot;#相等&quot; class=&quot;headerlink&quot; title=&quot;相等 ==&quot;&gt;&lt;/a&gt;相等 ==&lt;/h2&gt;&lt;p&gt;相等操作符会先转换操作数（通常称为强制转型），然后再比较它们的相等性。&lt;/p&gt;
&lt;p&gt;在转换时：&lt;br&gt;如果有一个操作数是布尔值，则在比较相等性之前将其转换为数值—— false 为 0，true 为 1。&lt;br&gt;如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值。&lt;br&gt;如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类型值按照前面的规则进行比较。&lt;/p&gt;
&lt;p&gt;在比较时：&lt;br&gt;null 和 undefined 是相等的。&lt;br&gt;要比较相等性之前，不能将 null 和 undefined 转换成其他任何值。&lt;br&gt;如果有一个操作数是 NaN（两个 NaN也是），则相等操作符返回 false。&lt;br&gt;如果两个操作数都是对象，则比较它们是不是同一个对象。如果指向同一个对象则返回 true。&lt;/p&gt;
&lt;h2 id=&quot;全等&quot;&gt;&lt;a href=&quot;#全等&quot; class=&quot;headerlink&quot; title=&quot;全等 ===&quot;&gt;&lt;/a&gt;全等 ===&lt;/h2&gt;&lt;p&gt;除了在比较之前不转换操作数之外，全等和不全等操作符与相等和不相等操作符没有什么区别。它只在两个操作数未经转换就相等的情况下返回 true。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JavaScript 高级程序设计 P52&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;比较&quot;&gt;&lt;a href=&quot;#比较&quot; class=&quot;headerlink&quot; title=&quot;比较&quot;&gt;&lt;/a&gt;比较&lt;/h2&gt;&lt;p&gt;最主要的区别，== 会在比较前进行转化，而 === 比较前不进行转化。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;
    
    </summary>
    
      <category term="Front-End" scheme="http://kaywu.xyz/categories/Front-End/"/>
    
    
  </entry>
  
  <entry>
    <title>Rails &amp; MySQL 使用 emoji 时 Incorrect string value 解决方法</title>
    <link href="http://kaywu.xyz/2016/12/04/mysql-emoji/"/>
    <id>http://kaywu.xyz/2016/12/04/mysql-emoji/</id>
    <published>2016-12-04T09:50:50.000Z</published>
    <updated>2017-07-18T09:51:48.000Z</updated>
    
    <content type="html">&lt;p&gt;当在 charset 为 utf-8 的 MySQL 中插入 emoji 时，数据库会报错 &lt;code&gt;Incorrect string value&lt;/code&gt;。&lt;br&gt;仔细一想，这很奇怪。因为 emoji 本身可以通过 utf-8 来表示，作为 utf-8 的 MySQL 表来说报错实在是太不应该了。&lt;br&gt;查了之后，才发现原来 MySQL 的 utf-8 是不完全的，只支持 1-3 个字节，而 emoji 的 utf-8 编码大多为 4 个字节。为了支持更多的字符集，MySQL 5.5 推出了编码 utf8mb4，使其可以兼容 4 字节的 emoji。&lt;br&gt;因此，若要让数据库支持 emoji，可以将编码从 utf-8 改为 utf8mb4。&lt;/p&gt;
&lt;p&gt;对于新创建的表这样没有问题，但对于旧有的表来说更改字符集代价很大。有没有一个更简单的方法来实现呢？&lt;br&gt;对 Rails 来说是有的。可以通过 &lt;code&gt;serialize&lt;/code&gt; 来实现。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;ActiveRecord::Base&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    serialize &lt;span class=&quot;symbol&quot;&gt;:content&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时存储 emoji 时，就会先进行 serialize 再存入数据库。由于不是直接以 emoji 的 utf-8 编码存储，MySQL 也就不会报错了。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.firmafon.dk/blog/quick-no-hack-emoji-support-with-mysql-rails/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quick, no-hack emoji support with MySQL &amp;amp; Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;当在 charset 为 utf-8 的 MySQL 中插入 emoji 时，数据库会报错 &lt;code&gt;Incorrect string value&lt;/code&gt;。&lt;br&gt;仔细一想，这很奇怪。因为 emoji 本身可以通过 utf-8 来表示，作为 utf-8 的 MySQ
    
    </summary>
    
      <category term="MySQL" scheme="http://kaywu.xyz/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Rails form_for 源码阅读</title>
    <link href="http://kaywu.xyz/2016/11/27/rails-form-for/"/>
    <id>http://kaywu.xyz/2016/11/27/rails-form-for/</id>
    <published>2016-11-27T10:15:49.000Z</published>
    <updated>2017-07-18T14:34:02.000Z</updated>
    
    <content type="html">&lt;p&gt;初学 Rails 时，觉得 form_for 很强大，这么简单就能完成一个表单。&lt;br&gt;现在想来，它其实就是通过配置来输出 Html。但由于做法很巧妙，使用时颇为爽快。&lt;br&gt;于是阅读下源码来研究下它的神奇之处。&lt;/p&gt;
&lt;h4 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%= form_for &lt;span class=&quot;variable&quot;&gt;@person&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |f| %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.label &lt;span class=&quot;symbol&quot;&gt;:first_name&lt;/span&gt; %&amp;gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.text_field &lt;span class=&quot;symbol&quot;&gt;:first_name&lt;/span&gt; %&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.label &lt;span class=&quot;symbol&quot;&gt;:last_name&lt;/span&gt; %&amp;gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.text_field &lt;span class=&quot;symbol&quot;&gt;:last_name&lt;/span&gt; %&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.submit %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/people&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;new_person&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;new_person&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;authenticity_token&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;NrOp5bsjoLRuK8IW5+dQEYjKGUJDe7TQoZVvq95Wteg=&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person_first_name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;First name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person_first_name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person[first_name]&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person_last_name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Last name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person_last_name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person[last_name]&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;commit&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Create Person&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# form_for 源码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;form_for&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(record, options = &amp;#123;&amp;#125;, &amp;amp;block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise &lt;span class=&quot;constant&quot;&gt;ArgumentError&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Missing block&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; block_given?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html_options = options[&lt;span class=&quot;symbol&quot;&gt;:html&lt;/span&gt;] ||= &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; record&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;Symbol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      object_name = record&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      object      = &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      object      = record.is_a?(&lt;span class=&quot;constant&quot;&gt;Array&lt;/span&gt;) ? record.last &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; record&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      raise &lt;span class=&quot;constant&quot;&gt;ArgumentError&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;First argument in form cannot contain nil or be empty&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      object_name = options[&lt;span class=&quot;symbol&quot;&gt;:as&lt;/span&gt;] || model_name_from_record_or_class(object).param_key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      apply_form_for_options!(record, object, options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html_options[&lt;span class=&quot;symbol&quot;&gt;:data&lt;/span&gt;]   = options.delete(&lt;span class=&quot;symbol&quot;&gt;:data&lt;/span&gt;)   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; options.has_key?(&lt;span class=&quot;symbol&quot;&gt;:data&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html_options[&lt;span class=&quot;symbol&quot;&gt;:remote&lt;/span&gt;] = options.delete(&lt;span class=&quot;symbol&quot;&gt;:remote&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; options.has_key?(&lt;span class=&quot;symbol&quot;&gt;:remote&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html_options[&lt;span class=&quot;symbol&quot;&gt;:method&lt;/span&gt;] = options.delete(&lt;span class=&quot;symbol&quot;&gt;:method&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; options.has_key?(&lt;span class=&quot;symbol&quot;&gt;:method&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html_options[&lt;span class=&quot;symbol&quot;&gt;:enforce_utf8&lt;/span&gt;] = options.delete(&lt;span class=&quot;symbol&quot;&gt;:enforce_utf8&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; options.has_key?(&lt;span class=&quot;symbol&quot;&gt;:enforce_utf8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html_options[&lt;span class=&quot;symbol&quot;&gt;:authenticity_token&lt;/span&gt;] = options.delete(&lt;span class=&quot;symbol&quot;&gt;:authenticity_token&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    builder = instantiate_builder(object_name, object, options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    output  = capture(builder, &amp;amp;block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html_options[&lt;span class=&quot;symbol&quot;&gt;:multipart&lt;/span&gt;] ||= builder.multipart?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html_options = html_options_for_form(options[&lt;span class=&quot;symbol&quot;&gt;:url&lt;/span&gt;] || &amp;#123;&amp;#125;, html_options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    form_tag_with_body(html_options, output)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;form_for 如何获得 @person 的 model name？&lt;br&gt;通过 &lt;code&gt;model_name_from_record_or_class(object).param_key&lt;/code&gt; 方法。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ActionView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ModelNaming&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Converts the given object to an ActiveModel compliant one.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;convert_to_model&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      object.respond_to?(&lt;span class=&quot;symbol&quot;&gt;:to_model&lt;/span&gt;) ? object.to_model &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;model_name_from_record_or_class&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(record_or_class)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      convert_to_model(record_or_class).model_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何判断 @person 是 create 还是 update?&lt;br&gt;通过 &lt;code&gt;persisted?&lt;/code&gt; 来判断。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# apply_from_for_options 中的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;action, method = object.respond_to?(&lt;span class=&quot;symbol&quot;&gt;:persisted?&lt;/span&gt;) &amp;amp;&amp;amp; object.persisted? ? [&lt;span class=&quot;symbol&quot;&gt;:edit&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:patch&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;symbol&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:post&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormBuilder 的作用是？&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# FormBuilder&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(field_helpers - [&lt;span class=&quot;symbol&quot;&gt;:label&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:check_box&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:radio_button&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:fields_for&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:hidden_field&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:file_field&lt;/span&gt;]).each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |selector|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    class_eval &amp;lt;&amp;lt;-&lt;span class=&quot;constant&quot;&gt;RUBY_EVAL&lt;/span&gt;, __FILE_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;, __LINE_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#&amp;#123;selector&amp;#125;(method, options = &amp;#123;&amp;#125;)  # def text_field(method, options = &amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@template&lt;/span&gt;.send(                      &lt;span class=&quot;comment&quot;&gt;#   &lt;span class=&quot;doctag&quot;&gt;@template&lt;/span&gt;.send(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;#&amp;#123;selector.inspect&amp;#125;,               #     &quot;text_field&quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;variable&quot;&gt;@object_name&lt;/span&gt;,                      &lt;span class=&quot;comment&quot;&gt;#     &lt;span class=&quot;doctag&quot;&gt;@object&lt;/span&gt;_name,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          method,                            &lt;span class=&quot;comment&quot;&gt;#     method,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          objectify_options(options))        &lt;span class=&quot;comment&quot;&gt;#     objectify_options(options))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;                                    &lt;span class=&quot;comment&quot;&gt;# end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;RUBY_EVAL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是 FormBuilder 中的一段代码，其中 @template 代表的是 FormHelper。可以看出，FormBuilder 其实是一个 FormHelper 方法的代理类。&lt;br&gt;那为什么不直接使用 FormHelper？我的理解是，通过加入一层抽象，增加了灵活性。比如可以通过扩展 FormBuilder 来实现自定义的表单功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最终的 html 是怎么生成的？&lt;br&gt;在 &lt;code&gt;capture(builder, &amp;amp;block)&lt;/code&gt; 中通过 FormBuilder 的方法来生成第一步的html，再通过 &lt;code&gt;form_tag_with_body(html_options, output)&lt;/code&gt; 替换掉生成 html 中的 form_tag，形成最终版。&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value = &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buffer = with_output_buffer &amp;#123; value = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt;(*args) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; string = buffer.presence || value &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; string.is_a?(&lt;span class=&quot;constant&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;constant&quot;&gt;ERB::Util&lt;/span&gt;.html_escape string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;初学 Rails 时，觉得 form_for 很强大，这么简单就能完成一个表单。&lt;br&gt;现在想来，它其实就是通过配置来输出 Html。但由于做法很巧妙，使用时颇为爽快。&lt;br&gt;于是阅读下源码来研究下它的神奇之处。&lt;/p&gt;
&lt;h4 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%= form_for &lt;span class=&quot;variable&quot;&gt;@person&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |f| %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.label &lt;span class=&quot;symbol&quot;&gt;:first_name&lt;/span&gt; %&amp;gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.text_field &lt;span class=&quot;symbol&quot;&gt;:first_name&lt;/span&gt; %&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.label &lt;span class=&quot;symbol&quot;&gt;:last_name&lt;/span&gt; %&amp;gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.text_field &lt;span class=&quot;symbol&quot;&gt;:last_name&lt;/span&gt; %&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%= f.submit %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/people&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;new_person&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;new_person&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;authenticity_token&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;NrOp5bsjoLRuK8IW5+dQEYjKGUJDe7TQoZVvq95Wteg=&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person_first_name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;First name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person_first_name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person[first_name]&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person_last_name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Last name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person_last_name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;person[last_name]&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;commit&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Create Person&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://kaywu.xyz/categories/Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>Ruby super 关键字</title>
    <link href="http://kaywu.xyz/2016/11/20/ruby-super/"/>
    <id>http://kaywu.xyz/2016/11/20/ruby-super/</id>
    <published>2016-11-20T09:05:19.000Z</published>
    <updated>2017-07-18T09:14:27.000Z</updated>
    
    <content type="html">&lt;p&gt;由于之前没接触过 Ruby super 的用法，想当然地按照 Java 的方法来使用，闹出了一个匪夷所思的 Bug。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a_method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a_method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.a_method(arg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;B&lt;/span&gt;.new.a_method(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; NoMethodError: undefined method `a_method&#39; for 1:Fixnum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查了下才知，原来在 Ruby 中调用父类的同名方法， 只需使用 super，而不需再加上方法的名字。&lt;br&gt;上述代码改成如下即可。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a_method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(arg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那想调用父类的其他方法要如何？可以使用 &lt;code&gt;method(:foo).super_method.call&lt;/code&gt; 来调用父类的 foo 方法。&lt;/p&gt;
&lt;p&gt;编程这事，果然不能想当然，不然坑得是自己。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2564391/how-do-i-call-a-super-class-method&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/2564391/how-do-i-call-a-super-class-method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ruby-doc.org/docs/keywords/1.9/files/keywords_rb.html#M000034&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ruby-doc.org/docs/keywords/1.9/files/keywords_rb.html#M000034&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于之前没接触过 Ruby super 的用法，想当然地按照 Java 的方法来使用，闹出了一个匪夷所思的 Bug。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
    
    </summary>
    
      <category term="Ruby" scheme="http://kaywu.xyz/categories/Ruby/"/>
    
    
  </entry>
  
  <entry>
    <title>Ruby 元编程</title>
    <link href="http://kaywu.xyz/2016/10/16/meta-programming/"/>
    <id>http://kaywu.xyz/2016/10/16/meta-programming/</id>
    <published>2016-10-16T08:49:33.000Z</published>
    <updated>2017-07-18T14:31:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Ch-1&quot;&gt;&lt;a href=&quot;#Ch-1&quot; class=&quot;headerlink&quot; title=&quot;Ch.1&quot;&gt;&lt;/a&gt;Ch.1&lt;/h2&gt;&lt;h3 id=&quot;打开类&quot;&gt;&lt;a href=&quot;#打开类&quot; class=&quot;headerlink&quot; title=&quot;打开类&quot;&gt;&lt;/a&gt;打开类&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;y&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;D&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.x &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &#39;x&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.y &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &#39;y&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，当第一次提及 class D 时，还没有一个叫做 D 的类存在。因此，Ruby 开始着手定义这个类，并定义 x() 方法。在第二次提及 D 类时，它已经存在，Ruby 就不用再定义它了。Ruby 只要重新打开这个已经存在的类，并为之定义 y() 方法。从某种意义上说，Rub y的 class 关键字更像是一个作用域操作符而不是类型声明语句。它的确可以创建一个还不存在的类，不过也可以把这看成是一种副作用。对于 class 关键字，其核心任务是把你带到类的上下文中，让你可以在其中定义方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;对象中有什么&quot;&gt;&lt;a href=&quot;#对象中有什么&quot; class=&quot;headerlink&quot; title=&quot;对象中有什么&quot;&gt;&lt;/a&gt;对象中有什么&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@v&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; MyClass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与 Java 这样的静态语言不一样，Ruby 中对象的类和它的实例变量没有关系，当给实例变量赋值时，它们就生成了。因此，对同一个类，你可以创建具有不同实例变量的对象。例如，如果 Bill 不曾调用 obj.my_method() 方法，那么 obj 对象根本不会有任何实例变量。你可以把 Ruby 中实例变量的名字和值理解为哈希表中的键/值对，每一个对象的键/值对都可能不同。&lt;br&gt;一个对象的实例变量存在于对象本身，而一个对象的方法存在于对象自身的类。这就是为什么同一个类的对象共享同样的方法，但不共享实例变量的原因。&lt;br&gt;既然类是对象，那么适用于对象的规则也适用于类。类和其他任何对象一样，也有自己的类，它的名字叫做 Class：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; Class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;String&lt;/span&gt;.superclass &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Object&lt;/span&gt;.superclass &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; BaseObject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;BaseObject&lt;/span&gt;.suberclass &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所有的类最终都继承于 Object，Object 本身又继承于 BasicObject，BasicObject 是 Ruby 对象体系中的根节点。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Class&lt;/span&gt;.superclass &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Module&lt;/span&gt;.superclass &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个类只不过是一个增强的 Module，增强了三个方法——— new()、allocate()、superclass() 而已。&lt;br&gt;&lt;img src=&quot;/img/class.jpg&quot; alt=&quot;class.jpg-50.4kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;任何以大写字母开头的引用（包括类名和模块名），都是常量。常量的作用域不同于变量的作用域。&lt;br&gt;常量可以通过路径方式来唯一标识。常量路径使用双冒号进行分隔。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;constant&quot;&gt;X&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;a constant&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;C::X&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &#39;a constant&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;M::C::X&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &#39;a constant&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在常量前加一组双冒号表示根路径，从而得到一个绝对路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;Y&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;another constant&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;constant&quot;&gt;::M::Y&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &#39;another constant&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;什么是对象？对象无非是一组实例变量外加一个指向其类的引用。对象的方法并不存在于对象本身，而是存在于对象的类中。在类中，这些方法被称为类的实例方法。&lt;br&gt;什么是类？类无非就是一个对象（Class 类的一个实例）外加一组实例方法和一个对其超类的引用。Class 类是 Module 类的子类，因此一个类也是一个模块。&lt;/p&gt;
&lt;h2 id=&quot;调用一个方法时发生了什么&quot;&gt;&lt;a href=&quot;#调用一个方法时发生了什么&quot; class=&quot;headerlink&quot; title=&quot;调用一个方法时发生了什么&quot;&gt;&lt;/a&gt;调用一个方法时发生了什么&lt;/h2&gt;&lt;p&gt;当调用过一个方法时，Ruby 会做两件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到这个方法。这个过程称为方法查找。&lt;/li&gt;
&lt;li&gt;执行这个方法。为了做到这点，Ruby 需要一个叫做 self 的东西。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接受者就是你调用方法所在的对象。例如，在 my_string.reverse() 语句中，my_string 就是接收者。&lt;br&gt;想象从一个类移动到它的超类，然后再移动到超类的超类，依此类推，直到到达 Object 类（所有类的默认超类），最后来到 BasicObject 类（Ruby 类体系结构的根节点）。在这个过程中，你所经历的类路径就是该类的祖先链。&lt;br&gt;方法查找：为了查找一个方法，Ruby 首先在接收者的类中查找，然后一层层地在祖先链中查找，直到找到这个方法为止。&lt;/p&gt;
&lt;p&gt;当你在一个类（甚至可以是另外一个模块）中包含（include）一个模块时，Ruby 耍了些小花招。Ruby 创建了一个封装该模块的匿名类，并把这个匿名类插入到祖先链中，其在链中的位置正好包含在它的类上方。&lt;br&gt;&lt;img src=&quot;/img/ancestors.jpg&quot; alt=&quot;包含模块的方法查找&quot;&gt;&lt;br&gt;Object 类包含了 Kernel 模块，因此 Kernel 就进入了每个对象的祖先链。这样在某个对象中可以随意调用 Kernel 模块的方法。这使得 print 看起来像是一个语言的关键字，其实它不过是一个方法而已。&lt;br&gt;每一行代码都会在一个对象中被执行———这个对象就是所谓的当前对象。当前对象也可以用 self 表示，因为可以用 self 关键字来访问它。&lt;br&gt;在给定时刻，只有一个对象能充当当前对象，但没有哪个对象能长期充当这一角色。特别地，当调用一个方法时，接收者就成为 self。从这一刻起，所有的实例变量都是self的实例变量，所有没有明确指明接收者的方法都在 self 上调用。当你的代码调用其他对象的方法时，这个对象就成为 self。&lt;br&gt;私有方法服从一个简单的规则：不能明确指定一个接收者来调用一个私有方法。换言之，每次调用一个私有方法时，只能调用于隐含的接收者—— self 上。&lt;/p&gt;
&lt;h2 id=&quot;Ch-2&quot;&gt;&lt;a href=&quot;#Ch-2&quot; class=&quot;headerlink&quot; title=&quot;Ch.2&quot;&gt;&lt;/a&gt;Ch.2&lt;/h2&gt;&lt;h3 id=&quot;动态方法&quot;&gt;&lt;a href=&quot;#动态方法&quot; class=&quot;headerlink&quot; title=&quot;动态方法&quot;&gt;&lt;/a&gt;动态方法&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(my_arg)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        my_arg * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.my_method(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.send(&lt;span class=&quot;symbol&quot;&gt;:my_method&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 send() 方法，你想调用的方法名可以成为一个参数，这样就可以在代码运行期间，直到最后一刻才决定调用哪个方法。这种技术称为动态派发。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    define_method &lt;span class=&quot;symbol&quot;&gt;:my_method&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |my_arg|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        my_args * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.my_method(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;define_method() 方法在 MyClass 内部执行，因此 my_method() 定义为 MyClass 的实例方法。这种在运行时定义方法的技术称为动态方法。&lt;/p&gt;
&lt;h3 id=&quot;method-missing&quot;&gt;&lt;a href=&quot;#method-missing&quot; class=&quot;headerlink&quot; title=&quot;method_missing&quot;&gt;&lt;/a&gt;method_missing&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Lawyer&lt;/span&gt;;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nick = &lt;span class=&quot;constant&quot;&gt;Lawyer&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nick.talk_simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;status&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;NoMethodError&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; undefined method &lt;span class=&quot;string&quot;&gt;&#39;talk_simple&#39;&lt;/span&gt; fro &lt;span class=&quot;value&quot;&gt;#&amp;lt;Lawyer:0x3c848&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当调用 talk_simple() 方法时，Ruby 回到 nick 对象的类中查询它的实例方法。如果在那里找不到 talk_simple() 方法，Ruby 会沿着祖先链向上搜寻进入 Object 类，并且最终来到 Kernal 模块。由于 Ruby 在哪里都没找到 talk_simple() 方法，它只好承认自己的失败，并在 nick 对象上调用一个名为 method_missing() 的方法。Kernel#method_missing() 方法会抛出一个 NoMethodError 进行响应，这是它全部的工作。&lt;br&gt;你可以通过覆写它来截获无主的消息。每一个来到 method_missiong 的消息都带着被调用方法的名字，以及所有调用时传递的参数和块。&lt;br&gt;覆写 method_missiong() 方法使得你可以调用实际上并不存在的方法。&lt;br&gt;被 method_missiong() 方法处理的消息，从调用者角度看，跟普通方法没什么区别，但是实际上接受者并没有相对应的方法。这被称为一个幽灵方法。&lt;/p&gt;
&lt;p&gt;当一个幽灵方法和一个真实方法发生名字冲突时，后者会胜出。如果不需要那个继承来的真实方法，则可以通过删除它来解决这个问题。为了安全起见，你应该在代理类中删除绝大多数继承来的方法。这就是所谓的白板类，它所拥有的方法比 Object 类还要少。&lt;br&gt;你可以通过两种简单的途径来删除一个方法。可以使用 Module#undeft_method 方法，它会删除所有的（包括继承来的）方法；也可以使用 Module@remove_method() 方法，它删除接受者自己的方法，而保留继承来的方法。&lt;/p&gt;
&lt;h2 id=&quot;Ch-3&quot;&gt;&lt;a href=&quot;#Ch-3&quot; class=&quot;headerlink&quot; title=&quot;Ch.3&quot;&gt;&lt;/a&gt;Ch.3&lt;/h2&gt;&lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;块会在定义时获取周围的绑定。你可以在块的内部定义额外的绑定，但是这些绑定在块结束时就会消失。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top_level_variable = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_method &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  top_level_variable += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  local_to_block = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top_level_variable &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;local_to_block &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在一些语言中，比如  Java 和 C#，有“内部作用域”的概念。在内部作用于中可以看见“外部作用域”中的变量。但 Ruby 中没有这种嵌套的作用域，它的作用域之间是截然分开的：一旦进入一个新的作用域，原先的绑定就会被替换为一组新的绑定。&lt;/p&gt;
&lt;p&gt;准确地说，程序会在三个地方关闭前一个作用域，同时打开一个新的作用域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类定义&lt;/li&gt;
&lt;li&gt;模块定义&lt;/li&gt;
&lt;li&gt;方法&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;v1 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;# 作用域门：进入 class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v2 = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    local_variables         &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; [:v2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_method&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;# 作用域门：进入 def&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        v3 = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local_variables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;                     &lt;span class=&quot;comment&quot;&gt;# 作用域门：离开 def&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    local_variables         &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; [:v2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;                         &lt;span class=&quot;comment&quot;&gt;# 作用域门：离开 class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.my_method               &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; [:v3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.my_method               &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; [:v3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;local_variables             &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; [:v1, :obj]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个Ruby作用域包含一组绑定，并且不同的作用域之间被作用域门分隔开来：class、module 和 def。&lt;br&gt;如果要让一两个绑定穿越作用域门，那么可以用方法调用来代替作用域门：用一个闭包获取当前的绑定，并把这个闭包传递给该方法。你可以使用 Class.new() 方法代替 class，使用 Module.new 代替 module，以及使用 Module#define_method() 代替 def。这就形成了一个扁平作用域，它是闭包中的一个基本概念。如果在一个扁平作用域中定义了多个方法，则这些方法可以用一个作用域门进行保护，并共享绑定，这种技术称为共享作用域。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a_scope&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;some value&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;another_scope&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$var&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a_scope&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;another_scope =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;some value&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;全局变量（以$开头）可以在任何作用域中访问。如非必要，尽可能少使用全局变量。&lt;br&gt;有时可以用顶级实例变量来代替全局变量。他们是顶级 main 的实例变量。&lt;br&gt;只要 main 对象在扮演 self 的角色，就可以访问顶级实例变量。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@var&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;The top-level @var&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@var&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_method &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &quot;The top-level &lt;span class=&quot;doctag&quot;&gt;@var&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;instance-eval&quot;&gt;&lt;a href=&quot;#instance-eval&quot; class=&quot;headerlink&quot; title=&quot;instance_eval()&quot;&gt;&lt;/a&gt;instance_eval()&lt;/h3&gt;&lt;p&gt;Object#instance_eval() 方法，它在一个对象的上下文中执行一个块。在运行时，该块的接收者会成为 self，因此它可以访问接收者的私有方法和实例变量。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@v&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.instance_eval &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;             &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &amp;lt;MyClass:0x3340dc &lt;span class=&quot;doctag&quot;&gt;@v&lt;/span&gt;=1&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@v&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;洁净室仅仅是一个用来执行块的环境，它通常还会暴露若干有用的方法供块调用。&lt;/p&gt;
&lt;h3 id=&quot;可调用对象&quot;&gt;&lt;a href=&quot;#可调用对象&quot; class=&quot;headerlink&quot; title=&quot;可调用对象&quot;&gt;&lt;/a&gt;可调用对象&lt;/h3&gt;&lt;p&gt;可调用对象是可以执行的代码片段，而且它们有自己的作用域。&lt;br&gt;可调用对象可以有以下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块（虽然它们不是真正的“对象”，但是它们是“可调用的”）：在定义它们的作用域中执行。&lt;/li&gt;
&lt;li&gt;proc：Proc 类的对象，跟块一样，它们也在定义自身的作用域中执行。&lt;/li&gt;
&lt;li&gt;lambda：也是 Proc 类的对象，但是它跟普通的 proc 有细微的区别。它跟块和 proc 一样都是闭包，因此也在定义自身的作用域中执行。&lt;/li&gt;
&lt;li&gt;方法：绑定于对象，在所绑定对象的作用域中执行。它们也可以与这个作用域解除绑定，再重新绑定到另一个对象的作用域上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同种类的可调用对象有细微的区别。在方法和 lambda 中，return 语句从可调用对象中返回。在块和 proc 中，return 语句从定义可调用对象的原始上下文中返回。&lt;br&gt;另外，不同的可调用对象对传入参数数目不符有不同的反应。其中方法处理方式最严格，lambda 同样严格（它与方法相比，在某些极端情况下略为宽松），而 proc 和块则要宽松一些。&lt;br&gt;尽管有这些区别，还是可以将一种可调用对象转换为另外一种可调用对象的，实现这样功能的方法包括 Proc.new() 方法、Method#to_proc() 方法和 &amp;amp; 操作符。&lt;/p&gt;
&lt;h2 id=&quot;Ch-4&quot;&gt;&lt;a href=&quot;#Ch-4&quot; class=&quot;headerlink&quot; title=&quot;Ch.4&quot;&gt;&lt;/a&gt;Ch.4&lt;/h2&gt;&lt;h3 id=&quot;类定义&quot;&gt;&lt;a href=&quot;#类定义&quot; class=&quot;headerlink&quot; title=&quot;类定义&quot;&gt;&lt;/a&gt;类定义&lt;/h3&gt;&lt;p&gt;在类定义中，当前对象 self 就是正在定义的类。&lt;br&gt;Ruby 解释器总是追踪当前类（模块）的引用。所有使用 def 定义的方法都成为当前类的实例方法。&lt;br&gt;Module#class_eval 方法会在一个已存在类的上下文中执行一个块。&lt;/p&gt;
&lt;p&gt;Ruby 解释器假定所有的实例变量都属于当前对象 self。在类定义时也是如此：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@my_var&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在类定义时，self 的角色由类本身担任，因此实例变量 @my_var 属于这个类。类的实例变量不同于类的对象的实例变量。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@my_var&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@my_var&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@my_var&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@my_var&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.write obj.read      &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.read            &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;类实例变量只不过属于 Class 类对象的普通实例变量而已。正因为如此，类实例变量仅仅可以被类本身所访问————而不能被类的实例或子类所访问。&lt;/p&gt;
&lt;h3 id=&quot;类变量&quot;&gt;&lt;a href=&quot;#类变量&quot; class=&quot;headerlink&quot; title=&quot;类变量&quot;&gt;&lt;/a&gt;类变量&lt;/h3&gt;&lt;p&gt;类变量与类实例变量不同，它们可以被子类或类的实例所使用。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@@v&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为类变量并不真正属于类——它们属于类体系结构。由于 @@v 定义于 main 的上下文，它属于 main 的类 Object，所以也属于 Object 的所有后代。MyClass 继承自Object，因此它也共享了这个类变量。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@@v&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@@v&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@@v&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;eigenclass&quot;&gt;&lt;a href=&quot;#eigenclass&quot; class=&quot;headerlink&quot; title=&quot;eigenclass&quot;&gt;&lt;/a&gt;eigenclass&lt;/h3&gt;&lt;p&gt;Ruby 有一种特殊的基于 class 关键字的语法，它可以让你进入该 eigenclass 的作用域。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;Object&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eigenclass = &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;obj&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eigenclass.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; Class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每个 eigenclass 只有一个实例，并且不能被继承。更重要的是，eigenclass 是一个对象的单件方法的存活之所。&lt;/p&gt;
&lt;p&gt;类方法定义的方式&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;my_method1&lt;/span&gt;;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 方法1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;my_method2&lt;/span&gt;;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 方法2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_method3&lt;/span&gt;;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 方法3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a_method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;C#a_method()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cladd &lt;span class=&quot;constant&quot;&gt;D&lt;/span&gt; &amp;lt; &lt;span class=&quot;constant&quot;&gt;C&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;D&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.a_method &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &#39;C#a_method()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 辅助方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eigenclass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;self&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;obj&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a_singleton_method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;obj#a_singleton_method()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有 eigenclass 的方法查找&lt;br&gt;&lt;img src=&quot;/img/singleton_method.jpg&quot; alt=&quot;singleton_method.jpg-88.2kB&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a_class_method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;C.a_class_method()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;C&lt;/span&gt;.eigenclass                    &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; #&amp;lt;Class:C&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;D&lt;/span&gt;.eigenclass                    &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; #&amp;lt;Class:D&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;D&lt;/span&gt;.eigenclass.superclass         &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; #&amp;lt;Class:C&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;C&lt;/span&gt;.eigenclass.superclass         &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; #&amp;lt;Class:Object&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类的 eigenclass&lt;br&gt;&lt;img src=&quot;/img/class_singleton_method.jpg&quot; alt=&quot;class_singleton_method.jpg-113.5kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果把eigenclass、普通类和模块放到一起，Ruby  对象模型可以总结为 7 条规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只有一种对象——要么是普通对象，要么是模块。&lt;/li&gt;
&lt;li&gt;只有一种模块——可以是普通模块、类、eigenclass 或代理类。&lt;/li&gt;
&lt;li&gt;只有一个方法，它存在于一种模块中——通常是类中。&lt;/li&gt;
&lt;li&gt;每个对象（包括类）都有自己的“真正的类”——要么是普通类，要么是 eigenclass。&lt;/li&gt;
&lt;li&gt;除了 BasicObject 类无超类外，每个类有且只有一个超类。这意味着从任何类只有一条向上直到 BasicObject 的祖先链。&lt;/li&gt;
&lt;li&gt;一个对象的 eigenclass 的超类是这个对象的类；一个类的 eigenclass 的超类是这个类的超类的 eigenclass。&lt;/li&gt;
&lt;li&gt;当调用一个方法，Ruby 先向“右”迈一步进入接收者真正的类，然后向“上”进入祖先链。这就是 Ruby 查找方法的全部内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyModule&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_method&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 类扩展&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;MyMoudle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.my_method &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 对象扩展&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;Object&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;obj&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;MyMoudl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.my_method &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Object#entend() 在接收者 eigenclass 中包括模块的快捷方式。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    extend &lt;span class=&quot;constant&quot;&gt;MyMoule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;MyClass&lt;/span&gt;.my_method &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.extend &lt;span class=&quot;constant&quot;&gt;MyMoule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.my_method &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Ch-5&quot;&gt;&lt;a href=&quot;#Ch-5&quot; class=&quot;headerlink&quot; title=&quot;Ch.5&quot;&gt;&lt;/a&gt;Ch.5&lt;/h2&gt;&lt;h3 id=&quot;eval&quot;&gt;&lt;a href=&quot;#eval&quot; class=&quot;headerlink&quot; title=&quot;eval()&quot;&gt;&lt;/a&gt;eval()&lt;/h3&gt;&lt;p&gt;Kernel#eval() 方法会执行字符串中的代码，并返回执行结果。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;array = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;element = &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eval(&lt;span class=&quot;string&quot;&gt;&quot;array &amp;lt;&amp;lt; element&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; [10, 20, 30]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Binding 就是一个用对象表示的完整作用域。你可以通过创建 Binding 对象来捕获并带走当前的作用域。接下来，你还可以通过 eval() 方法、instance_eval() 方法或 class_eval() 方法，在 Binding 对象所携带的作用域中执行代码。可以使用 Kernel#bingding() 方法来创建 Bingding 对象。&lt;/p&gt;
&lt;h4 id=&quot;污染对象和安全级别&quot;&gt;&lt;a href=&quot;#污染对象和安全级别&quot; class=&quot;headerlink&quot; title=&quot;污染对象和安全级别&quot;&gt;&lt;/a&gt;污染对象和安全级别&lt;/h4&gt;&lt;p&gt;Ruby 会自动把不安全的对象——尤其是从外部传入的对象——标记为被污染的。污染对象包括程序从Web表单、文件和命令行读入的字符串，甚至包括系统变量。每次从污染字符串运算而来的新字符串，也是被污染的。通过调用 tainted?() 方法来判断类是不是被污染了。&lt;br&gt;当设置一个安全级别（可以通过给$SAFE全局变量赋值来实现）时，就禁止了某些特定的潜在危险操作。有五个安全级别可供选择，从默认的 0（这里是一个“嬉皮士公社”，在这儿你可以不受约束，也可以格式化硬盘）到 4（这里是“军事管辖区”，在这儿你甚至不能自由地退出程序）。例如，在安全级别 2 上，会禁止绝大多数文件相关工作。值得注意的是，在任何大于 0 的安全级别上，Ruby 都会拒绝执行污染的字符串。&lt;/p&gt;
&lt;h3 id=&quot;类扩展混入&quot;&gt;&lt;a href=&quot;#类扩展混入&quot; class=&quot;headerlink&quot; title=&quot;类扩展混入&quot;&gt;&lt;/a&gt;类扩展混入&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Merb::Cache::CacheMixin&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(base)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        base.extend(&lt;span class=&quot;constant&quot;&gt;ClassMethods&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassMethods&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*actions)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Merb::Cache::CacheMixin  既充当了混入，也充当了内部模块的命名空间，这个内部模块被恰当地命名为 ClassMethods，并定义了像 cache() 这样的类宏。当包含 CacheMixin 时，就会触发一系列事件，如下：&lt;br&gt;• Ruby 调用一个钩子方法：included() 方法。&lt;br&gt;• 这个钩子方法接着会转而处理包含模块的类（有时会称其为包含者（inclusor），或者像在这里一样称为 base），并用 ClassMethods 模块扩展它。&lt;br&gt;• extend() 方法会把 ClassMethods 模块中的方法包含到包含者的 eigenclass 中。结果就是，cache() 等实例方法会混入到该类的 eigenclass 中，实际上成为包含者的类方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ch-1&quot;&gt;&lt;a href=&quot;#Ch-1&quot; class=&quot;headerlink&quot; title=&quot;Ch.1&quot;&gt;&lt;/a&gt;Ch.1&lt;/h2&gt;&lt;h3 id=&quot;打开类&quot;&gt;&lt;a href=&quot;#打开类&quot; class=&quot;headerlink&quot; title=&quot;打开类&quot;&gt;&lt;/a&gt;打开类&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;y&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &lt;span class=&quot;constant&quot;&gt;D&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.x &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &#39;x&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.y &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &#39;y&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，当第一次提及 class D 时，还没有一个叫做 D 的类存在。因此，Ruby 开始着手定义这个类，并定义 x() 方法。在第二次提及 D 类时，它已经存在，Ruby 就不用再定义它了。Ruby 只要重新打开这个已经存在的类，并为之定义 y() 方法。从某种意义上说，Rub y的 class 关键字更像是一个作用域操作符而不是类型声明语句。它的确可以创建一个还不存在的类，不过也可以把这看成是一种副作用。对于 class 关键字，其核心任务是把你带到类的上下文中，让你可以在其中定义方法。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://kaywu.xyz/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>探索 pointerIndex out of range</title>
    <link href="http://kaywu.xyz/2016/09/25/pointer-index-out-of-range/"/>
    <id>http://kaywu.xyz/2016/09/25/pointer-index-out-of-range/</id>
    <published>2016-09-25T03:50:53.000Z</published>
    <updated>2017-06-25T04:13:00.000Z</updated>
    
    <content type="html">&lt;p&gt;最近 App 里报了一个奇怪的 Exception。为什么说奇怪呢，因为它发生的概率不是很大，但每天总有那么几个。这种非必现的问题，解决起来最是麻烦。查了下代码，发现是 &lt;code&gt;event.getY()&lt;/code&gt; 报错，我刚看到的反应是：纳尼，这里都能报错？网上查找了下解决方案，大致都是在  &lt;code&gt;onTouchEvent&lt;/code&gt; 里面或外面包一层 try…catch。能解决问题，可惜不够优雅。 于是花了些时间研究下。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: pointerIndex out of range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.MotionEvent.nativeGetAxisValue(Native Method)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.MotionEvent.getY(MotionEvent.java:&lt;span class=&quot;number&quot;&gt;1994&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.kay.example.DemoView.onTouchEvent(HomeView.java:&lt;span class=&quot;number&quot;&gt;184&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.View.dispatchTouchEvent(View.java:&lt;span class=&quot;number&quot;&gt;7714&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:&lt;span class=&quot;number&quot;&gt;2210&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:&lt;span class=&quot;number&quot;&gt;1945&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;探索&quot;&gt;&lt;a href=&quot;#探索&quot; class=&quot;headerlink&quot; title=&quot;探索&quot;&gt;&lt;/a&gt;探索&lt;/h2&gt;&lt;p&gt;这种非必现的问题，第一步要找到能重现问题的场景。于是我就拼命地戳那个报错的 View，在不懈努力之下，还真重现了几次。异常的栈跟上面是一致的，看来 &lt;code&gt;event.getY()&lt;/code&gt; 真能出错。&lt;br&gt;如果 &lt;code&gt;event.getY()&lt;/code&gt; 这种基础的方法都能出错，那么系统的控件是如何防止这个错误的呢。&lt;br&gt;查看了 &lt;code&gt;NestedScrollView&lt;/code&gt; 的源码，发现它的 &lt;code&gt;onTouchEvent&lt;/code&gt; 的处理果然是有门道的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NestedScrollView#onTouchEvent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (actionMasked) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MotionEvent.ACTION_DOWN: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mActivePointerId = MotionEventCompat.getPointerId(ev, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startNestedScroll(ViewCompat.SCROLL_AXIS_VERTICAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MotionEvent.ACTION_MOVE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; activePointerIndex = MotionEventCompat.findPointerIndex(ev,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mActivePointerId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (activePointerIndex == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.e(TAG, &lt;span class=&quot;string&quot;&gt;&quot;Invalid pointerId=&quot;&lt;/span&gt; + mActivePointerId + &lt;span class=&quot;string&quot;&gt;&quot; in onTouchEvent&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; y = event.getY(activePointerIndex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在报错的 View 中，是直接通过 &lt;code&gt;event.getY()&lt;/code&gt; 来获取到纵坐标的值。而 &lt;code&gt;NestedScrollView&lt;/code&gt; 先保存了原先 MotionEvent 的 PointerId，再通过 PointerId 查找到 Index，并判断是否有效，最终通过 &lt;code&gt;event.getY(activePointerIndex)&lt;/code&gt; 获取纵坐标的值。&lt;br&gt;查看源码发现，&lt;code&gt;event.getY()&lt;/code&gt; 相当于 &lt;code&gt;event.getY(0)&lt;/code&gt;，也就是说两者的差别在于对 Index 的获取。那么 Index 和 Id 两者有什么区别呢？&lt;/p&gt;
&lt;h2 id=&quot;Index-vs-ID&quot;&gt;&lt;a href=&quot;#Index-vs-ID&quot; class=&quot;headerlink&quot; title=&quot;Index vs ID&quot;&gt;&lt;/a&gt;Index vs ID&lt;/h2&gt;&lt;p&gt;以下这段来自 &lt;a href=&quot;http://android-developers.blogspot.ru/2010/06/making-sense-of-multitouch.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making Sense of Multitouch&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;At a higher level, touchscreen data from a snapshot in time may not be immediately useful since touch gestures involve motion over time spanning many motion events. A pointer index does not necessarily match up across complex events, it only indicates the data’s position within the MotionEvent. However this is not work that your app has to do itself. Each pointer also has an ID mapping that stays persistent across touch events. You can retrieve this ID for each pointer using MotionEvent.getPointerId(index) and find an index for a pointer ID using MotionEvent.findPointerIndex(id).&lt;/p&gt;
&lt;p&gt;简单的说，Index 只是表示存储在 MotionEvent 中数据的位置，在事件中不一定保持一致。而 ID 在 Touch 事件中是保持一致的。因此我们需要先保存 PointerId 然后再通过它来找到对应的 Index 来获取相应的坐标数据。&lt;/p&gt;
&lt;p&gt;看来得多看看系统源码，能少爬多少坑。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.ru/2010/06/making-sense-of-multitouch.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making Sense of Multitouch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近 App 里报了一个奇怪的 Exception。为什么说奇怪呢，因为它发生的概率不是很大，但每天总有那么几个。这种非必现的问题，解决起来最是麻烦。查了下代码，发现是 &lt;code&gt;event.getY()&lt;/code&gt; 报错，我刚看到的反应是：纳尼，这里都能报错？网上查找了下解决方案，大致都是在  &lt;code&gt;onTouchEvent&lt;/code&gt; 里面或外面包一层 try…catch。能解决问题，可惜不够优雅。 于是花了些时间研究下。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: pointerIndex out of range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.MotionEvent.nativeGetAxisValue(Native Method)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.MotionEvent.getY(MotionEvent.java:&lt;span class=&quot;number&quot;&gt;1994&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.kay.example.DemoView.onTouchEvent(HomeView.java:&lt;span class=&quot;number&quot;&gt;184&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.View.dispatchTouchEvent(View.java:&lt;span class=&quot;number&quot;&gt;7714&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:&lt;span class=&quot;number&quot;&gt;2210&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:&lt;span class=&quot;number&quot;&gt;1945&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;探索&quot;&gt;&lt;a href=&quot;#探索&quot; class=&quot;headerlink&quot; title=&quot;探索&quot;&gt;&lt;/a&gt;探索&lt;/h2&gt;&lt;p&gt;这种非必现的问题，第一步要找到能重现问题的场景。于是我就拼命地戳那个报错的 View，在不懈努力之下，还真重现了几次。异常的栈跟上面是一致的，看来 &lt;code&gt;event.getY()&lt;/code&gt; 真能出错。&lt;br&gt;如果 &lt;code&gt;event.getY()&lt;/code&gt; 这种基础的方法都能出错，那么系统的控件是如何防止这个错误的呢。&lt;br&gt;查看了 &lt;code&gt;NestedScrollView&lt;/code&gt; 的源码，发现它的 &lt;code&gt;onTouchEvent&lt;/code&gt; 的处理果然是有门道的。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.xyz/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在非 UI 线程截图</title>
    <link href="http://kaywu.xyz/2016/09/17/Screenshot-in-Non-UI-Thread/"/>
    <id>http://kaywu.xyz/2016/09/17/Screenshot-in-Non-UI-Thread/</id>
    <published>2016-09-17T10:50:48.000Z</published>
    <updated>2016-09-17T13:46:37.000Z</updated>
    
    <content type="html">&lt;p&gt;截图是一个很常见的需求，但网上常见的截图方法都是在主线程运行的。而这有一个隐患，就是卡。因为截图是通过调用 view.draw(canvas)，而这就会阻塞主线程的绘制流程引起卡顿。&lt;/p&gt;
&lt;p&gt;我司的 App，为了解决卡顿的问题，是在后台线程进行截图的，同样也是调用 view.draw(canvas) 方法，如下方代码所示。第一次看到时挺讶异的，draw 还能在后台线程运行而不报错？介于使用该方法时一直很安全，从未报错，也就默默收起这个疑问。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在后台线程调用该方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Bitmap &lt;span class=&quot;title&quot;&gt;getBitmapByView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinearLayout linearLayout)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; h = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bitmap bitmap = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; linearLayout.getChildCount(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (linearLayout.getChildAt(i).getVisibility() == View.VISIBLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h += linearLayout.getChildAt(i).getHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bitmap = Bitmap.createBitmap(linearLayout.getWidth(), h,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Config.ARGB_8888);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Canvas canvas = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Canvas(bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        linearLayout.draw(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bitmap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但没想到之后有一个类似的方法，仅是将参数从 LinearLayout 改为 ScrollView，竟然会偶发性地报错。报错截图如下：&lt;br&gt;&lt;img src=&quot;/img/thread_exception.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样看来，draw 是只能在主线程调用了？那之前的方法为什么一直没事呢？&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;我们先来研究下这个 Exception 是怎么产生的。&lt;br&gt;从上面的堆栈看出，是由 ViewRootImpl 的 checkThread 引起的。该方法是为了防止我们在非 UI 线程更新 UI。当我们调用 requestLayout、invalidate 时最终都会调用到 checkThread 方法。&lt;/p&gt;
&lt;p&gt;那又是如何调用到 checkThread 的呢？首先我们调用了 ScrollView.draw 方法，通过 super.draw 调用了 View.draw 方法。而 Draw 方法中又包含 onDrawScrollBars，它调用了 invalidate 而使得 checkThread 抛出异常。&lt;/p&gt;
&lt;p&gt;我们大胆猜测 onDrawScrollBars 是 LinearLayout、ScrollView 调用相同方法却引发不同结果的关键。我们可以把 ScrollView 的 scrollbar 设为 none 来验证一下猜想。果不其然，之后就再不报这个错了。看代码的逻辑，LinearLayout、ScrollView 都会调用 onDrawScrollBars。但由于 LinearLayout 的 scrollbar 为 none 直接返回，而 ScrollView 走进了 onDrawScrollBars 的逻辑引发了 invalidate。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;从上面的分析可得，使用 view.draw 后台截图时需要十分小心，不然容易出现类似 ScrollView 的情况而报错。&lt;br&gt;使用 view.draw 方法截的图和屏幕展示出来的效果是一样的。但某些软件的截图功能两者是不一致的。比如高德地图的路线截图保存功能，屏幕上显示的路线没有完全展开，而截图显示的是完全展开的路线。猜测可能在自定义 View 中写了类似 draw 的方法然后调用，原理应该还是通过 canvas 来实现的。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zhaokaiqiang1992/article/details/43410351&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;讨论一下“只能在UI主线程更新View”这件小事&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/aigestudio/article/details/43449123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么我们可以在非UI线程中更新UI&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;截图是一个很常见的需求，但网上常见的截图方法都是在主线程运行的。而这有一个隐患，就是卡。因为截图是通过调用 view.draw(canvas)，而这就会阻塞主线程的绘制流程引起卡顿。&lt;/p&gt;
&lt;p&gt;我司的 App，为了解决卡顿的问题，是在后台线程进行截图的，同样也是调用 view.draw(canvas) 方法，如下方代码所示。第一次看到时挺讶异的，draw 还能在后台线程运行而不报错？介于使用该方法时一直很安全，从未报错，也就默默收起这个疑问。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://kaywu.xyz/categories/Android/"/>
    
    
  </entry>
  
</feed>
